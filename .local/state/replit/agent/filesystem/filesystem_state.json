{"file_contents":{"drizzle.config.ts":{"content":"import { defineConfig } from \"drizzle-kit\";\n\nif (!process.env.DATABASE_URL) {\n  throw new Error(\"DATABASE_URL, ensure the database is provisioned\");\n}\n\nexport default defineConfig({\n  out: \"./migrations\",\n  schema: \"./shared/schema.ts\",\n  dialect: \"postgresql\",\n  dbCredentials: {\n    url: process.env.DATABASE_URL,\n  },\n});\n","size_bytes":325},"postcss.config.js":{"content":"export default {\n  plugins: {\n    tailwindcss: {},\n    autoprefixer: {},\n  },\n}\n","size_bytes":80},"replit.md":{"content":"# Logistics Management System\n\n## Overview\n\nThis is a web application for managing logistics operations based on sequential events. The system handles product registration, tracking, and reporting through a multi-step workflow from product entry/exit through delivery and report generation.\n\n## User Preferences\n\nPreferred communication style: Simple, everyday language.\nStorage preference: In-memory storage is sufficient for current needs.\n\n## System Architecture\n\n### Frontend Architecture\n- **Framework**: React with TypeScript\n- **Routing**: Wouter for client-side routing\n- **State Management**: TanStack Query for server state management\n- **UI Framework**: Shadcn/ui components with Radix UI primitives\n- **Styling**: Tailwind CSS with custom logistics theme colors\n- **Form Handling**: React Hook Form with Zod validation\n- **Build Tool**: Vite\n\n### Backend Architecture\n- **Runtime**: Node.js with Express.js\n- **Language**: TypeScript with ES modules\n- **Database**: PostgreSQL with Drizzle ORM\n- **Database Provider**: Neon Database (serverless PostgreSQL)\n- **Storage Strategy**: In-memory storage for beta version with interface for future database integration\n- **Session Management**: Connect-pg-simple for session storage\n\n### Project Structure\n- `/client` - Frontend React application\n- `/server` - Backend Express server\n- `/shared` - Shared types and schemas between frontend and backend\n- `/migrations` - Database migration files\n\n## Key Components\n\n### Database Schema (shared/schema.ts)\n- **Products Table**: Stores product information including dimensions, weight, regulations, and flow type\n- **Transports Table**: Driver and vehicle information\n- **Deliveries Table**: Delivery details and completion status\n- **Processes Table**: Main workflow orchestration linking all other entities\n\n### Sequential Event Flow\n1. **Event 1**: Product Registration - Add products with specifications and flow type (entrada/salida)\n2. **Event 2**: Transport Information - Driver and vehicle details (pausable)\n3. **Event 3**: Product Delivery - Delivery location and completion (salida flow only)\n4. **Event 4**: Reports and Closure - Generate reports and complete process (salida flow only)\n\n### Frontend Pages\n- **Dashboard**: Overview with stats and active processes\n- **Event1**: Product registration form\n- **Event2**: Transport information form\n- **Event3**: Delivery tracking and completion\n- **Event4**: Report generation and process closure\n\n### Storage Layer\n- **Interface-based Design**: IStorage interface allows switching between memory and database storage\n- **Current Implementation**: MemStorage class for in-memory operations\n- **Future Ready**: Designed to easily swap to PostgreSQL implementation\n\n## Data Flow\n\n1. **Product Registration**: User selects flow type and enters product details\n2. **Process Creation**: System creates a process linking the product\n3. **Transport Assignment**: Driver and vehicle information added to process\n4. **Delivery Tracking**: For salida flow, delivery details and completion\n5. **Report Generation**: Final reports generated and process marked complete\n\n### Flow Types\n- **Entrada**: Simple flow (Events 1-2 only)\n- **Salida**: Complete flow (Events 1-4)\n\n## External Dependencies\n\n### Core Dependencies\n- **@neondatabase/serverless**: Serverless PostgreSQL client\n- **drizzle-orm**: TypeScript ORM for PostgreSQL\n- **@tanstack/react-query**: Server state management\n- **wouter**: Lightweight React router\n- **react-hook-form**: Form handling with validation\n- **zod**: Runtime type validation\n- **@radix-ui/***: Accessible UI components\n- **tailwindcss**: Utility-first CSS framework\n\n### Development Dependencies\n- **vite**: Build tool and dev server\n- **typescript**: Type safety\n- **tsx**: TypeScript execution for development\n- **esbuild**: Production bundling\n\n## Deployment Strategy\n\n### Development\n- **Dev Server**: Vite dev server for frontend with Express backend\n- **Hot Reload**: Vite HMR with Express middleware integration\n- **Type Checking**: TypeScript compiler with strict mode\n\n### Production Build\n- **Frontend**: Vite builds to `dist/public`\n- **Backend**: esbuild bundles server to `dist/index.js`\n- **Static Serving**: Express serves built frontend in production\n\n### Environment Configuration\n- **Development**: NODE_ENV=development with tsx for TypeScript execution\n- **Production**: NODE_ENV=production with compiled JavaScript\n- **Database**: DATABASE_URL environment variable for PostgreSQL connection\n\n### Key Features\n- **Responsive Design**: Mobile-first approach with Tailwind breakpoints\n- **Accessibility**: Radix UI ensures WCAG compliance\n- **Type Safety**: Full TypeScript coverage from database to UI\n- **Progressive Enhancement**: Works without JavaScript for basic functionality\n- **Error Handling**: Comprehensive error boundaries and user feedback","size_bytes":4856},"tailwind.config.ts":{"content":"import type { Config } from \"tailwindcss\";\n\nexport default {\n  darkMode: [\"class\"],\n  content: [\"./client/index.html\", \"./client/src/**/*.{js,jsx,ts,tsx}\"],\n  theme: {\n    extend: {\n      borderRadius: {\n        lg: \"var(--radius)\",\n        md: \"calc(var(--radius) - 2px)\",\n        sm: \"calc(var(--radius) - 4px)\",\n      },\n      colors: {\n        background: \"var(--background)\",\n        foreground: \"var(--foreground)\",\n        card: {\n          DEFAULT: \"var(--card)\",\n          foreground: \"var(--card-foreground)\",\n        },\n        popover: {\n          DEFAULT: \"var(--popover)\",\n          foreground: \"var(--popover-foreground)\",\n        },\n        primary: {\n          DEFAULT: \"var(--primary)\",\n          foreground: \"var(--primary-foreground)\",\n        },\n        secondary: {\n          DEFAULT: \"var(--secondary)\",\n          foreground: \"var(--secondary-foreground)\",\n        },\n        muted: {\n          DEFAULT: \"var(--muted)\",\n          foreground: \"var(--muted-foreground)\",\n        },\n        accent: {\n          DEFAULT: \"var(--accent)\",\n          foreground: \"var(--accent-foreground)\",\n        },\n        destructive: {\n          DEFAULT: \"var(--destructive)\",\n          foreground: \"var(--destructive-foreground)\",\n        },\n        border: \"var(--border)\",\n        input: \"var(--input)\",\n        ring: \"var(--ring)\",\n        chart: {\n          \"1\": \"var(--chart-1)\",\n          \"2\": \"var(--chart-2)\",\n          \"3\": \"var(--chart-3)\",\n          \"4\": \"var(--chart-4)\",\n          \"5\": \"var(--chart-5)\",\n        },\n        sidebar: {\n          DEFAULT: \"var(--sidebar-background)\",\n          foreground: \"var(--sidebar-foreground)\",\n          primary: \"var(--sidebar-primary)\",\n          \"primary-foreground\": \"var(--sidebar-primary-foreground)\",\n          accent: \"var(--sidebar-accent)\",\n          \"accent-foreground\": \"var(--sidebar-accent-foreground)\",\n          border: \"var(--sidebar-border)\",\n          ring: \"var(--sidebar-ring)\",\n        },\n      },\n      keyframes: {\n        \"accordion-down\": {\n          from: {\n            height: \"0\",\n          },\n          to: {\n            height: \"var(--radix-accordion-content-height)\",\n          },\n        },\n        \"accordion-up\": {\n          from: {\n            height: \"var(--radix-accordion-content-height)\",\n          },\n          to: {\n            height: \"0\",\n          },\n        },\n      },\n      animation: {\n        \"accordion-down\": \"accordion-down 0.2s ease-out\",\n        \"accordion-up\": \"accordion-up 0.2s ease-out\",\n      },\n    },\n  },\n  plugins: [require(\"tailwindcss-animate\"), require(\"@tailwindcss/typography\")],\n} satisfies Config;\n","size_bytes":2627},"vite.config.ts":{"content":"import { defineConfig } from \"vite\";\nimport react from \"@vitejs/plugin-react\";\nimport path from \"path\";\nimport runtimeErrorOverlay from \"@replit/vite-plugin-runtime-error-modal\";\n\nexport default defineConfig({\n  plugins: [\n    react(),\n    runtimeErrorOverlay(),\n    ...(process.env.NODE_ENV !== \"production\" &&\n    process.env.REPL_ID !== undefined\n      ? [\n          await import(\"@replit/vite-plugin-cartographer\").then((m) =>\n            m.cartographer(),\n          ),\n        ]\n      : []),\n  ],\n  resolve: {\n    alias: {\n      \"@\": path.resolve(import.meta.dirname, \"client\", \"src\"),\n      \"@shared\": path.resolve(import.meta.dirname, \"shared\"),\n      \"@assets\": path.resolve(import.meta.dirname, \"attached_assets\"),\n    },\n  },\n  root: path.resolve(import.meta.dirname, \"client\"),\n  build: {\n    outDir: path.resolve(import.meta.dirname, \"dist/public\"),\n    emptyOutDir: true,\n  },\n  server: {\n    fs: {\n      strict: true,\n      deny: [\"**/.*\"],\n    },\n  },\n});\n","size_bytes":971},"server/db.ts":{"content":"import { Pool, neonConfig } from '@neondatabase/serverless';\nimport { drizzle } from 'drizzle-orm/neon-serverless';\nimport ws from \"ws\";\nimport * as schema from \"@shared/schema\";\n\nneonConfig.webSocketConstructor = ws;\n\nif (!process.env.DATABASE_URL) {\n  throw new Error(\n    \"DATABASE_URL must be set. Did you forget to provision a database?\",\n  );\n}\n\nexport const pool = new Pool({ connectionString: process.env.DATABASE_URL });\nexport const db = drizzle({ client: pool, schema });\n","size_bytes":483},"server/index.ts":{"content":"import express, { type Request, Response, NextFunction } from \"express\";\nimport { registerRoutes } from \"./routes\";\nimport { setupVite, serveStatic, log } from \"./vite\";\n\nconst app = express();\napp.use(express.json());\napp.use(express.urlencoded({ extended: false }));\n\napp.use((req, res, next) => {\n  const start = Date.now();\n  const path = req.path;\n  let capturedJsonResponse: Record<string, any> | undefined = undefined;\n\n  const originalResJson = res.json;\n  res.json = function (bodyJson, ...args) {\n    capturedJsonResponse = bodyJson;\n    return originalResJson.apply(res, [bodyJson, ...args]);\n  };\n\n  res.on(\"finish\", () => {\n    const duration = Date.now() - start;\n    if (path.startsWith(\"/api\")) {\n      let logLine = `${req.method} ${path} ${res.statusCode} in ${duration}ms`;\n      if (capturedJsonResponse) {\n        logLine += ` :: ${JSON.stringify(capturedJsonResponse)}`;\n      }\n\n      if (logLine.length > 80) {\n        logLine = logLine.slice(0, 79) + \"…\";\n      }\n\n      log(logLine);\n    }\n  });\n\n  next();\n});\n\n(async () => {\n  const server = await registerRoutes(app);\n\n  app.use((err: any, _req: Request, res: Response, _next: NextFunction) => {\n    const status = err.status || err.statusCode || 500;\n    const message = err.message || \"Internal Server Error\";\n\n    res.status(status).json({ message });\n    throw err;\n  });\n\n  // importantly only setup vite in development and after\n  // setting up all the other routes so the catch-all route\n  // doesn't interfere with the other routes\n  if (app.get(\"env\") === \"development\") {\n    await setupVite(app, server);\n  } else {\n    serveStatic(app);\n  }\n\n  // ALWAYS serve the app on the port specified in the environment variable PORT\n  // Other ports are firewalled. Default to 5000 if not specified.\n  // this serves both the API and the client.\n  // It is the only port that is not firewalled.\n  const port = parseInt(process.env.PORT || '5000', 10);\n  server.listen({\n    port,\n    host: \"0.0.0.0\",\n    reusePort: true,\n  }, () => {\n    log(`serving on port ${port}`);\n  });\n})();\n","size_bytes":2066},"server/routes.ts":{"content":"import type { Express } from \"express\";\nimport { createServer, type Server } from \"http\";\nimport { storage } from \"./storage\";\nimport { insertProductSchema, insertTransportSchema, insertDeliverySchema, insertProcessSchema } from \"@shared/schema\";\nimport { z } from \"zod\";\n\nexport async function registerRoutes(app: Express): Promise<Server> {\n  // Get dashboard stats\n  app.get(\"/api/stats\", async (req, res) => {\n    try {\n      const stats = await storage.getStats();\n      res.json(stats);\n    } catch (error) {\n      res.status(500).json({ error: \"Failed to fetch stats\" });\n    }\n  });\n\n  // Get all processes with details\n  app.get(\"/api/processes\", async (req, res) => {\n    try {\n      const processes = await storage.getAllProcessesWithDetails();\n      res.json(processes);\n    } catch (error) {\n      res.status(500).json({ error: \"Failed to fetch processes\" });\n    }\n  });\n\n  // Get active processes\n  app.get(\"/api/processes/active\", async (req, res) => {\n    try {\n      const processes = await storage.getActiveProcesses();\n      const processesWithDetails = await Promise.all(\n        processes.map(p => storage.getProcessWithDetails(p.id))\n      );\n      res.json(processesWithDetails.filter(Boolean));\n    } catch (error) {\n      res.status(500).json({ error: \"Failed to fetch active processes\" });\n    }\n  });\n\n  // Get single process with details\n  app.get(\"/api/processes/:id\", async (req, res) => {\n    try {\n      const id = parseInt(req.params.id);\n      const process = await storage.getProcessWithDetails(id);\n      if (!process) {\n        return res.status(404).json({ error: \"Process not found\" });\n      }\n      res.json(process);\n    } catch (error) {\n      res.status(500).json({ error: \"Failed to fetch process\" });\n    }\n  });\n\n  // Create new process (Event 1 - Product Registration)\n  app.post(\"/api/processes\", async (req, res) => {\n    try {\n      const productData = insertProductSchema.parse(req.body);\n      \n      // Create product\n      const product = await storage.createProduct(productData);\n      \n      // Create process\n      const process = await storage.createProcess({\n        productId: product.id,\n        currentEvent: 1,\n        status: \"in_progress\",\n        processType: productData.flowType,\n      });\n\n      const processWithDetails = await storage.getProcessWithDetails(process.id);\n      res.json(processWithDetails);\n    } catch (error) {\n      if (error instanceof z.ZodError) {\n        return res.status(400).json({ error: \"Invalid product data\", details: error.errors });\n      }\n      res.status(500).json({ error: \"Failed to create process\" });\n    }\n  });\n\n  // Update process to Event 2 (Transport Information)\n  app.post(\"/api/processes/:id/transport\", async (req, res) => {\n    try {\n      const processId = parseInt(req.params.id);\n      const transportData = insertTransportSchema.parse(req.body);\n      \n      // Create transport\n      const transport = await storage.createTransport(transportData);\n      \n      // Update process to next event\n      const nextEvent = 3; // Both entrada and salida go to event 3\n      const updatedProcess = await storage.updateProcess(processId, {\n        transportId: transport.id,\n        currentEvent: nextEvent,\n      });\n\n      if (!updatedProcess) {\n        return res.status(404).json({ error: \"Process not found\" });\n      }\n\n      const processWithDetails = await storage.getProcessWithDetails(processId);\n      res.json(processWithDetails);\n    } catch (error) {\n      if (error instanceof z.ZodError) {\n        return res.status(400).json({ error: \"Invalid transport data\", details: error.errors });\n      }\n      res.status(500).json({ error: \"Failed to update process with transport info\" });\n    }\n  });\n\n  // Update process to Event 3 (Delivery)\n  app.post(\"/api/processes/:id/delivery\", async (req, res) => {\n    try {\n      const processId = parseInt(req.params.id);\n      \n      // Manual validation and transformation for delivery data\n      const { originPlace, destinationPlace, departureTime, deliveryNotes } = req.body;\n      \n      if (!originPlace || !destinationPlace || !departureTime) {\n        return res.status(400).json({ \n          error: \"Missing required fields\", \n          details: \"originPlace, destinationPlace, and departureTime are required\" \n        });\n      }\n\n      const deliveryData = {\n        originPlace,\n        destinationPlace,\n        departureTime: new Date(departureTime),\n        deliveryNotes: deliveryNotes || null,\n      };\n      \n      // Create delivery\n      const delivery = await storage.createDelivery(deliveryData);\n      \n      // Update process\n      const updatedProcess = await storage.updateProcess(processId, {\n        deliveryId: delivery.id,\n        currentEvent: 4,\n      });\n\n      if (!updatedProcess) {\n        return res.status(404).json({ error: \"Process not found\" });\n      }\n\n      const processWithDetails = await storage.getProcessWithDetails(processId);\n      res.json(processWithDetails);\n    } catch (error) {\n      console.error(\"Delivery error:\", error);\n      res.status(500).json({ error: \"Failed to update process with delivery info\", details: (error as Error).message });\n    }\n  });\n\n  // Complete process (Event 4)\n  app.post(\"/api/processes/:id/complete\", async (req, res) => {\n    try {\n      const processId = parseInt(req.params.id);\n      \n      const updatedProcess = await storage.updateProcess(processId, {\n        currentEvent: 4,\n        status: \"completed\",\n      });\n\n      if (!updatedProcess) {\n        return res.status(404).json({ error: \"Process not found\" });\n      }\n\n      const processWithDetails = await storage.getProcessWithDetails(processId);\n      res.json(processWithDetails);\n    } catch (error) {\n      res.status(500).json({ error: \"Failed to complete process\" });\n    }\n  });\n\n  // Pause process\n  app.post(\"/api/processes/:id/pause\", async (req, res) => {\n    try {\n      const processId = parseInt(req.params.id);\n      \n      const updatedProcess = await storage.updateProcess(processId, {\n        status: \"paused\",\n      });\n\n      if (!updatedProcess) {\n        return res.status(404).json({ error: \"Process not found\" });\n      }\n\n      const processWithDetails = await storage.getProcessWithDetails(processId);\n      res.json(processWithDetails);\n    } catch (error) {\n      res.status(500).json({ error: \"Failed to pause process\" });\n    }\n  });\n\n  // Resume process\n  app.post(\"/api/processes/:id/resume\", async (req, res) => {\n    try {\n      const processId = parseInt(req.params.id);\n      \n      const updatedProcess = await storage.updateProcess(processId, {\n        status: \"in_progress\",\n      });\n\n      if (!updatedProcess) {\n        return res.status(404).json({ error: \"Process not found\" });\n      }\n\n      const processWithDetails = await storage.getProcessWithDetails(processId);\n      res.json(processWithDetails);\n    } catch (error) {\n      res.status(500).json({ error: \"Failed to resume process\" });\n    }\n  });\n\n  // Generate reports endpoints - Return PDF data for frontend to generate\n  app.get(\"/api/processes/:id/reports/warehouse\", async (req, res) => {\n    try {\n      const processId = parseInt(req.params.id);\n      const process = await storage.getProcessWithDetails(processId);\n      \n      if (!process) {\n        return res.status(404).json({ error: \"Process not found\" });\n      }\n\n      // Generate PDF content data\n      const pdfContent = {\n        title: \"Reporte de Bodega\",\n        processId: process.id,\n        processType: process.processType.toUpperCase(),\n        date: new Date().toLocaleDateString(\"es-ES\"),\n        product: {\n          name: process.product.name,\n          weight: `${process.product.weight / 1000} kg`,\n          dimensions: `${process.product.dimensions.length}x${process.product.dimensions.width}x${process.product.dimensions.height} cm`,\n          regulations: Object.entries(process.product.regulations)\n            .filter(([_, value]) => value)\n            .map(([key]) => {\n              const labels = {\n                fragile: \"Frágil\",\n                lithium: \"Batería Litio\",\n                hazardous: \"Peligroso\", \n                refrigerated: \"Refrigerado\",\n                valuable: \"Valioso\",\n                oversized: \"Sobre-dimensionado\"\n              };\n              return labels[key as keyof typeof labels];\n            })\n        },\n        transport: process.transport ? {\n          driver: process.transport.driverName,\n          license: process.transport.licenseNumber,\n          vehicle: `${process.transport.vehicleType} - ${process.transport.vehiclePlate}`,\n          notes: process.transport.notes || \"Sin observaciones\"\n        } : null,\n        delivery: process.delivery ? {\n          origin: process.delivery.originPlace,\n          destination: process.delivery.destinationPlace,\n          departureTime: new Date(process.delivery.departureTime).toLocaleString(\"es-ES\"),\n          notes: process.delivery.deliveryNotes || \"Sin observaciones\"\n        } : null,\n        status: process.status,\n        events: process.currentEvent,\n        createdAt: new Date(process.createdAt).toLocaleString(\"es-ES\")\n      };\n\n      res.json(pdfContent);\n      \n      // Auto-save PDF record to history\n      try {\n        await storage.createGeneratedPdf({\n          processId,\n          pdfType: \"salida_producto\",\n          fileName: `warehouse-proceso-${processId}.pdf`,\n          filePath: null\n        });\n      } catch (error) {\n        console.log('Error saving PDF record:', error);\n      }\n    } catch (error) {\n      res.status(500).json({ error: \"Failed to generate warehouse report\" });\n    }\n  });\n\n  app.get(\"/api/processes/:id/reports/transport\", async (req, res) => {\n    try {\n      const processId = parseInt(req.params.id);\n      const process = await storage.getProcessWithDetails(processId);\n      \n      if (!process) {\n        return res.status(404).json({ error: \"Process not found\" });\n      }\n\n      const pdfContent = {\n        title: \"Reporte de Transporte\",\n        processId: process.id,\n        processType: process.processType.toUpperCase(),\n        date: new Date().toLocaleDateString(\"es-ES\"),\n        product: {\n          name: process.product.name,\n          weight: `${process.product.weight / 1000} kg`,\n          dimensions: `${process.product.dimensions.length}x${process.product.dimensions.width}x${process.product.dimensions.height} cm`\n        },\n        transport: process.transport ? {\n          driver: process.transport.driverName,\n          license: process.transport.licenseNumber,\n          vehicle: `${process.transport.vehicleType.toUpperCase()} - ${process.transport.vehiclePlate}`,\n          notes: process.transport.notes || \"Sin observaciones especiales\"\n        } : { error: \"Información de transporte no disponible\" },\n        route: process.delivery ? {\n          origin: process.delivery.originPlace,\n          destination: process.delivery.destinationPlace,\n          departureTime: new Date(process.delivery.departureTime).toLocaleString(\"es-ES\")\n        } : { error: \"Información de ruta no disponible\" },\n        status: process.status,\n        createdAt: new Date(process.createdAt).toLocaleString(\"es-ES\")\n      };\n\n      res.json(pdfContent);\n      \n      // Auto-save PDF record to history\n      try {\n        await storage.createGeneratedPdf({\n          processId,\n          pdfType: \"factura\",\n          fileName: `transport-proceso-${processId}.pdf`,\n          filePath: null\n        });\n      } catch (error) {\n        console.log('Error saving PDF record:', error);\n      }\n    } catch (error) {\n      res.status(500).json({ error: \"Failed to generate transport report\" });\n    }\n  });\n\n  app.get(\"/api/processes/:id/reports/invoice\", async (req, res) => {\n    try {\n      const processId = parseInt(req.params.id);\n      const process = await storage.getProcessWithDetails(processId);\n      \n      if (!process) {\n        return res.status(404).json({ error: \"Process not found\" });\n      }\n\n      const pdfContent = {\n        title: \"Factura de Servicios Logísticos\",\n        processId: process.id,\n        processType: process.processType.toUpperCase(),\n        date: new Date().toLocaleDateString(\"es-ES\"),\n        invoiceNumber: `INV-${process.id.toString().padStart(6, '0')}`,\n        product: {\n          name: process.product.name,\n          weight: `${process.product.weight / 1000} kg`,\n          dimensions: `${process.product.dimensions.length}x${process.product.dimensions.width}x${process.product.dimensions.height} cm`,\n          regulations: Object.entries(process.product.regulations)\n            .filter(([_, value]) => value)\n            .map(([key]) => {\n              const labels = {\n                fragile: \"Manejo especial frágil\",\n                lithium: \"Transporte batería litio\",\n                hazardous: \"Material peligroso\",\n                refrigerated: \"Cadena de frío\",\n                valuable: \"Seguro adicional\",\n                oversized: \"Carga sobre-dimensionada\"\n              };\n              return labels[key as keyof typeof labels];\n            })\n        },\n        services: [\n          { \n            description: process.processType === \"entrada\" ? \"Recepción en bodega\" : \"Preparación para envío\",\n            quantity: 1,\n            unitPrice: 25000,\n            total: 25000\n          },\n          ...(process.transport ? [{\n            description: \"Servicio de transporte\",\n            quantity: 1, \n            unitPrice: 35000,\n            total: 35000\n          }] : []),\n          ...(process.delivery ? [{\n            description: \"Entrega a destino\",\n            quantity: 1,\n            unitPrice: 15000,\n            total: 15000\n          }] : [])\n        ],\n        transport: process.transport,\n        delivery: process.delivery,\n        status: process.status,\n        createdAt: new Date(process.createdAt).toLocaleString(\"es-ES\")\n      };\n\n      // Calculate totals\n      const subtotal = pdfContent.services.reduce((sum, service) => sum + service.total, 0);\n      const iva = Math.round(subtotal * 0.19);\n      const total = subtotal + iva;\n\n      (pdfContent as any).totals = {\n        subtotal,\n        iva,\n        total\n      };\n\n      res.json(pdfContent);\n      \n      // Auto-save PDF record to history\n      try {\n        await storage.createGeneratedPdf({\n          processId,\n          pdfType: \"factura\",\n          fileName: `invoice-proceso-${processId}.pdf`,\n          filePath: null\n        });\n      } catch (error) {\n        console.log('Error saving PDF record:', error);\n      }\n    } catch (error) {\n      res.status(500).json({ error: \"Failed to generate invoice report\" });\n    }\n  });\n\n  // Complete Event 3 for entrada process (confirmation or complaint)\n  app.post(\"/api/processes/:id/complete-event3-entrada\", async (req, res) => {\n    try {\n      const processId = parseInt(req.params.id);\n      const { action, notes } = req.body;\n      \n      if (![\"confirmed\", \"complaint\"].includes(action)) {\n        return res.status(400).json({ error: \"Invalid action. Must be 'confirmed' or 'complaint'\" });\n      }\n\n      const updateData: any = {\n        event3Status: action,\n        updatedAt: new Date(),\n      };\n\n      if (action === \"confirmed\") {\n        updateData.status = \"completed\";\n        updateData.confirmedAt = new Date();\n      } else if (action === \"complaint\") {\n        updateData.status = \"complaint\";\n        updateData.complaintNotes = notes || \"\";\n      }\n\n      const updatedProcess = await storage.updateProcess(processId, updateData);\n\n      if (!updatedProcess) {\n        return res.status(404).json({ error: \"Process not found\" });\n      }\n\n      const processWithDetails = await storage.getProcessWithDetails(processId);\n      res.json(processWithDetails);\n    } catch (error) {\n      res.status(500).json({ error: \"Failed to complete event 3\" });\n    }\n  });\n\n  // PDF History endpoints\n  app.post(\"/api/pdfs\", async (req, res) => {\n    try {\n      const pdfData = req.body;\n      const pdf = await storage.createGeneratedPdf(pdfData);\n      res.json(pdf);\n    } catch (error) {\n      res.status(500).json({ error: \"Failed to save PDF record\" });\n    }\n  });\n\n  app.get(\"/api/pdfs/history\", async (req, res) => {\n    try {\n      const processes = await storage.getAllProcessesWithDetails();\n      const processesWithPdfs = processes.filter(p => p.pdfs && p.pdfs.length > 0);\n      res.json(processesWithPdfs);\n    } catch (error) {\n      res.status(500).json({ error: \"Failed to fetch PDF history\" });\n    }\n  });\n\n  const httpServer = createServer(app);\n  return httpServer;\n}\n","size_bytes":16620},"server/storage.ts":{"content":"import { \n  products, transports, deliveries, processes, generatedPdfs,\n  type Product, type Transport, type Delivery, type Process, type GeneratedPdf,\n  type InsertProduct, type InsertTransport, type InsertDelivery, type InsertProcess, type InsertGeneratedPdf,\n  type ProcessWithDetails\n} from \"@shared/schema\";\nimport { db } from \"./db\";\nimport { eq, or } from \"drizzle-orm\";\n\nexport interface IStorage {\n  // Products\n  createProduct(product: InsertProduct): Promise<Product>;\n  getProduct(id: number): Promise<Product | undefined>;\n  getAllProducts(): Promise<Product[]>;\n\n  // Transports\n  createTransport(transport: InsertTransport): Promise<Transport>;\n  getTransport(id: number): Promise<Transport | undefined>;\n  updateTransport(id: number, transport: Partial<InsertTransport>): Promise<Transport | undefined>;\n\n  // Deliveries\n  createDelivery(delivery: InsertDelivery): Promise<Delivery>;\n  getDelivery(id: number): Promise<Delivery | undefined>;\n  updateDelivery(id: number, delivery: Partial<InsertDelivery>): Promise<Delivery | undefined>;\n\n  // Processes\n  createProcess(process: InsertProcess): Promise<Process>;\n  getProcess(id: number): Promise<Process | undefined>;\n  updateProcess(id: number, process: Partial<InsertProcess>): Promise<Process | undefined>;\n  getAllProcesses(): Promise<Process[]>;\n  getActiveProcesses(): Promise<Process[]>;\n  getProcessWithDetails(id: number): Promise<ProcessWithDetails | undefined>;\n  getAllProcessesWithDetails(): Promise<ProcessWithDetails[]>;\n\n  // PDFs\n  createGeneratedPdf(pdf: InsertGeneratedPdf): Promise<GeneratedPdf>;\n  getProcessPdfs(processId: number): Promise<GeneratedPdf[]>;\n\n  // Stats\n  getStats(): Promise<{\n    totalProducts: number;\n    inTransit: number;\n    delivered: number;\n    activeProcesses: number;\n  }>;\n}\n\n\n\nexport class DatabaseStorage implements IStorage {\n  async createProduct(insertProduct: InsertProduct): Promise<Product> {\n    const [product] = await db.insert(products).values(insertProduct).returning();\n    return product;\n  }\n\n  async getProduct(id: number): Promise<Product | undefined> {\n    const [product] = await db.select().from(products).where(eq(products.id, id));\n    return product || undefined;\n  }\n\n  async getAllProducts(): Promise<Product[]> {\n    return await db.select().from(products);\n  }\n\n  async createTransport(insertTransport: InsertTransport): Promise<Transport> {\n    const [transport] = await db.insert(transports).values(insertTransport).returning();\n    return transport;\n  }\n\n  async getTransport(id: number): Promise<Transport | undefined> {\n    const [transport] = await db.select().from(transports).where(eq(transports.id, id));\n    return transport || undefined;\n  }\n\n  async updateTransport(id: number, transport: Partial<InsertTransport>): Promise<Transport | undefined> {\n    const [updated] = await db.update(transports)\n      .set(transport)\n      .where(eq(transports.id, id))\n      .returning();\n    return updated || undefined;\n  }\n\n  async createDelivery(insertDelivery: InsertDelivery): Promise<Delivery> {\n    const [delivery] = await db.insert(deliveries).values(insertDelivery).returning();\n    return delivery;\n  }\n\n  async getDelivery(id: number): Promise<Delivery | undefined> {\n    const [delivery] = await db.select().from(deliveries).where(eq(deliveries.id, id));\n    return delivery || undefined;\n  }\n\n  async updateDelivery(id: number, delivery: Partial<InsertDelivery>): Promise<Delivery | undefined> {\n    const [updated] = await db.update(deliveries)\n      .set(delivery)\n      .where(eq(deliveries.id, id))\n      .returning();\n    return updated || undefined;\n  }\n\n  async createProcess(insertProcess: InsertProcess): Promise<Process> {\n    const [process] = await db.insert(processes).values(insertProcess).returning();\n    return process;\n  }\n\n  async getProcess(id: number): Promise<Process | undefined> {\n    const [process] = await db.select().from(processes).where(eq(processes.id, id));\n    return process || undefined;\n  }\n\n  async updateProcess(id: number, process: Partial<InsertProcess>): Promise<Process | undefined> {\n    const [updated] = await db.update(processes)\n      .set({ ...process, updatedAt: new Date() })\n      .where(eq(processes.id, id))\n      .returning();\n    return updated || undefined;\n  }\n\n  async getAllProcesses(): Promise<Process[]> {\n    return await db.select().from(processes);\n  }\n\n  async getActiveProcesses(): Promise<Process[]> {\n    return await db.select().from(processes).where(\n      or(eq(processes.status, 'in_progress'), eq(processes.status, 'paused'))\n    );\n  }\n\n  async getProcessWithDetails(id: number): Promise<ProcessWithDetails | undefined> {\n    const result = await db.select({\n      process: processes,\n      product: products,\n      transport: transports,\n      delivery: deliveries,\n    })\n    .from(processes)\n    .leftJoin(products, eq(processes.productId, products.id))\n    .leftJoin(transports, eq(processes.transportId, transports.id))\n    .leftJoin(deliveries, eq(processes.deliveryId, deliveries.id))\n    .where(eq(processes.id, id));\n\n    if (!result[0] || !result[0].product) return undefined;\n\n    const pdfs = await this.getProcessPdfs(id);\n\n    return {\n      ...result[0].process,\n      product: result[0].product,\n      transport: result[0].transport || undefined,\n      delivery: result[0].delivery || undefined,\n      pdfs,\n    };\n  }\n\n  async getAllProcessesWithDetails(): Promise<ProcessWithDetails[]> {\n    const result = await db.select({\n      process: processes,\n      product: products,\n      transport: transports,\n      delivery: deliveries,\n    })\n    .from(processes)\n    .leftJoin(products, eq(processes.productId, products.id))\n    .leftJoin(transports, eq(processes.transportId, transports.id))\n    .leftJoin(deliveries, eq(processes.deliveryId, deliveries.id));\n\n    const processesWithDetails: ProcessWithDetails[] = [];\n    \n    for (const row of result) {\n      if (row.product) {\n        const pdfs = await this.getProcessPdfs(row.process.id);\n        processesWithDetails.push({\n          ...row.process,\n          product: row.product,\n          transport: row.transport || undefined,\n          delivery: row.delivery || undefined,\n          pdfs,\n        });\n      }\n    }\n    \n    return processesWithDetails;\n  }\n\n  async getActiveProcessesWithDetails(): Promise<ProcessWithDetails[]> {\n    const result = await db.select({\n      process: processes,\n      product: products,\n      transport: transports,\n      delivery: deliveries,\n    })\n    .from(processes)\n    .leftJoin(products, eq(processes.productId, products.id))\n    .leftJoin(transports, eq(processes.transportId, transports.id))\n    .leftJoin(deliveries, eq(processes.deliveryId, deliveries.id))\n    .where(or(eq(processes.status, 'in_progress'), eq(processes.status, 'paused')));\n\n    const processesWithDetails: ProcessWithDetails[] = [];\n    \n    for (const row of result) {\n      if (row.product) {\n        const pdfs = await this.getProcessPdfs(row.process.id);\n        processesWithDetails.push({\n          ...row.process,\n          product: row.product,\n          transport: row.transport || undefined,\n          delivery: row.delivery || undefined,\n          pdfs,\n        });\n      }\n    }\n    \n    return processesWithDetails;\n  }\n\n  async createGeneratedPdf(insertPdf: InsertGeneratedPdf): Promise<GeneratedPdf> {\n    const [pdf] = await db.insert(generatedPdfs).values(insertPdf).returning();\n    return pdf;\n  }\n\n  async getProcessPdfs(processId: number): Promise<GeneratedPdf[]> {\n    return await db.select().from(generatedPdfs).where(eq(generatedPdfs.processId, processId));\n  }\n\n  async getStats() {\n    const allProcesses = await db.select().from(processes);\n    const totalProducts = await db.select().from(products);\n    \n    return {\n      totalProducts: totalProducts.length,\n      inTransit: allProcesses.filter(p => p.currentEvent === 3 && p.status === 'in_progress').length,\n      delivered: allProcesses.filter(p => p.status === 'completed').length,\n      activeProcesses: allProcesses.filter(p => p.status === 'in_progress' || p.status === 'paused').length,\n    };\n  }\n}\n\nexport class MemStorage implements IStorage {\n  private products: Map<number, Product>;\n  private transports: Map<number, Transport>;\n  private deliveries: Map<number, Delivery>;\n  private processes: Map<number, Process>;\n  private pdfs: Map<number, GeneratedPdf>;\n  private currentProductId: number;\n  private currentTransportId: number;\n  private currentDeliveryId: number;\n  private currentProcessId: number;\n  private currentPdfId: number;\n\n  constructor() {\n    this.products = new Map();\n    this.transports = new Map();\n    this.deliveries = new Map();\n    this.processes = new Map();\n    this.pdfs = new Map();\n    this.currentProductId = 1;\n    this.currentTransportId = 1;\n    this.currentDeliveryId = 1;\n    this.currentProcessId = 1;\n    this.currentPdfId = 1;\n  }\n\n  async createProduct(insertProduct: InsertProduct): Promise<Product> {\n    const id = this.currentProductId++;\n    const product: Product = {\n      ...insertProduct,\n      id,\n      createdAt: new Date(),\n    };\n    this.products.set(id, product);\n    return product;\n  }\n\n  async getProduct(id: number): Promise<Product | undefined> {\n    return this.products.get(id);\n  }\n\n  async getAllProducts(): Promise<Product[]> {\n    return Array.from(this.products.values());\n  }\n\n  async createTransport(insertTransport: InsertTransport): Promise<Transport> {\n    const id = this.currentTransportId++;\n    const transport: Transport = {\n      ...insertTransport,\n      id,\n      createdAt: new Date(),\n      driverPhoto: insertTransport.driverPhoto || null,\n      notes: insertTransport.notes || null,\n    };\n    this.transports.set(id, transport);\n    return transport;\n  }\n\n  async getTransport(id: number): Promise<Transport | undefined> {\n    return this.transports.get(id);\n  }\n\n  async updateTransport(id: number, transport: Partial<InsertTransport>): Promise<Transport | undefined> {\n    const existing = this.transports.get(id);\n    if (!existing) return undefined;\n    \n    const updated = { ...existing, ...transport };\n    this.transports.set(id, updated);\n    return updated;\n  }\n\n  async createDelivery(insertDelivery: any): Promise<Delivery> {\n    const id = this.currentDeliveryId++;\n    const delivery: Delivery = {\n      ...insertDelivery,\n      id,\n      deliveryNotes: insertDelivery.deliveryNotes || null,\n      completedAt: new Date(),\n    };\n    this.deliveries.set(id, delivery);\n    return delivery;\n  }\n\n  async getDelivery(id: number): Promise<Delivery | undefined> {\n    return this.deliveries.get(id);\n  }\n\n  async updateDelivery(id: number, delivery: Partial<InsertDelivery>): Promise<Delivery | undefined> {\n    const existing = this.deliveries.get(id);\n    if (!existing) return undefined;\n    \n    const updated = { ...existing, ...delivery };\n    this.deliveries.set(id, updated);\n    return updated;\n  }\n\n  async createProcess(insertProcess: InsertProcess): Promise<Process> {\n    const id = this.currentProcessId++;\n    const process: Process = {\n      id,\n      productId: insertProcess.productId,\n      transportId: insertProcess.transportId || null,\n      deliveryId: insertProcess.deliveryId || null,\n      currentEvent: insertProcess.currentEvent || 1,\n      status: insertProcess.status || \"draft\",\n      processType: insertProcess.processType,\n      event3Status: insertProcess.event3Status || null,\n      complaintNotes: insertProcess.complaintNotes || null,\n      confirmedAt: insertProcess.confirmedAt || null,\n      createdAt: new Date(),\n      updatedAt: new Date(),\n    };\n    this.processes.set(id, process);\n    return process;\n  }\n\n  async getProcess(id: number): Promise<Process | undefined> {\n    return this.processes.get(id);\n  }\n\n  async updateProcess(id: number, process: Partial<InsertProcess>): Promise<Process | undefined> {\n    const existing = this.processes.get(id);\n    if (!existing) return undefined;\n    \n    const updated = { ...existing, ...process, updatedAt: new Date() };\n    this.processes.set(id, updated);\n    return updated;\n  }\n\n  async getAllProcesses(): Promise<Process[]> {\n    return Array.from(this.processes.values());\n  }\n\n  async getActiveProcesses(): Promise<Process[]> {\n    return Array.from(this.processes.values()).filter(\n      p => p.status === 'in_progress' || p.status === 'paused'\n    );\n  }\n\n  async getProcessWithDetails(id: number): Promise<ProcessWithDetails | undefined> {\n    const process = this.processes.get(id);\n    if (!process) return undefined;\n\n    const product = this.products.get(process.productId);\n    if (!product) return undefined;\n\n    const transport = process.transportId ? this.transports.get(process.transportId) : undefined;\n    const delivery = process.deliveryId ? this.deliveries.get(process.deliveryId) : undefined;\n    const pdfs = await this.getProcessPdfs(id);\n\n    return {\n      ...process,\n      product,\n      transport,\n      delivery,\n      pdfs,\n    };\n  }\n\n  async getAllProcessesWithDetails(): Promise<ProcessWithDetails[]> {\n    const processesWithDetails: ProcessWithDetails[] = [];\n    \n    for (const process of Array.from(this.processes.values())) {\n      const withDetails = await this.getProcessWithDetails(process.id);\n      if (withDetails) {\n        processesWithDetails.push(withDetails);\n      }\n    }\n    \n    return processesWithDetails;\n  }\n\n  async createGeneratedPdf(insertPdf: InsertGeneratedPdf): Promise<GeneratedPdf> {\n    const id = this.currentPdfId++;\n    const pdf: GeneratedPdf = {\n      ...insertPdf,\n      id,\n      filePath: insertPdf.filePath || null,\n      generatedAt: new Date(),\n    };\n    this.pdfs.set(id, pdf);\n    return pdf;\n  }\n\n  async getProcessPdfs(processId: number): Promise<GeneratedPdf[]> {\n    return Array.from(this.pdfs.values()).filter(pdf => pdf.processId === processId);\n  }\n\n  async getStats() {\n    const allProcesses = Array.from(this.processes.values());\n    \n    return {\n      totalProducts: this.products.size,\n      inTransit: allProcesses.filter(p => p.currentEvent === 3 && p.status === 'in_progress').length,\n      delivered: allProcesses.filter(p => p.status === 'completed').length,\n      activeProcesses: allProcesses.filter(p => p.status === 'in_progress' || p.status === 'paused').length,\n    };\n  }\n}\n\nexport const storage = new DatabaseStorage();\n","size_bytes":14347},"server/vite.ts":{"content":"import express, { type Express } from \"express\";\nimport fs from \"fs\";\nimport path from \"path\";\nimport { createServer as createViteServer, createLogger } from \"vite\";\nimport { type Server } from \"http\";\nimport viteConfig from \"../vite.config\";\nimport { nanoid } from \"nanoid\";\n\nconst viteLogger = createLogger();\n\nexport function log(message: string, source = \"express\") {\n  const formattedTime = new Date().toLocaleTimeString(\"en-US\", {\n    hour: \"numeric\",\n    minute: \"2-digit\",\n    second: \"2-digit\",\n    hour12: true,\n  });\n\n  console.log(`${formattedTime} [${source}] ${message}`);\n}\n\nexport async function setupVite(app: Express, server: Server) {\n  const serverOptions = {\n    middlewareMode: true,\n    hmr: { server },\n    allowedHosts: true as const,\n  };\n\n  const vite = await createViteServer({\n    ...viteConfig,\n    configFile: false,\n    customLogger: {\n      ...viteLogger,\n      error: (msg, options) => {\n        viteLogger.error(msg, options);\n        process.exit(1);\n      },\n    },\n    server: serverOptions,\n    appType: \"custom\",\n  });\n\n  app.use(vite.middlewares);\n  app.use(\"*\", async (req, res, next) => {\n    const url = req.originalUrl;\n\n    try {\n      const clientTemplate = path.resolve(\n        import.meta.dirname,\n        \"..\",\n        \"client\",\n        \"index.html\",\n      );\n\n      // always reload the index.html file from disk incase it changes\n      let template = await fs.promises.readFile(clientTemplate, \"utf-8\");\n      template = template.replace(\n        `src=\"/src/main.tsx\"`,\n        `src=\"/src/main.tsx?v=${nanoid()}\"`,\n      );\n      const page = await vite.transformIndexHtml(url, template);\n      res.status(200).set({ \"Content-Type\": \"text/html\" }).end(page);\n    } catch (e) {\n      vite.ssrFixStacktrace(e as Error);\n      next(e);\n    }\n  });\n}\n\nexport function serveStatic(app: Express) {\n  const distPath = path.resolve(import.meta.dirname, \"public\");\n\n  if (!fs.existsSync(distPath)) {\n    throw new Error(\n      `Could not find the build directory: ${distPath}, make sure to build the client first`,\n    );\n  }\n\n  app.use(express.static(distPath));\n\n  // fall through to index.html if the file doesn't exist\n  app.use(\"*\", (_req, res) => {\n    res.sendFile(path.resolve(distPath, \"index.html\"));\n  });\n}\n","size_bytes":2263},"shared/schema.ts":{"content":"import { pgTable, text, serial, integer, boolean, timestamp, jsonb } from \"drizzle-orm/pg-core\";\nimport { createInsertSchema } from \"drizzle-zod\";\nimport { z } from \"zod\";\n\nexport const products = pgTable(\"products\", {\n  id: serial(\"id\").primaryKey(),\n  name: text(\"name\").notNull(),\n  dimensions: jsonb(\"dimensions\").$type<{\n    length: number;\n    width: number;\n    height: number;\n  }>().notNull(),\n  weight: integer(\"weight\").notNull(), // in grams\n  regulations: jsonb(\"regulations\").$type<{\n    fragile: boolean;\n    lithium: boolean;\n    hazardous: boolean;\n    refrigerated: boolean;\n    valuable: boolean;\n    oversized: boolean;\n  }>().notNull(),\n  flowType: text(\"flow_type\", { enum: [\"entrada\", \"salida\"] }).notNull(),\n  createdAt: timestamp(\"created_at\").defaultNow().notNull(),\n});\n\nexport const transports = pgTable(\"transports\", {\n  id: serial(\"id\").primaryKey(),\n  driverName: text(\"driver_name\").notNull(),\n  licenseNumber: text(\"license_number\").notNull(),\n  vehicleType: text(\"vehicle_type\", { \n    enum: [\"camion\", \"van\", \"furgon\", \"trailer\", \"moto\"] \n  }).notNull(),\n  vehiclePlate: text(\"vehicle_plate\").notNull(),\n  driverPhoto: text(\"driver_photo\"), // base64 or file path\n  notes: text(\"notes\"),\n  createdAt: timestamp(\"created_at\").defaultNow().notNull(),\n});\n\nexport const deliveries = pgTable(\"deliveries\", {\n  id: serial(\"id\").primaryKey(),\n  originPlace: text(\"origin_place\").notNull(),\n  destinationPlace: text(\"destination_place\").notNull(),\n  departureTime: timestamp(\"departure_time\").notNull(),\n  deliveryNotes: text(\"delivery_notes\"),\n  completedAt: timestamp(\"completed_at\").defaultNow().notNull(),\n});\n\nexport const processes = pgTable(\"processes\", {\n  id: serial(\"id\").primaryKey(),\n  productId: integer(\"product_id\").references(() => products.id).notNull(),\n  transportId: integer(\"transport_id\").references(() => transports.id),\n  deliveryId: integer(\"delivery_id\").references(() => deliveries.id),\n  currentEvent: integer(\"current_event\").notNull().default(1), // 1-4 (salida) or 1-3 (entrada)\n  status: text(\"status\", { \n    enum: [\"draft\", \"in_progress\", \"paused\", \"completed\", \"complaint\"] \n  }).notNull().default(\"draft\"),\n  processType: text(\"process_type\", { enum: [\"entrada\", \"salida\"] }).notNull(),\n  // Campos específicos para evento 3 de entrada\n  event3Status: text(\"event3_status\", { enum: [\"confirmed\", \"complaint\"] }),\n  complaintNotes: text(\"complaint_notes\"),\n  confirmedAt: timestamp(\"confirmed_at\"),\n  createdAt: timestamp(\"created_at\").defaultNow().notNull(),\n  updatedAt: timestamp(\"updated_at\").defaultNow().notNull(),\n});\n\n// Nueva tabla para almacenar PDFs generados\nexport const generatedPdfs = pgTable(\"generated_pdfs\", {\n  id: serial(\"id\").primaryKey(),\n  processId: integer(\"process_id\").references(() => processes.id).notNull(),\n  pdfType: text(\"pdf_type\", { enum: [\"salida_producto\", \"factura\", \"entrada_confirmacion\"] }).notNull(),\n  fileName: text(\"file_name\").notNull(),\n  filePath: text(\"file_path\"), // para storage en el futuro\n  generatedAt: timestamp(\"generated_at\").defaultNow().notNull(),\n});\n\nexport const insertProductSchema = createInsertSchema(products).omit({\n  id: true,\n  createdAt: true,\n});\n\nexport const insertTransportSchema = createInsertSchema(transports).omit({\n  id: true,\n  createdAt: true,\n});\n\nexport const insertDeliverySchema = createInsertSchema(deliveries).omit({\n  id: true,\n  completedAt: true,\n}).extend({\n  departureTime: z.string().transform((str) => new Date(str)),\n});\n\nexport const insertProcessSchema = createInsertSchema(processes).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n});\n\nexport const insertGeneratedPdfSchema = createInsertSchema(generatedPdfs).omit({\n  id: true,\n  generatedAt: true,\n});\n\nexport type InsertProduct = z.infer<typeof insertProductSchema>;\nexport type Product = typeof products.$inferSelect;\n\nexport type InsertTransport = z.infer<typeof insertTransportSchema>;\nexport type Transport = typeof transports.$inferSelect;\n\nexport type InsertDelivery = z.infer<typeof insertDeliverySchema>;\nexport type Delivery = typeof deliveries.$inferSelect;\n\nexport type InsertProcess = z.infer<typeof insertProcessSchema>;\nexport type Process = typeof processes.$inferSelect;\n\nexport type InsertGeneratedPdf = z.infer<typeof insertGeneratedPdfSchema>;\nexport type GeneratedPdf = typeof generatedPdfs.$inferSelect;\n\n// Extended types for API responses\nexport type ProcessWithDetails = Process & {\n  product: Product;\n  transport?: Transport;\n  delivery?: Delivery;\n  pdfs?: GeneratedPdf[];\n};\n","size_bytes":4530},"client/src/App.tsx":{"content":"import { Switch, Route } from \"wouter\";\nimport { queryClient } from \"./lib/queryClient\";\nimport { QueryClientProvider } from \"@tanstack/react-query\";\nimport { Toaster } from \"@/components/ui/toaster\";\nimport { TooltipProvider } from \"@/components/ui/tooltip\";\nimport Dashboard from \"@/pages/dashboard\";\nimport Event1 from \"@/pages/event1\";\nimport Event2 from \"@/pages/event2\";\nimport Event3 from \"@/pages/event3\";\nimport Event3Entrada from \"@/pages/event3-entrada\";\nimport Event4 from \"@/pages/event4\";\nimport History from \"@/pages/history\";\nimport NotFound from \"@/pages/not-found\";\n\nfunction Router() {\n  return (\n    <Switch>\n      <Route path=\"/\" component={Dashboard} />\n      <Route path=\"/event1\" component={Event1} />\n      <Route path=\"/event1/:flowType\" component={Event1} />\n      <Route path=\"/event2/:processId\" component={Event2} />\n      <Route path=\"/event3/:processId\" component={Event3} />\n      <Route path=\"/event3-entrada/:processId\" component={Event3Entrada} />\n      <Route path=\"/event4/:processId\" component={Event4} />\n      <Route path=\"/history\" component={History} />\n      <Route component={NotFound} />\n    </Switch>\n  );\n}\n\nfunction App() {\n  return (\n    <QueryClientProvider client={queryClient}>\n      <TooltipProvider>\n        <div className=\"min-h-screen bg-gray-50\">\n          <Toaster />\n          <Router />\n        </div>\n      </TooltipProvider>\n    </QueryClientProvider>\n  );\n}\n\nexport default App;\n","size_bytes":1443},"client/src/index.css":{"content":"@tailwind base;\n@tailwind components;\n@tailwind utilities;\n\n:root {\n  --background: hsl(0, 0%, 100%);\n  --foreground: hsl(20, 14.3%, 4.1%);\n  --muted: hsl(60, 4.8%, 95.9%);\n  --muted-foreground: hsl(25, 5.3%, 44.7%);\n  --popover: hsl(0, 0%, 100%);\n  --popover-foreground: hsl(20, 14.3%, 4.1%);\n  --card: hsl(0, 0%, 100%);\n  --card-foreground: hsl(20, 14.3%, 4.1%);\n  --border: hsl(20, 5.9%, 90%);\n  --input: hsl(20, 5.9%, 90%);\n  --primary: hsl(207, 90%, 54%);\n  --primary-foreground: hsl(211, 100%, 99%);\n  --secondary: hsl(142, 71%, 45%);\n  --secondary-foreground: hsl(355, 7%, 97%);\n  --accent: hsl(60, 4.8%, 95.9%);\n  --accent-foreground: hsl(24, 9.8%, 10%);\n  --destructive: hsl(0, 84.2%, 60.2%);\n  --destructive-foreground: hsl(60, 9.1%, 97.8%);\n  --ring: hsl(20, 14.3%, 4.1%);\n  --radius: 0.5rem;\n  \n  /* Custom logistics colors */\n  --logistics-primary: hsl(207, 90%, 54%);\n  --logistics-primary-light: hsl(207, 90%, 94%);\n  --logistics-secondary: hsl(142, 71%, 45%);\n  --logistics-secondary-light: hsl(142, 71%, 95%);\n  --logistics-warning: hsl(35, 91%, 62%);\n  --logistics-warning-light: hsl(35, 91%, 95%);\n  --logistics-success: hsl(142, 71%, 45%);\n  --logistics-success-light: hsl(142, 71%, 95%);\n}\n\n.dark {\n  --background: hsl(240, 10%, 3.9%);\n  --foreground: hsl(0, 0%, 98%);\n  --muted: hsl(240, 3.7%, 15.9%);\n  --muted-foreground: hsl(240, 5%, 64.9%);\n  --popover: hsl(240, 10%, 3.9%);\n  --popover-foreground: hsl(0, 0%, 98%);\n  --card: hsl(240, 10%, 3.9%);\n  --card-foreground: hsl(0, 0%, 98%);\n  --border: hsl(240, 3.7%, 15.9%);\n  --input: hsl(240, 3.7%, 15.9%);\n  --primary: hsl(207, 90%, 54%);\n  --primary-foreground: hsl(211, 100%, 99%);\n  --secondary: hsl(240, 3.7%, 15.9%);\n  --secondary-foreground: hsl(0, 0%, 98%);\n  --accent: hsl(240, 3.7%, 15.9%);\n  --accent-foreground: hsl(0, 0%, 98%);\n  --destructive: hsl(0, 62.8%, 30.6%);\n  --destructive-foreground: hsl(0, 0%, 98%);\n  --ring: hsl(240, 4.9%, 83.9%);\n  --radius: 0.5rem;\n}\n\n@layer base {\n  * {\n    @apply border-border;\n  }\n\n  body {\n    @apply font-sans antialiased bg-background text-foreground;\n  }\n}\n\n@layer components {\n  .btn-logistics-primary {\n    @apply bg-blue-500 hover:bg-blue-600 text-white px-6 py-3 rounded-lg font-medium transition-all shadow-md hover:shadow-lg flex items-center justify-center gap-2;\n  }\n  \n  .btn-logistics-secondary {\n    @apply bg-green-500 hover:bg-green-600 text-white px-6 py-3 rounded-lg font-medium transition-all shadow-md hover:shadow-lg flex items-center justify-center gap-2;\n  }\n  \n  .btn-logistics-outline {\n    @apply border border-blue-500 text-blue-500 hover:bg-blue-50 px-6 py-3 rounded-lg font-medium transition-all flex items-center justify-center gap-2;\n  }\n  \n  .btn-logistics-ghost {\n    @apply bg-gray-100 hover:bg-gray-200 text-gray-700 px-6 py-3 rounded-lg font-medium transition-all;\n  }\n\n  .step-completed {\n    @apply bg-green-500 text-white;\n  }\n  \n  .step-active {\n    @apply bg-blue-500 text-white;\n  }\n  \n  .step-pending {\n    @apply bg-gray-200 text-gray-500;\n  }\n\n  .card-shadow {\n    @apply shadow-[0_2px_4px_rgba(0,0,0,0.1),0_8px_16px_rgba(0,0,0,0.1)];\n  }\n\n  .card-shadow-lg {\n    @apply shadow-[0_4px_8px_rgba(0,0,0,0.12),0_16px_32px_rgba(0,0,0,0.12)];\n  }\n}\n","size_bytes":3212},"client/src/main.tsx":{"content":"import { createRoot } from \"react-dom/client\";\nimport App from \"./App\";\nimport \"./index.css\";\n\ncreateRoot(document.getElementById(\"root\")!).render(<App />);\n","size_bytes":157},"client/src/components/process-header.tsx":{"content":"import { X } from \"lucide-react\";\nimport { Button } from \"@/components/ui/button\";\n\ninterface ProcessHeaderProps {\n  title: string;\n  onClose: () => void;\n}\n\nexport function ProcessHeader({ title, onClose }: ProcessHeaderProps) {\n  return (\n    <div className=\"bg-white rounded-xl card-shadow p-6\">\n      <div className=\"flex items-center justify-between\">\n        <h2 className=\"text-xl font-bold text-gray-900\">{title}</h2>\n        <Button \n          variant=\"ghost\" \n          size=\"icon\"\n          onClick={onClose}\n          className=\"text-gray-400 hover:text-gray-600\"\n        >\n          <X className=\"h-6 w-6\" />\n        </Button>\n      </div>\n    </div>\n  );\n}\n","size_bytes":671},"client/src/components/progress-bar.tsx":{"content":"import { Check } from \"lucide-react\";\nimport { cn } from \"@/lib/utils\";\n\ninterface ProgressBarProps {\n  currentStep: number;\n  totalSteps: number;\n  flowType: \"entrada\" | \"salida\";\n}\n\nexport function ProgressBar({ currentStep, totalSteps, flowType }: ProgressBarProps) {\n  const maxSteps = flowType === \"entrada\" ? 2 : 4;\n  const steps = Array.from({ length: maxSteps }, (_, i) => i + 1);\n\n  const getStepStatus = (step: number) => {\n    if (step < currentStep) return \"completed\";\n    if (step === currentStep) return \"active\";\n    return \"pending\";\n  };\n\n  const stepLabels = {\n    1: { title: \"Registro de Productos\", description: \"Información básica del producto\" },\n    2: { title: \"Información de Transporte\", description: \"Datos del conductor y vehículo\" },\n    3: { title: \"Entrega del Producto\", description: \"Registro de entrega\" },\n    4: { title: \"Reportes y Cierre\", description: \"Generación de documentos\" },\n  };\n\n  return (\n    <div className=\"flex items-center justify-between\">\n      {steps.map((step, index) => {\n        const status = getStepStatus(step);\n        const isLast = index === steps.length - 1;\n\n        return (\n          <div key={step} className=\"flex items-center flex-1\">\n            <div className=\"flex items-center\">\n              <div\n                className={cn(\n                  \"w-10 h-10 rounded-full flex items-center justify-center text-sm font-medium\",\n                  status === \"completed\" && \"step-completed\",\n                  status === \"active\" && \"step-active\",\n                  status === \"pending\" && \"step-pending\"\n                )}\n              >\n                {status === \"completed\" ? (\n                  <Check className=\"h-5 w-5\" />\n                ) : (\n                  step\n                )}\n              </div>\n              <div className=\"ml-4 hidden md:block\">\n                <p className=\"text-sm font-medium text-gray-900\">\n                  {stepLabels[step as keyof typeof stepLabels]?.title}\n                </p>\n                <p className=\"text-xs text-gray-500\">\n                  {stepLabels[step as keyof typeof stepLabels]?.description}\n                </p>\n              </div>\n            </div>\n            {!isLast && (\n              <div className={cn(\n                \"w-16 h-px ml-4\",\n                status === \"completed\" ? \"bg-[--logistics-secondary]\" : \"bg-gray-300\"\n              )} />\n            )}\n          </div>\n        );\n      })}\n    </div>\n  );\n}\n","size_bytes":2470},"client/src/hooks/use-mobile.tsx":{"content":"import * as React from \"react\"\n\nconst MOBILE_BREAKPOINT = 768\n\nexport function useIsMobile() {\n  const [isMobile, setIsMobile] = React.useState<boolean | undefined>(undefined)\n\n  React.useEffect(() => {\n    const mql = window.matchMedia(`(max-width: ${MOBILE_BREAKPOINT - 1}px)`)\n    const onChange = () => {\n      setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    }\n    mql.addEventListener(\"change\", onChange)\n    setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    return () => mql.removeEventListener(\"change\", onChange)\n  }, [])\n\n  return !!isMobile\n}\n","size_bytes":565},"client/src/hooks/use-toast.ts":{"content":"import * as React from \"react\"\n\nimport type {\n  ToastActionElement,\n  ToastProps,\n} from \"@/components/ui/toast\"\n\nconst TOAST_LIMIT = 1\nconst TOAST_REMOVE_DELAY = 1000000\n\ntype ToasterToast = ToastProps & {\n  id: string\n  title?: React.ReactNode\n  description?: React.ReactNode\n  action?: ToastActionElement\n}\n\nconst actionTypes = {\n  ADD_TOAST: \"ADD_TOAST\",\n  UPDATE_TOAST: \"UPDATE_TOAST\",\n  DISMISS_TOAST: \"DISMISS_TOAST\",\n  REMOVE_TOAST: \"REMOVE_TOAST\",\n} as const\n\nlet count = 0\n\nfunction genId() {\n  count = (count + 1) % Number.MAX_SAFE_INTEGER\n  return count.toString()\n}\n\ntype ActionType = typeof actionTypes\n\ntype Action =\n  | {\n      type: ActionType[\"ADD_TOAST\"]\n      toast: ToasterToast\n    }\n  | {\n      type: ActionType[\"UPDATE_TOAST\"]\n      toast: Partial<ToasterToast>\n    }\n  | {\n      type: ActionType[\"DISMISS_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n  | {\n      type: ActionType[\"REMOVE_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n\ninterface State {\n  toasts: ToasterToast[]\n}\n\nconst toastTimeouts = new Map<string, ReturnType<typeof setTimeout>>()\n\nconst addToRemoveQueue = (toastId: string) => {\n  if (toastTimeouts.has(toastId)) {\n    return\n  }\n\n  const timeout = setTimeout(() => {\n    toastTimeouts.delete(toastId)\n    dispatch({\n      type: \"REMOVE_TOAST\",\n      toastId: toastId,\n    })\n  }, TOAST_REMOVE_DELAY)\n\n  toastTimeouts.set(toastId, timeout)\n}\n\nexport const reducer = (state: State, action: Action): State => {\n  switch (action.type) {\n    case \"ADD_TOAST\":\n      return {\n        ...state,\n        toasts: [action.toast, ...state.toasts].slice(0, TOAST_LIMIT),\n      }\n\n    case \"UPDATE_TOAST\":\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === action.toast.id ? { ...t, ...action.toast } : t\n        ),\n      }\n\n    case \"DISMISS_TOAST\": {\n      const { toastId } = action\n\n      // ! Side effects ! - This could be extracted into a dismissToast() action,\n      // but I'll keep it here for simplicity\n      if (toastId) {\n        addToRemoveQueue(toastId)\n      } else {\n        state.toasts.forEach((toast) => {\n          addToRemoveQueue(toast.id)\n        })\n      }\n\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === toastId || toastId === undefined\n            ? {\n                ...t,\n                open: false,\n              }\n            : t\n        ),\n      }\n    }\n    case \"REMOVE_TOAST\":\n      if (action.toastId === undefined) {\n        return {\n          ...state,\n          toasts: [],\n        }\n      }\n      return {\n        ...state,\n        toasts: state.toasts.filter((t) => t.id !== action.toastId),\n      }\n  }\n}\n\nconst listeners: Array<(state: State) => void> = []\n\nlet memoryState: State = { toasts: [] }\n\nfunction dispatch(action: Action) {\n  memoryState = reducer(memoryState, action)\n  listeners.forEach((listener) => {\n    listener(memoryState)\n  })\n}\n\ntype Toast = Omit<ToasterToast, \"id\">\n\nfunction toast({ ...props }: Toast) {\n  const id = genId()\n\n  const update = (props: ToasterToast) =>\n    dispatch({\n      type: \"UPDATE_TOAST\",\n      toast: { ...props, id },\n    })\n  const dismiss = () => dispatch({ type: \"DISMISS_TOAST\", toastId: id })\n\n  dispatch({\n    type: \"ADD_TOAST\",\n    toast: {\n      ...props,\n      id,\n      open: true,\n      onOpenChange: (open) => {\n        if (!open) dismiss()\n      },\n    },\n  })\n\n  return {\n    id: id,\n    dismiss,\n    update,\n  }\n}\n\nfunction useToast() {\n  const [state, setState] = React.useState<State>(memoryState)\n\n  React.useEffect(() => {\n    listeners.push(setState)\n    return () => {\n      const index = listeners.indexOf(setState)\n      if (index > -1) {\n        listeners.splice(index, 1)\n      }\n    }\n  }, [state])\n\n  return {\n    ...state,\n    toast,\n    dismiss: (toastId?: string) => dispatch({ type: \"DISMISS_TOAST\", toastId }),\n  }\n}\n\nexport { useToast, toast }\n","size_bytes":3895},"client/src/lib/queryClient.ts":{"content":"import { QueryClient, QueryFunction } from \"@tanstack/react-query\";\n\nasync function throwIfResNotOk(res: Response) {\n  if (!res.ok) {\n    const text = (await res.text()) || res.statusText;\n    throw new Error(`${res.status}: ${text}`);\n  }\n}\n\nexport async function apiRequest(\n  method: string,\n  url: string,\n  data?: unknown | undefined,\n): Promise<Response> {\n  const res = await fetch(url, {\n    method,\n    headers: data ? { \"Content-Type\": \"application/json\" } : {},\n    body: data ? JSON.stringify(data) : undefined,\n    credentials: \"include\",\n  });\n\n  await throwIfResNotOk(res);\n  return res;\n}\n\ntype UnauthorizedBehavior = \"returnNull\" | \"throw\";\nexport const getQueryFn: <T>(options: {\n  on401: UnauthorizedBehavior;\n}) => QueryFunction<T> =\n  ({ on401: unauthorizedBehavior }) =>\n  async ({ queryKey }) => {\n    const res = await fetch(queryKey.join(\"/\") as string, {\n      credentials: \"include\",\n    });\n\n    if (unauthorizedBehavior === \"returnNull\" && res.status === 401) {\n      return null;\n    }\n\n    await throwIfResNotOk(res);\n    return await res.json();\n  };\n\nexport const queryClient = new QueryClient({\n  defaultOptions: {\n    queries: {\n      queryFn: getQueryFn({ on401: \"throw\" }),\n      refetchInterval: false,\n      refetchOnWindowFocus: false,\n      staleTime: Infinity,\n      retry: false,\n    },\n    mutations: {\n      retry: false,\n    },\n  },\n});\n","size_bytes":1383},"client/src/lib/types.ts":{"content":"export type FlowType = \"entrada\" | \"salida\";\nexport type VehicleType = \"camion\" | \"van\" | \"furgon\" | \"trailer\" | \"moto\";\nexport type ProcessStatus = \"draft\" | \"in_progress\" | \"paused\" | \"completed\";\n\nexport interface ProductFormData {\n  name: string;\n  dimensions: {\n    length: number;\n    width: number;\n    height: number;\n  };\n  weight: number;\n  regulations: {\n    fragile: boolean;\n    lithium: boolean;\n    hazardous: boolean;\n    refrigerated: boolean;\n    valuable: boolean;\n    oversized: boolean;\n  };\n  flowType: FlowType;\n}\n\nexport interface TransportFormData {\n  driverName: string;\n  licenseNumber: string;\n  vehicleType: VehicleType;\n  vehiclePlate: string;\n  driverPhoto?: string;\n  notes?: string;\n}\n\nexport interface DeliveryFormData {\n  originPlace: string;\n  destinationPlace: string;\n  departureTime: string;\n  deliveryNotes?: string;\n}\n\nexport interface DashboardStats {\n  totalProducts: number;\n  inTransit: number;\n  delivered: number;\n  activeProcesses: number;\n}\n","size_bytes":990},"client/src/lib/utils.ts":{"content":"import { clsx, type ClassValue } from \"clsx\"\nimport { twMerge } from \"tailwind-merge\"\n\nexport function cn(...inputs: ClassValue[]) {\n  return twMerge(clsx(inputs))\n}\n","size_bytes":166},"client/src/pages/dashboard.tsx":{"content":"import { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { useLocation } from \"wouter\";\nimport { \n  Package, \n  Truck, \n  CheckCircle, \n  Settings, \n  Upload,\n  FileText,\n  ArrowDown,\n  ArrowUp,\n  Eye,\n  Play,\n  History\n} from \"lucide-react\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport type { DashboardStats } from \"@/lib/types\";\nimport type { ProcessWithDetails } from \"@shared/schema\";\n\nexport default function Dashboard() {\n  const [, setLocation] = useLocation();\n  const queryClient = useQueryClient();\n\n  const { data: stats, isLoading: statsLoading } = useQuery<DashboardStats>({\n    queryKey: [\"/api/stats\"],\n  });\n\n  const { data: activeProcesses, isLoading: processesLoading } = useQuery<ProcessWithDetails[]>({\n    queryKey: [\"/api/processes/active\"],\n  });\n\n  const { data: allProcesses, isLoading: allProcessesLoading } = useQuery<ProcessWithDetails[]>({\n    queryKey: [\"/api/processes\"],\n  });\n\n  const resumeProcessMutation = useMutation({\n    mutationFn: (processId: number) => \n      apiRequest(\"POST\", `/api/processes/${processId}/resume`),\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/processes\"] });\n    },\n  });\n\n  const handleStartFlow = (flowType: \"entrada\" | \"salida\") => {\n    setLocation(`/event1/${flowType}`);\n  };\n\n  const handleResumeProcess = (process: ProcessWithDetails) => {\n    if (process.status === \"paused\") {\n      resumeProcessMutation.mutate(process.id);\n    }\n    \n    const nextEvent = process.currentEvent;\n    if (nextEvent === 1) {\n      setLocation(`/event1`);\n    } else if (nextEvent === 2) {\n      setLocation(`/event2/${process.id}`);\n    } else if (nextEvent === 3) {\n      // Direct to appropriate event 3 based on flow type\n      if (process.processType === \"entrada\") {\n        setLocation(`/event3-entrada/${process.id}`);\n      } else {\n        setLocation(`/event3/${process.id}`);\n      }\n    } else if (nextEvent === 4) {\n      setLocation(`/event4/${process.id}`);\n    }\n  };\n\n  const formatDate = (date: string | Date) => {\n    return new Date(date).toLocaleDateString(\"es-ES\", {\n      day: \"2-digit\",\n      month: \"2-digit\", \n      year: \"numeric\",\n      hour: \"2-digit\",\n      minute: \"2-digit\"\n    });\n  };\n\n  const getStatusColor = (status: string) => {\n    switch (status) {\n      case \"completed\":\n        return \"bg-green-100 text-green-600\";\n      case \"complaint\":\n        return \"bg-red-100 text-red-600\";\n      case \"in_progress\":\n        return \"bg-yellow-100 text-yellow-600\";\n      case \"paused\":\n        return \"bg-gray-100 text-gray-600\";\n      default:\n        return \"bg-gray-100 text-gray-600\";\n    }\n  };\n\n  const getEventName = (event: number, processType?: string) => {\n    if (processType === \"entrada\") {\n      const events = {\n        1: \"Registro\",\n        2: \"Transporte\", \n        3: \"Confirmación\"\n      };\n      return events[event as keyof typeof events] || \"Desconocido\";\n    } else {\n      const events = {\n        1: \"Registro\",\n        2: \"Transporte\", \n        3: \"Entrega\",\n        4: \"Reportes\"\n      };\n      return events[event as keyof typeof events] || \"Desconocido\";\n    }\n  };\n\n  return (\n    <div className=\"min-h-screen bg-gray-50\">\n      {/* Header - Mobile Optimized */}\n      <header className=\"bg-white shadow-sm sticky top-0 z-50\">\n        <div className=\"max-w-7xl mx-auto px-4 py-3\">\n          <div className=\"flex justify-between items-center\">\n            <div className=\"flex items-center space-x-3\">\n              <img \n                src=\"/assets/logo.png\" \n                alt=\"Cargo Fast\" \n                className=\"h-10 w-auto\"\n              />\n              <div className=\"hidden sm:block\">\n                <p className=\"text-xs text-gray-500\">Sistema de Gestión Logística</p>\n              </div>\n            </div>\n            <div className=\"flex items-center space-x-2\">\n              <Button \n                size=\"sm\" \n                variant=\"outline\"\n                onClick={() => setLocation(\"/history\")}\n                className=\"hidden sm:flex\"\n              >\n                <History className=\"h-4 w-4\" />\n                <span className=\"hidden md:inline ml-2\">Historial</span>\n              </Button>\n              <Button size=\"sm\" className=\"hidden sm:flex bg-blue-600 hover:bg-blue-700\">\n                <FileText className=\"h-4 w-4\" />\n                <span className=\"hidden md:inline ml-2\">Reportes</span>\n              </Button>\n              <div className=\"w-8 h-8 bg-blue-500 rounded-full flex items-center justify-center text-white\">\n                <Settings className=\"h-4 w-4\" />\n              </div>\n            </div>\n          </div>\n        </div>\n      </header>\n\n      <div className=\"max-w-7xl mx-auto px-4 py-4 space-y-6\">\n        {/* Quick Stats - Mobile Optimized */}\n        <div className=\"grid grid-cols-2 lg:grid-cols-4 gap-4\">\n          <Card className=\"shadow-sm\">\n            <CardContent className=\"p-4\">\n              <div className=\"flex items-center justify-between\">\n                <div>\n                  <p className=\"text-xs font-medium text-gray-500\">Productos</p>\n                  <p className=\"text-xl font-bold text-gray-900\">\n                    {statsLoading ? \"...\" : stats?.totalProducts || 0}\n                  </p>\n                </div>\n                <div className=\"w-10 h-10 bg-blue-100 rounded-lg flex items-center justify-center\">\n                  <Package className=\"h-5 w-5 text-blue-600\" />\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n\n          <Card className=\"shadow-sm\">\n            <CardContent className=\"p-4\">\n              <div className=\"flex items-center justify-between\">\n                <div>\n                  <p className=\"text-xs font-medium text-gray-500\">En Tránsito</p>\n                  <p className=\"text-xl font-bold text-yellow-600\">\n                    {statsLoading ? \"...\" : stats?.inTransit || 0}\n                  </p>\n                </div>\n                <div className=\"w-10 h-10 bg-yellow-100 rounded-lg flex items-center justify-center\">\n                  <Truck className=\"h-5 w-5 text-yellow-600\" />\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n\n          <Card className=\"shadow-sm\">\n            <CardContent className=\"p-4\">\n              <div className=\"flex items-center justify-between\">\n                <div>\n                  <p className=\"text-xs font-medium text-gray-500\">Completados</p>\n                  <p className=\"text-xl font-bold text-green-600\">\n                    {statsLoading ? \"...\" : stats?.delivered || 0}\n                  </p>\n                </div>\n                <div className=\"w-10 h-10 bg-green-100 rounded-lg flex items-center justify-center\">\n                  <CheckCircle className=\"h-5 w-5 text-green-600\" />\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n\n          <Card className=\"shadow-sm\">\n            <CardContent className=\"p-4\">\n              <div className=\"flex items-center justify-between\">\n                <div>\n                  <p className=\"text-xs font-medium text-gray-500\">Activos</p>\n                  <p className=\"text-xl font-bold text-blue-600\">\n                    {statsLoading ? \"...\" : stats?.activeProcesses || 0}\n                  </p>\n                </div>\n                <div className=\"w-10 h-10 bg-blue-100 rounded-lg flex items-center justify-center\">\n                  <Settings className=\"h-5 w-5 text-blue-600\" />\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n        </div>\n\n        {/* Process Flow Navigator - Mobile Optimized */}\n        <Card className=\"shadow-sm\">\n          <CardHeader className=\"pb-4\">\n            <CardTitle className=\"text-lg\">Iniciar Nuevo Proceso</CardTitle>\n          </CardHeader>\n          <CardContent className=\"p-4 pt-0\">\n            <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n              <div \n                className=\"border-2 border-dashed border-gray-300 rounded-lg p-4 text-center hover:border-green-500 hover:bg-green-50 transition-all cursor-pointer active:scale-95\"\n                onClick={() => handleStartFlow(\"entrada\")}\n              >\n                <div className=\"w-12 h-12 bg-green-100 rounded-full flex items-center justify-center mx-auto mb-3\">\n                  <ArrowDown className=\"h-6 w-6 text-green-600\" />\n                </div>\n                <h3 className=\"text-base font-semibold text-gray-900 mb-1\">Entrada</h3>\n                <p className=\"text-sm text-gray-500 mb-2\">Productos que ingresan</p>\n                <p className=\"text-xs text-gray-400\">3 eventos</p>\n              </div>\n\n              <div \n                className=\"border-2 border-dashed border-gray-300 rounded-lg p-4 text-center hover:border-yellow-500 hover:bg-yellow-50 transition-all cursor-pointer active:scale-95\"\n                onClick={() => handleStartFlow(\"salida\")}\n              >\n                <div className=\"w-12 h-12 bg-yellow-100 rounded-full flex items-center justify-center mx-auto mb-3\">\n                  <ArrowUp className=\"h-6 w-6 text-yellow-600\" />\n                </div>\n                <h3 className=\"text-base font-semibold text-gray-900 mb-1\">Salida</h3>\n                <p className=\"text-sm text-gray-500 mb-2\">Envío y entrega</p>\n                <p className=\"text-xs text-gray-400\">4 eventos</p>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n\n        {/* Active Processes - Mobile Optimized */}\n        <Card className=\"shadow-sm\">\n          <CardHeader className=\"pb-4\">\n            <div className=\"flex justify-between items-center\">\n              <CardTitle className=\"text-lg\">Procesos Activos</CardTitle>\n              <Button variant=\"ghost\" size=\"sm\" className=\"text-blue-600 hover:text-blue-700 text-sm\">\n                Ver todos\n              </Button>\n            </div>\n          </CardHeader>\n          <CardContent className=\"p-4 pt-0\">\n            {processesLoading ? (\n              <div className=\"text-center py-8\">Cargando procesos activos...</div>\n            ) : !activeProcesses?.length ? (\n              <div className=\"text-center py-8 text-gray-500\">\n                No hay procesos activos en este momento\n              </div>\n            ) : (\n              <div className=\"space-y-3\">\n                {activeProcesses.map((process) => (\n                  <div key={process.id} className=\"border border-gray-200 rounded-lg p-3 hover:bg-gray-50 transition-all\">\n                    <div className=\"flex items-start justify-between mb-3\">\n                      <div className=\"flex items-center space-x-3\">\n                        <div className=\"w-10 h-10 bg-yellow-100 rounded-lg flex items-center justify-center flex-shrink-0\">\n                          <Package className=\"h-5 w-5 text-yellow-600\" />\n                        </div>\n                        <div className=\"min-w-0 flex-1\">\n                          <p className=\"font-medium text-gray-900 truncate\">{process.product.name}</p>\n                          <p className=\"text-xs text-gray-500\">#{process.id}</p>\n                        </div>\n                      </div>\n                      <Button \n                        size=\"sm\"\n                        variant=\"outline\"\n                        onClick={() => handleResumeProcess(process)}\n                        disabled={resumeProcessMutation.isPending}\n                        className=\"flex-shrink-0\"\n                      >\n                        {process.status === \"paused\" ? (\n                          <Play className=\"h-3 w-3\" />\n                        ) : (\n                          \"Ver\"\n                        )}\n                      </Button>\n                    </div>\n                    \n                    <div className=\"flex items-center justify-between text-xs\">\n                      <div className=\"flex items-center space-x-2\">\n                        <Badge className={process.processType === \"entrada\" ? \"bg-green-100 text-green-700\" : \"bg-yellow-100 text-yellow-700\"}>\n                          {process.processType === \"entrada\" ? \"Entrada\" : \"Salida\"}\n                        </Badge>\n                        <span className=\"text-gray-500\">\n                          {getEventName(process.currentEvent, process.processType)}\n                        </span>\n                      </div>\n                      <Badge className={getStatusColor(process.status)}>\n                        {process.status === \"completed\" ? \"OK\" : \n                         process.status === \"complaint\" ? \"Queja\" :\n                         process.status === \"in_progress\" ? \"Activo\" :\n                         process.status === \"paused\" ? \"Pausado\" : \"Draft\"}\n                      </Badge>\n                    </div>\n                  </div>\n                ))}\n              </div>\n            )}\n          </CardContent>\n        </Card>\n\n        {/* Recent Records - Mobile Optimized */}\n        <Card className=\"shadow-sm\">\n          <CardHeader className=\"pb-4\">\n            <div className=\"flex justify-between items-center\">\n              <CardTitle className=\"text-lg\">Historial</CardTitle>\n              <Button variant=\"ghost\" size=\"sm\" className=\"text-blue-600 hover:text-blue-700 text-sm\">\n                Ver más\n              </Button>\n            </div>\n          </CardHeader>\n          <CardContent className=\"p-4 pt-0\">\n            {allProcessesLoading ? (\n              <div className=\"text-center py-8 text-gray-500\">Cargando...</div>\n            ) : !allProcesses?.length ? (\n              <div className=\"text-center py-8 text-gray-500\">\n                No hay registros disponibles\n              </div>\n            ) : (\n              <div className=\"space-y-3\">\n                {allProcesses.slice(0, 3).map((process) => (\n                  <div key={process.id} className=\"border border-gray-200 rounded-lg p-3\">\n                    <div className=\"flex items-center justify-between mb-2\">\n                      <h4 className=\"font-medium text-gray-900 truncate flex-1 mr-2\">\n                        {process.product.name}\n                      </h4>\n                      <Button variant=\"ghost\" size=\"sm\" className=\"flex-shrink-0 p-1 h-auto\">\n                        <Eye className=\"h-3 w-3\" />\n                      </Button>\n                    </div>\n                    \n                    <div className=\"flex items-center justify-between text-xs\">\n                      <div className=\"flex items-center space-x-2\">\n                        <Badge className={process.processType === \"entrada\" ? \"bg-green-100 text-green-700\" : \"bg-yellow-100 text-yellow-700\"}>\n                          {process.processType === \"entrada\" ? \"Entrada\" : \"Salida\"}\n                        </Badge>\n                        <span className=\"text-gray-500\">#{process.id}</span>\n                      </div>\n                      <div className=\"flex items-center space-x-2\">\n                        <Badge className={getStatusColor(process.status)}>\n                          {process.status === \"completed\" ? \"OK\" : \n                           process.status === \"complaint\" ? \"Queja\" :\n                           process.status === \"in_progress\" ? \"Activo\" :\n                           process.status === \"paused\" ? \"Pausado\" : \"Draft\"}\n                        </Badge>\n                        <span className=\"text-gray-400\">\n                          {new Date(process.createdAt).toLocaleDateString(\"es-ES\", { \n                            day: \"2-digit\", \n                            month: \"2-digit\" \n                          })}\n                        </span>\n                      </div>\n                    </div>\n                  </div>\n                ))}\n              </div>\n            )}\n          </CardContent>\n        </Card>\n      </div>\n    </div>\n  );\n}\n","size_bytes":16130},"client/src/pages/event1.tsx":{"content":"import { useState } from \"react\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { useMutation } from \"@tanstack/react-query\";\nimport { useLocation } from \"wouter\";\nimport { z } from \"zod\";\nimport { ArrowRight, ArrowLeft } from \"lucide-react\";\nimport { ProcessHeader } from \"@/components/process-header\";\nimport { ProgressBar } from \"@/components/progress-bar\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Checkbox } from \"@/components/ui/checkbox\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Form, FormControl, FormField, FormItem, FormLabel, FormMessage } from \"@/components/ui/form\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport type { ProductFormData, FlowType } from \"@/lib/types\";\n\nconst productSchema = z.object({\n  name: z.string().min(1, \"El nombre del producto es requerido\"),\n  dimensions: z.object({\n    length: z.number().min(1, \"El largo debe ser mayor a 0\"),\n    width: z.number().min(1, \"El ancho debe ser mayor a 0\"),\n    height: z.number().min(1, \"El alto debe ser mayor a 0\"),\n  }),\n  weight: z.number().min(1, \"El peso debe ser mayor a 0\"),\n  regulations: z.object({\n    fragile: z.boolean(),\n    lithium: z.boolean(),\n    hazardous: z.boolean(),\n    refrigerated: z.boolean(),\n    valuable: z.boolean(),\n    oversized: z.boolean(),\n  }),\n  flowType: z.enum([\"entrada\", \"salida\"]),\n});\n\nexport default function Event1() {\n  const [, setLocation] = useLocation();\n  const { toast } = useToast();\n  const [flowType, setFlowType] = useState<FlowType>(\"salida\");\n\n  const form = useForm<ProductFormData>({\n    resolver: zodResolver(productSchema),\n    defaultValues: {\n      name: \"\",\n      dimensions: {\n        length: 0,\n        width: 0,\n        height: 0,\n      },\n      weight: 0,\n      regulations: {\n        fragile: false,\n        lithium: false,\n        hazardous: false,\n        refrigerated: false,\n        valuable: false,\n        oversized: false,\n      },\n      flowType: \"salida\",\n    },\n  });\n\n  const createProcessMutation = useMutation({\n    mutationFn: (data: ProductFormData) => \n      apiRequest(\"POST\", \"/api/processes\", data),\n    onSuccess: async (response) => {\n      const process = await response.json();\n      toast({\n        title: \"Producto registrado\",\n        description: \"El producto ha sido registrado exitosamente.\",\n      });\n      setLocation(`/event2/${process.id}`);\n    },\n    onError: () => {\n      toast({\n        title: \"Error\",\n        description: \"No se pudo registrar el producto. Intenta nuevamente.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const onSubmit = (data: ProductFormData) => {\n    createProcessMutation.mutate(data);\n  };\n\n  const handleFlowTypeChange = (value: FlowType) => {\n    setFlowType(value);\n    form.setValue(\"flowType\", value);\n  };\n\n  const watchedValues = form.watch();\n\n  const getSummaryDimensions = () => {\n    const { length, width, height } = watchedValues.dimensions;\n    if (length && width && height) {\n      return `${length} x ${width} x ${height} cm`;\n    }\n    return \"- x - x - cm\";\n  };\n\n  const getSelectedRegulations = () => {\n    const regulations = watchedValues.regulations;\n    const selected = Object.entries(regulations)\n      .filter(([_, value]) => value)\n      .map(([key, _]) => {\n        const labels = {\n          fragile: \"Frágil\",\n          lithium: \"Contiene Litio\",\n          hazardous: \"Material Peligroso\",\n          refrigerated: \"Refrigerado\",\n          valuable: \"Alto Valor\",\n          oversized: \"Sobredimensionado\",\n        };\n        return labels[key as keyof typeof labels];\n      });\n\n    return selected.length > 0 ? selected : [\"Ninguna seleccionada\"];\n  };\n\n  return (\n    <div className=\"min-h-screen bg-gray-50 p-4\">\n      <div className=\"max-w-7xl mx-auto space-y-8\">\n        <ProcessHeader \n          title=\"Evento 1: Registro de Productos\"\n          onClose={() => setLocation(\"/\")}\n        />\n\n        <Card className=\"card-shadow\">\n          <CardContent className=\"p-6\">\n            <ProgressBar \n              currentStep={1} \n              totalSteps={4} \n              flowType={flowType}\n            />\n          </CardContent>\n        </Card>\n\n        <div className=\"grid grid-cols-1 lg:grid-cols-3 gap-8\">\n          <div className=\"lg:col-span-2\">\n            <Card className=\"card-shadow\">\n              <CardHeader>\n                <CardTitle>Información del Producto</CardTitle>\n              </CardHeader>\n              <CardContent className=\"p-8\">\n                <Form {...form}>\n                  <form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-6\">\n                    <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n                      <FormField\n                        control={form.control}\n                        name=\"name\"\n                        render={({ field }) => (\n                          <FormItem>\n                            <FormLabel>Nombre del Producto</FormLabel>\n                            <FormControl>\n                              <Input \n                                placeholder=\"Ej: Electrónicos Samsung Galaxy\" \n                                {...field} \n                              />\n                            </FormControl>\n                            <FormMessage />\n                          </FormItem>\n                        )}\n                      />\n\n                      <FormField\n                        control={form.control}\n                        name=\"flowType\"\n                        render={({ field }) => (\n                          <FormItem>\n                            <FormLabel>Tipo de Flujo</FormLabel>\n                            <Select \n                              onValueChange={(value: FlowType) => {\n                                field.onChange(value);\n                                handleFlowTypeChange(value);\n                              }} \n                              defaultValue={field.value}\n                            >\n                              <FormControl>\n                                <SelectTrigger>\n                                  <SelectValue placeholder=\"Seleccionar\" />\n                                </SelectTrigger>\n                              </FormControl>\n                              <SelectContent>\n                                <SelectItem value=\"entrada\">Entrada a Bodega</SelectItem>\n                                <SelectItem value=\"salida\">Salida de Bodega</SelectItem>\n                              </SelectContent>\n                            </Select>\n                            <FormMessage />\n                          </FormItem>\n                        )}\n                      />\n                    </div>\n\n                    <div className=\"grid grid-cols-1 md:grid-cols-3 gap-6\">\n                      <FormField\n                        control={form.control}\n                        name=\"dimensions.length\"\n                        render={({ field }) => (\n                          <FormItem>\n                            <FormLabel>Largo (cm)</FormLabel>\n                            <FormControl>\n                              <Input \n                                type=\"number\" \n                                placeholder=\"50\" \n                                {...field}\n                                onChange={(e) => field.onChange(Number(e.target.value))}\n                              />\n                            </FormControl>\n                            <FormMessage />\n                          </FormItem>\n                        )}\n                      />\n\n                      <FormField\n                        control={form.control}\n                        name=\"dimensions.width\"\n                        render={({ field }) => (\n                          <FormItem>\n                            <FormLabel>Ancho (cm)</FormLabel>\n                            <FormControl>\n                              <Input \n                                type=\"number\" \n                                placeholder=\"30\" \n                                {...field}\n                                onChange={(e) => field.onChange(Number(e.target.value))}\n                              />\n                            </FormControl>\n                            <FormMessage />\n                          </FormItem>\n                        )}\n                      />\n\n                      <FormField\n                        control={form.control}\n                        name=\"dimensions.height\"\n                        render={({ field }) => (\n                          <FormItem>\n                            <FormLabel>Alto (cm)</FormLabel>\n                            <FormControl>\n                              <Input \n                                type=\"number\" \n                                placeholder=\"20\" \n                                {...field}\n                                onChange={(e) => field.onChange(Number(e.target.value))}\n                              />\n                            </FormControl>\n                            <FormMessage />\n                          </FormItem>\n                        )}\n                      />\n                    </div>\n\n                    <FormField\n                      control={form.control}\n                      name=\"weight\"\n                      render={({ field }) => (\n                        <FormItem>\n                          <FormLabel>Peso (kg)</FormLabel>\n                          <FormControl>\n                            <Input \n                              type=\"number\" \n                              step=\"0.1\" \n                              placeholder=\"5.5\" \n                              {...field}\n                              onChange={(e) => field.onChange(Number(e.target.value))}\n                            />\n                          </FormControl>\n                          <FormMessage />\n                        </FormItem>\n                      )}\n                    />\n\n                    <div>\n                      <FormLabel className=\"text-base font-medium mb-4\">Regulaciones Especiales</FormLabel>\n                      <div className=\"grid grid-cols-2 md:grid-cols-3 gap-4 mt-4\">\n                        {[\n                          { key: \"fragile\", label: \"Frágil\" },\n                          { key: \"lithium\", label: \"Contiene Litio\" },\n                          { key: \"hazardous\", label: \"Material Peligroso\" },\n                          { key: \"refrigerated\", label: \"Refrigerado\" },\n                          { key: \"valuable\", label: \"Alto Valor\" },\n                          { key: \"oversized\", label: \"Sobredimensionado\" },\n                        ].map(({ key, label }) => (\n                          <FormField\n                            key={key}\n                            control={form.control}\n                            name={`regulations.${key}` as any}\n                            render={({ field }) => (\n                              <FormItem className=\"flex flex-row items-start space-x-3 space-y-0\">\n                                <FormControl>\n                                  <Checkbox\n                                    checked={field.value}\n                                    onCheckedChange={field.onChange}\n                                  />\n                                </FormControl>\n                                <div className=\"space-y-1 leading-none\">\n                                  <FormLabel className=\"text-sm font-normal cursor-pointer\">\n                                    {label}\n                                  </FormLabel>\n                                </div>\n                              </FormItem>\n                            )}\n                          />\n                        ))}\n                      </div>\n                    </div>\n\n                    <div className=\"flex justify-end space-x-4 pt-6\">\n                      <Button \n                        type=\"button\" \n                        variant=\"outline\"\n                        onClick={() => setLocation(\"/\")}\n                      >\n                        <ArrowLeft className=\"h-4 w-4 mr-2\" />\n                        Volver al Dashboard\n                      </Button>\n                      <Button \n                        type=\"submit\" \n                        className=\"btn-logistics-primary\"\n                        disabled={createProcessMutation.isPending}\n                      >\n                        {createProcessMutation.isPending ? \"Procesando...\" : \"Continuar a Evento 2\"}\n                        <ArrowRight className=\"h-4 w-4 ml-2\" />\n                      </Button>\n                    </div>\n                  </form>\n                </Form>\n              </CardContent>\n            </Card>\n          </div>\n\n          {/* Product Summary */}\n          <div>\n            <Card className=\"card-shadow sticky top-24\">\n              <CardHeader>\n                <CardTitle className=\"text-base\">Resumen del Producto</CardTitle>\n              </CardHeader>\n              <CardContent className=\"p-6\">\n                <div className=\"space-y-3 text-sm\">\n                  <div className=\"flex justify-between\">\n                    <span className=\"text-gray-500\">Nombre:</span>\n                    <span className=\"font-medium\">{watchedValues.name || \"-\"}</span>\n                  </div>\n                  <div className=\"flex justify-between\">\n                    <span className=\"text-gray-500\">Dimensiones:</span>\n                    <span className=\"font-medium\">{getSummaryDimensions()}</span>\n                  </div>\n                  <div className=\"flex justify-between\">\n                    <span className=\"text-gray-500\">Peso:</span>\n                    <span className=\"font-medium\">{watchedValues.weight || \"-\"} kg</span>\n                  </div>\n                  <div className=\"flex justify-between\">\n                    <span className=\"text-gray-500\">Flujo:</span>\n                    <span className=\"font-medium\">\n                      {watchedValues.flowType === \"entrada\" ? \"Entrada\" : \"Salida\"}\n                    </span>\n                  </div>\n                  <div className=\"pt-3 border-t border-gray-200\">\n                    <span className=\"text-gray-500\">Regulaciones:</span>\n                    <div className=\"mt-2 space-y-1\">\n                      {getSelectedRegulations().map((reg, index) => (\n                        <div key={index} className=\"text-xs text-gray-600\">{reg}</div>\n                      ))}\n                    </div>\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}\n","size_bytes":14998},"client/src/pages/event2.tsx":{"content":"import { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { useMutation, useQuery } from \"@tanstack/react-query\";\nimport { useLocation, useParams } from \"wouter\";\nimport { z } from \"zod\";\nimport { ArrowRight, ArrowLeft, Camera, Pause } from \"lucide-react\";\nimport { ProcessHeader } from \"@/components/process-header\";\nimport { ProgressBar } from \"@/components/progress-bar\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Form, FormControl, FormField, FormItem, FormLabel, FormMessage } from \"@/components/ui/form\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport type { TransportFormData, VehicleType } from \"@/lib/types\";\nimport type { ProcessWithDetails } from \"@shared/schema\";\n\nconst transportSchema = z.object({\n  driverName: z.string().min(1, \"El nombre del conductor es requerido\"),\n  licenseNumber: z.string().min(1, \"El número de licencia es requerido\"),\n  vehicleType: z.enum([\"camion\", \"van\", \"furgon\", \"trailer\", \"moto\"]),\n  vehiclePlate: z.string().min(1, \"La placa del vehículo es requerida\"),\n  driverPhoto: z.string().optional(),\n  notes: z.string().optional(),\n});\n\nexport default function Event2() {\n  const [, setLocation] = useLocation();\n  const { processId } = useParams<{ processId: string }>();\n  const { toast } = useToast();\n\n  const { data: process, isLoading } = useQuery<ProcessWithDetails>({\n    queryKey: [\"/api/processes\", processId],\n  });\n\n  const form = useForm<TransportFormData>({\n    resolver: zodResolver(transportSchema),\n    defaultValues: {\n      driverName: \"\",\n      licenseNumber: \"\",\n      vehicleType: \"camion\",\n      vehiclePlate: \"\",\n      driverPhoto: \"\",\n      notes: \"\",\n    },\n  });\n\n  const updateProcessMutation = useMutation({\n    mutationFn: (data: TransportFormData) => \n      apiRequest(\"POST\", `/api/processes/${processId}/transport`, data),\n    onSuccess: async (response) => {\n      const updatedProcess = await response.json();\n      toast({\n        title: \"Transporte registrado\",\n        description: \"La información del transporte ha sido registrada exitosamente.\",\n      });\n      \n      // Navigate to appropriate event 3 based on flow type\n      if (updatedProcess.processType === \"entrada\") {\n        setLocation(`/event3-entrada/${processId}`);\n      } else {\n        setLocation(`/event3/${processId}`);\n      }\n    },\n    onError: () => {\n      toast({\n        title: \"Error\",\n        description: \"No se pudo registrar la información del transporte. Intenta nuevamente.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const pauseProcessMutation = useMutation({\n    mutationFn: () => apiRequest(\"POST\", `/api/processes/${processId}/pause`),\n    onSuccess: () => {\n      toast({\n        title: \"Proceso pausado\",\n        description: \"El proceso ha sido pausado. Puedes continuarlo desde el dashboard.\",\n      });\n      setLocation(\"/\");\n    },\n  });\n\n  const onSubmit = (data: TransportFormData) => {\n    updateProcessMutation.mutate(data);\n  };\n\n  const handlePause = () => {\n    pauseProcessMutation.mutate();\n  };\n\n  const watchedValues = form.watch();\n\n  const getVehicleTypeLabel = (type: VehicleType) => {\n    const labels = {\n      camion: \"Camión\",\n      van: \"Van\",\n      furgon: \"Furgón\",\n      trailer: \"Tráiler\",\n      moto: \"Motocicleta\",\n    };\n    return labels[type];\n  };\n\n  if (isLoading) {\n    return (\n      <div className=\"min-h-screen bg-gray-50 flex items-center justify-center\">\n        <div className=\"text-center\">\n          <div className=\"text-lg font-medium\">Cargando proceso...</div>\n        </div>\n      </div>\n    );\n  }\n\n  if (!process) {\n    return (\n      <div className=\"min-h-screen bg-gray-50 flex items-center justify-center\">\n        <div className=\"text-center\">\n          <div className=\"text-lg font-medium text-red-600\">Proceso no encontrado</div>\n          <Button className=\"mt-4\" onClick={() => setLocation(\"/\")}>\n            Volver al Dashboard\n          </Button>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"min-h-screen bg-gray-50 p-4\">\n      <div className=\"max-w-7xl mx-auto space-y-8\">\n        <ProcessHeader \n          title=\"Evento 2: Información de Transporte\"\n          onClose={() => setLocation(\"/\")}\n        />\n\n        <Card className=\"card-shadow\">\n          <CardContent className=\"p-6\">\n            <ProgressBar \n              currentStep={2} \n              totalSteps={4} \n              flowType={process.processType}\n            />\n          </CardContent>\n        </Card>\n\n        <div className=\"grid grid-cols-1 lg:grid-cols-3 gap-8\">\n          <div className=\"lg:col-span-2\">\n            <Card className=\"card-shadow\">\n              <CardHeader>\n                <CardTitle>Datos del Transporte</CardTitle>\n              </CardHeader>\n              <CardContent className=\"p-8\">\n                <Form {...form}>\n                  <form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-6\">\n                    <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n                      <FormField\n                        control={form.control}\n                        name=\"driverName\"\n                        render={({ field }) => (\n                          <FormItem>\n                            <FormLabel>Nombre del Transportista</FormLabel>\n                            <FormControl>\n                              <Input \n                                placeholder=\"Juan Carlos Rodríguez\" \n                                {...field} \n                              />\n                            </FormControl>\n                            <FormMessage />\n                          </FormItem>\n                        )}\n                      />\n\n                      <FormField\n                        control={form.control}\n                        name=\"licenseNumber\"\n                        render={({ field }) => (\n                          <FormItem>\n                            <FormLabel>Número de Licencia</FormLabel>\n                            <FormControl>\n                              <Input \n                                placeholder=\"12345678\" \n                                {...field} \n                              />\n                            </FormControl>\n                            <FormMessage />\n                          </FormItem>\n                        )}\n                      />\n                    </div>\n\n                    <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n                      <FormField\n                        control={form.control}\n                        name=\"vehicleType\"\n                        render={({ field }) => (\n                          <FormItem>\n                            <FormLabel>Tipo de Vehículo</FormLabel>\n                            <Select onValueChange={field.onChange} defaultValue={field.value}>\n                              <FormControl>\n                                <SelectTrigger>\n                                  <SelectValue placeholder=\"Seleccionar\" />\n                                </SelectTrigger>\n                              </FormControl>\n                              <SelectContent>\n                                <SelectItem value=\"camion\">Camión</SelectItem>\n                                <SelectItem value=\"van\">Van</SelectItem>\n                                <SelectItem value=\"furgon\">Furgón</SelectItem>\n                                <SelectItem value=\"trailer\">Tráiler</SelectItem>\n                                <SelectItem value=\"moto\">Motocicleta</SelectItem>\n                              </SelectContent>\n                            </Select>\n                            <FormMessage />\n                          </FormItem>\n                        )}\n                      />\n\n                      <FormField\n                        control={form.control}\n                        name=\"vehiclePlate\"\n                        render={({ field }) => (\n                          <FormItem>\n                            <FormLabel>Placa del Vehículo</FormLabel>\n                            <FormControl>\n                              <Input \n                                placeholder=\"ABC-123\" \n                                {...field} \n                              />\n                            </FormControl>\n                            <FormMessage />\n                          </FormItem>\n                        )}\n                      />\n                    </div>\n\n                    <FormField\n                      control={form.control}\n                      name=\"driverPhoto\"\n                      render={({ field }) => (\n                        <FormItem>\n                          <FormLabel>Foto del Conductor</FormLabel>\n                          <FormControl>\n                            <div className=\"border-2 border-dashed border-gray-300 rounded-lg p-6 text-center hover:border-[--logistics-primary] transition-all\">\n                              <div className=\"w-16 h-16 bg-gray-100 rounded-full flex items-center justify-center mx-auto mb-4\">\n                                <Camera className=\"h-8 w-8 text-gray-400\" />\n                              </div>\n                              <p className=\"text-sm text-gray-500 mb-2\">Subir foto del conductor</p>\n                              <Button type=\"button\" variant=\"outline\">\n                                Seleccionar Archivo\n                              </Button>\n                              <Input \n                                type=\"file\" \n                                accept=\"image/*\" \n                                className=\"hidden\" \n                                onChange={(e) => {\n                                  // Handle file upload here\n                                  const file = e.target.files?.[0];\n                                  if (file) {\n                                    // Convert to base64 or handle upload\n                                    field.onChange(file.name);\n                                  }\n                                }}\n                              />\n                            </div>\n                          </FormControl>\n                          <FormMessage />\n                        </FormItem>\n                      )}\n                    />\n\n                    <FormField\n                      control={form.control}\n                      name=\"notes\"\n                      render={({ field }) => (\n                        <FormItem>\n                          <FormLabel>Notas Opcionales</FormLabel>\n                          <FormControl>\n                            <Textarea \n                              rows={4}\n                              placeholder=\"Información adicional sobre el transporte...\" \n                              {...field} \n                            />\n                          </FormControl>\n                          <FormMessage />\n                        </FormItem>\n                      )}\n                    />\n\n                    <div className=\"flex flex-col sm:flex-row justify-end space-y-2 sm:space-y-0 sm:space-x-4 pt-6\">\n                      <Button \n                        type=\"button\" \n                        variant=\"outline\"\n                        onClick={handlePause}\n                        disabled={pauseProcessMutation.isPending}\n                        className=\"w-full sm:w-auto\"\n                        data-testid=\"button-pause-process\"\n                      >\n                        <Pause className=\"h-4 w-4 mr-2\" />\n                        Pausar Proceso\n                      </Button>\n                      <Button \n                        type=\"button\" \n                        variant=\"outline\"\n                        onClick={() => setLocation(\"/event1\")}\n                        className=\"w-full sm:w-auto\"\n                        data-testid=\"button-previous\"\n                      >\n                        <ArrowLeft className=\"h-4 w-4 mr-2\" />\n                        Anterior\n                      </Button>\n                      <Button \n                        type=\"submit\" \n                        className=\"btn-logistics-primary w-full sm:w-auto\"\n                        disabled={updateProcessMutation.isPending}\n                        data-testid=\"button-continue\"\n                      >\n                        {updateProcessMutation.isPending ? \"Procesando...\" : \n                         process.processType === \"entrada\" ? \"Completar Proceso\" : \"Continuar a Evento 3\"}\n                        <ArrowRight className=\"h-4 w-4 ml-2\" />\n                      </Button>\n                    </div>\n                  </form>\n                </Form>\n              </CardContent>\n            </Card>\n          </div>\n\n          {/* Transport Summary */}\n          <div>\n            <Card className=\"card-shadow sticky top-24\">\n              <CardHeader>\n                <CardTitle className=\"text-base\">Resumen del Transporte</CardTitle>\n              </CardHeader>\n              <CardContent className=\"p-6\">\n                <div className=\"space-y-3 text-sm\">\n                  <div className=\"flex justify-between\">\n                    <span className=\"text-gray-500\">Conductor:</span>\n                    <span className=\"font-medium\">{watchedValues.driverName || \"-\"}</span>\n                  </div>\n                  <div className=\"flex justify-between\">\n                    <span className=\"text-gray-500\">Licencia:</span>\n                    <span className=\"font-medium\">{watchedValues.licenseNumber || \"-\"}</span>\n                  </div>\n                  <div className=\"flex justify-between\">\n                    <span className=\"text-gray-500\">Vehículo:</span>\n                    <span className=\"font-medium\">\n                      {watchedValues.vehicleType ? getVehicleTypeLabel(watchedValues.vehicleType) : \"-\"}\n                    </span>\n                  </div>\n                  <div className=\"flex justify-between\">\n                    <span className=\"text-gray-500\">Placa:</span>\n                    <span className=\"font-medium\">{watchedValues.vehiclePlate || \"-\"}</span>\n                  </div>\n                  <div className=\"pt-3 border-t border-gray-200\">\n                    <span className=\"text-gray-500\">Estado:</span>\n                    <div className=\"mt-2\">\n                      <span className=\"px-2 py-1 bg-[--logistics-warning-light] text-[--logistics-warning] rounded-full text-xs\">\n                        Pendiente\n                      </span>\n                    </div>\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}\n","size_bytes":15083},"client/src/pages/event3-entrada.tsx":{"content":"import { useState } from \"react\";\nimport { useLocation, useParams } from \"wouter\";\nimport { useQuery, useMutation } from \"@tanstack/react-query\";\nimport type { ProcessWithDetails } from \"@shared/schema\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { apiRequest, queryClient } from \"@/lib/queryClient\";\nimport { \n  Package, \n  CheckCircle, \n  AlertTriangle, \n  ArrowLeft,\n  User,\n  Truck\n} from \"lucide-react\";\n\nexport default function Event3Entrada() {\n  const [, setLocation] = useLocation();\n  const { toast } = useToast();\n  const [complaintNotes, setComplaintNotes] = useState(\"\");\n  const [selectedAction, setSelectedAction] = useState<\"confirmed\" | \"complaint\" | null>(null);\n\n  // Get process ID from URL params\n  const { processId } = useParams<{ processId: string }>();\n\n  const { data: process, isLoading } = useQuery<ProcessWithDetails>({\n    queryKey: [\"/api/processes\", processId],\n    enabled: !!processId,\n  });\n\n  const completeProcessMutation = useMutation({\n    mutationFn: async (data: { action: \"confirmed\" | \"complaint\"; notes?: string }) => {\n      return apiRequest(\"POST\", `/api/processes/${processId}/complete-event3-entrada`, data);\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/processes\"] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/stats\"] });\n      \n      if (selectedAction === \"confirmed\") {\n        toast({\n          title: \"Proceso Completado\",\n          description: \"El producto fue confirmado como recibido correctamente.\",\n        });\n        setLocation(\"/dashboard\");\n      } else {\n        toast({\n          title: \"Queja Registrada\",\n          description: \"La queja fue registrada. El proceso queda abierto para seguimiento.\",\n          variant: \"destructive\",\n        });\n        setLocation(\"/dashboard\");\n      }\n    },\n    onError: () => {\n      toast({\n        title: \"Error\",\n        description: \"No se pudo completar la acción. Inténtalo de nuevo.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const handleConfirmReceived = () => {\n    setSelectedAction(\"confirmed\");\n    completeProcessMutation.mutate({ action: \"confirmed\" });\n  };\n\n  const handleRegisterComplaint = () => {\n    if (!complaintNotes.trim()) {\n      toast({\n        title: \"Notas Requeridas\",\n        description: \"Por favor describe el problema en las notas.\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n    \n    setSelectedAction(\"complaint\");\n    completeProcessMutation.mutate({ \n      action: \"complaint\", \n      notes: complaintNotes \n    });\n  };\n\n  if (!processId) {\n    return (\n      <div className=\"container mx-auto p-6\">\n        <Card>\n          <CardContent className=\"p-8 text-center\">\n            <p className=\"text-gray-500\">No se encontró el ID del proceso</p>\n            <Button \n              onClick={() => setLocation(\"/dashboard\")} \n              className=\"mt-4\"\n            >\n              Volver al Dashboard\n            </Button>\n          </CardContent>\n        </Card>\n      </div>\n    );\n  }\n\n  if (isLoading) {\n    return (\n      <div className=\"container mx-auto p-6\">\n        <Card>\n          <CardContent className=\"p-8 text-center\">\n            <p className=\"text-gray-500\">Cargando información del proceso...</p>\n          </CardContent>\n        </Card>\n      </div>\n    );\n  }\n\n  if (!process) {\n    return (\n      <div className=\"container mx-auto p-6\">\n        <Card>\n          <CardContent className=\"p-8 text-center\">\n            <p className=\"text-gray-500\">No se encontró el proceso</p>\n            <Button \n              onClick={() => setLocation(\"/dashboard\")} \n              className=\"mt-4\"\n            >\n              Volver al Dashboard\n            </Button>\n          </CardContent>\n        </Card>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"container mx-auto p-6 space-y-8\">\n      {/* Header */}\n      <div className=\"flex items-center justify-between\">\n        <div className=\"flex items-center space-x-4\">\n          <Button \n            variant=\"ghost\" \n            onClick={() => setLocation(\"/dashboard\")}\n            className=\"text-blue-600 hover:text-blue-700\"\n          >\n            <ArrowLeft className=\"h-4 w-4 mr-2\" />\n            Volver\n          </Button>\n          <div>\n            <h1 className=\"text-3xl font-bold text-gray-900\">\n              Evento 3: Confirmación de Recepción\n            </h1>\n            <p className=\"text-gray-500 mt-2\">\n              Proceso #{process.id} - Entrada a Bodega\n            </p>\n          </div>\n        </div>\n      </div>\n\n      {/* Process Summary */}\n      <Card className=\"card-shadow\">\n        <CardHeader>\n          <CardTitle className=\"flex items-center space-x-2\">\n            <Package className=\"h-5 w-5 text-blue-600\" />\n            <span>Resumen del Proceso</span>\n          </CardTitle>\n        </CardHeader>\n        <CardContent className=\"p-6\">\n          <div className=\"grid grid-cols-1 md:grid-cols-3 gap-6\">\n            {/* Product Info */}\n            <div className=\"space-y-3\">\n              <div className=\"flex items-center space-x-2\">\n                <Package className=\"h-4 w-4 text-gray-500\" />\n                <span className=\"font-medium text-gray-700\">Producto</span>\n              </div>\n              <div className=\"pl-6\">\n                <p className=\"font-semibold text-gray-900\">{process.product.name}</p>\n                <p className=\"text-sm text-gray-500\">\n                  {process.product.dimensions.length}×{process.product.dimensions.width}×{process.product.dimensions.height} cm\n                </p>\n                <p className=\"text-sm text-gray-500\">{process.product.weight}g</p>\n              </div>\n            </div>\n\n            {/* Transport Info */}\n            <div className=\"space-y-3\">\n              <div className=\"flex items-center space-x-2\">\n                <Truck className=\"h-4 w-4 text-gray-500\" />\n                <span className=\"font-medium text-gray-700\">Transporte</span>\n              </div>\n              <div className=\"pl-6\">\n                <p className=\"font-semibold text-gray-900\">{process.transport?.driverName}</p>\n                <p className=\"text-sm text-gray-500\">{process.transport?.vehicleType}</p>\n                <p className=\"text-sm text-gray-500\">{process.transport?.vehiclePlate}</p>\n              </div>\n            </div>\n\n            {/* Status */}\n            <div className=\"space-y-3\">\n              <div className=\"flex items-center space-x-2\">\n                <User className=\"h-4 w-4 text-gray-500\" />\n                <span className=\"font-medium text-gray-700\">Estado</span>\n              </div>\n              <div className=\"pl-6\">\n                <p className=\"font-semibold text-gray-900\">Esperando Confirmación</p>\n                <p className=\"text-sm text-gray-500\">Evento 3 de 3</p>\n              </div>\n            </div>\n          </div>\n        </CardContent>\n      </Card>\n\n      {/* Action Selection */}\n      <Card className=\"card-shadow\">\n        <CardHeader>\n          <CardTitle>Confirmación de Recepción</CardTitle>\n          <p className=\"text-gray-500\">\n            ¿Se recibió la carga según lo esperado?\n          </p>\n        </CardHeader>\n        <CardContent className=\"p-6\">\n          <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n            {/* Confirmation Option */}\n            <div className=\"border-2 border-gray-200 rounded-lg p-6 hover:border-green-500 hover:bg-green-50 transition-all\">\n              <div className=\"text-center space-y-4\">\n                <div className=\"w-16 h-16 bg-green-100 rounded-full flex items-center justify-center mx-auto\">\n                  <CheckCircle className=\"h-8 w-8 text-green-600\" />\n                </div>\n                <div>\n                  <h3 className=\"text-lg font-semibold text-gray-900 mb-2\">\n                    Confirmar Recepción\n                  </h3>\n                  <p className=\"text-gray-500 text-sm mb-4\">\n                    El producto fue recibido correctamente según las especificaciones\n                  </p>\n                  <Button \n                    onClick={handleConfirmReceived}\n                    disabled={completeProcessMutation.isPending}\n                    className=\"w-full bg-green-600 hover:bg-green-700\"\n                  >\n                    {completeProcessMutation.isPending && selectedAction === \"confirmed\" ? (\n                      \"Confirmando...\"\n                    ) : (\n                      \"Confirmar y Cerrar Proceso\"\n                    )}\n                  </Button>\n                </div>\n              </div>\n            </div>\n\n            {/* Complaint Option */}\n            <div className=\"border-2 border-gray-200 rounded-lg p-6 hover:border-red-500 hover:bg-red-50 transition-all\">\n              <div className=\"text-center space-y-4\">\n                <div className=\"w-16 h-16 bg-red-100 rounded-full flex items-center justify-center mx-auto\">\n                  <AlertTriangle className=\"h-8 w-8 text-red-600\" />\n                </div>\n                <div>\n                  <h3 className=\"text-lg font-semibold text-gray-900 mb-2\">\n                    Registrar Queja\n                  </h3>\n                  <p className=\"text-gray-500 text-sm mb-4\">\n                    Hubo problemas con el producto recibido\n                  </p>\n                  \n                  <div className=\"space-y-3\">\n                    <Textarea\n                      placeholder=\"Describe el problema encontrado...\"\n                      value={complaintNotes}\n                      onChange={(e) => setComplaintNotes(e.target.value)}\n                      className=\"min-h-[100px]\"\n                    />\n                    <Button \n                      onClick={handleRegisterComplaint}\n                      disabled={completeProcessMutation.isPending || !complaintNotes.trim()}\n                      variant=\"destructive\"\n                      className=\"w-full\"\n                    >\n                      {completeProcessMutation.isPending && selectedAction === \"complaint\" ? (\n                        \"Registrando Queja...\"\n                      ) : (\n                        \"Registrar Queja\"\n                      )}\n                    </Button>\n                  </div>\n                </div>\n              </div>\n            </div>\n          </div>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}","size_bytes":10601},"client/src/pages/event3.tsx":{"content":"import { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { useMutation, useQuery } from \"@tanstack/react-query\";\nimport { useLocation, useParams } from \"wouter\";\nimport { z } from \"zod\";\nimport { ArrowLeft, Check } from \"lucide-react\";\nimport { ProcessHeader } from \"@/components/process-header\";\nimport { ProgressBar } from \"@/components/progress-bar\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Form, FormControl, FormField, FormItem, FormLabel, FormMessage } from \"@/components/ui/form\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport type { DeliveryFormData } from \"@/lib/types\";\nimport type { ProcessWithDetails } from \"@shared/schema\";\n\nconst deliverySchema = z.object({\n  originPlace: z.string().min(1, \"El lugar de salida es requerido\"),\n  destinationPlace: z.string().min(1, \"El lugar de destino es requerido\"),\n  departureTime: z.string().min(1, \"La fecha y hora de salida es requerida\"),\n  deliveryNotes: z.string().optional(),\n});\n\nexport default function Event3() {\n  const [, setLocation] = useLocation();\n  const { processId } = useParams<{ processId: string }>();\n  const { toast } = useToast();\n\n  const { data: process, isLoading } = useQuery<ProcessWithDetails>({\n    queryKey: [\"/api/processes\", processId],\n  });\n\n  const form = useForm<DeliveryFormData>({\n    resolver: zodResolver(deliverySchema),\n    defaultValues: {\n      originPlace: \"\",\n      destinationPlace: \"\",\n      departureTime: \"\",\n      deliveryNotes: \"\",\n    },\n  });\n\n  const updateProcessMutation = useMutation({\n    mutationFn: (data: DeliveryFormData) => {\n      return apiRequest(\"POST\", `/api/processes/${processId}/delivery`, data);\n    },\n    onSuccess: () => {\n      toast({\n        title: \"Entrega registrada\",\n        description: \"La información de entrega ha sido registrada exitosamente.\",\n      });\n      setLocation(`/event4/${processId}`);\n    },\n    onError: () => {\n      toast({\n        title: \"Error\",\n        description: \"No se pudo registrar la información de entrega. Intenta nuevamente.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const onSubmit = (data: DeliveryFormData) => {\n    updateProcessMutation.mutate(data);\n  };\n\n  const formatDate = (date: string | Date) => {\n    return new Date(date).toLocaleDateString(\"es-ES\", {\n      day: \"2-digit\",\n      month: \"2-digit\", \n      year: \"numeric\",\n      hour: \"2-digit\",\n      minute: \"2-digit\"\n    });\n  };\n\n  if (isLoading) {\n    return (\n      <div className=\"min-h-screen bg-gray-50 flex items-center justify-center\">\n        <div className=\"text-center\">\n          <div className=\"text-lg font-medium\">Cargando proceso...</div>\n        </div>\n      </div>\n    );\n  }\n\n  if (!process) {\n    return (\n      <div className=\"min-h-screen bg-gray-50 flex items-center justify-center\">\n        <div className=\"text-center\">\n          <div className=\"text-lg font-medium text-red-600\">Proceso no encontrado</div>\n          <Button className=\"mt-4\" onClick={() => setLocation(\"/\")}>\n            Volver al Dashboard\n          </Button>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"min-h-screen bg-gray-50 p-4\">\n      <div className=\"max-w-7xl mx-auto space-y-8\">\n        <ProcessHeader \n          title=\"Evento 3: Entrega del Producto\"\n          onClose={() => setLocation(\"/\")}\n        />\n\n        <Card className=\"card-shadow\">\n          <CardContent className=\"p-6\">\n            <ProgressBar \n              currentStep={3} \n              totalSteps={4} \n              flowType={process.processType}\n            />\n          </CardContent>\n        </Card>\n\n        {/* Delivery Status */}\n        <Card className=\"card-shadow\">\n          <CardHeader>\n            <div className=\"flex items-center justify-between\">\n              <CardTitle>Estado del Envío</CardTitle>\n              <div className=\"flex items-center space-x-2\">\n                <div className=\"w-3 h-3 bg-[--logistics-warning] rounded-full animate-pulse\"></div>\n                <Badge className=\"bg-[--logistics-warning-light] text-[--logistics-warning]\">\n                  En Transporte\n                </Badge>\n              </div>\n            </div>\n          </CardHeader>\n          <CardContent className=\"p-8\">\n            {/* Product and Transport Info */}\n            <div className=\"grid grid-cols-1 md:grid-cols-2 gap-8 mb-8\">\n              <div>\n                <h4 className=\"font-medium text-gray-900 mb-4\">Información del Producto</h4>\n                <div className=\"space-y-2 text-sm\">\n                  <div className=\"flex justify-between\">\n                    <span className=\"text-gray-500\">Producto:</span>\n                    <span>{process.product.name}</span>\n                  </div>\n                  <div className=\"flex justify-between\">\n                    <span className=\"text-gray-500\">Peso:</span>\n                    <span>{process.product.weight / 1000} kg</span>\n                  </div>\n                  <div className=\"flex justify-between\">\n                    <span className=\"text-gray-500\">Dimensiones:</span>\n                    <span>\n                      {process.product.dimensions.length}x{process.product.dimensions.width}x{process.product.dimensions.height} cm\n                    </span>\n                  </div>\n                </div>\n              </div>\n              <div>\n                <h4 className=\"font-medium text-gray-900 mb-4\">Información del Transporte</h4>\n                <div className=\"space-y-2 text-sm\">\n                  <div className=\"flex justify-between\">\n                    <span className=\"text-gray-500\">Conductor:</span>\n                    <span>{process.transport?.driverName || \"N/A\"}</span>\n                  </div>\n                  <div className=\"flex justify-between\">\n                    <span className=\"text-gray-500\">Vehículo:</span>\n                    <span>\n                      {process.transport?.vehicleType || \"N/A\"} - {process.transport?.vehiclePlate || \"N/A\"}\n                    </span>\n                  </div>\n                  <div className=\"flex justify-between\">\n                    <span className=\"text-gray-500\">Inicio de Transporte:</span>\n                    <span>{formatDate(process.createdAt)}</span>\n                  </div>\n                </div>\n              </div>\n            </div>\n\n            {/* Delivery Action */}\n            <div className=\"border-t border-gray-200 pt-8\">\n              <div className=\"bg-gray-50 rounded-lg p-6\">\n                <h4 className=\"font-medium text-gray-900 mb-4\">Registro de Entrega</h4>\n                <Form {...form}>\n                  <form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-6\">\n                    <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n                      <FormField\n                        control={form.control}\n                        name=\"originPlace\"\n                        render={({ field }) => (\n                          <FormItem>\n                            <FormLabel>Lugar de Salida</FormLabel>\n                            <FormControl>\n                              <Input \n                                placeholder=\"Bodega Central\" \n                                {...field} \n                              />\n                            </FormControl>\n                            <FormMessage />\n                          </FormItem>\n                        )}\n                      />\n\n                      <FormField\n                        control={form.control}\n                        name=\"destinationPlace\"\n                        render={({ field }) => (\n                          <FormItem>\n                            <FormLabel>Lugar de Destino</FormLabel>\n                            <FormControl>\n                              <Input \n                                placeholder=\"Cliente Final\" \n                                {...field} \n                              />\n                            </FormControl>\n                            <FormMessage />\n                          </FormItem>\n                        )}\n                      />\n                    </div>\n\n                    <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n                      <FormField\n                        control={form.control}\n                        name=\"departureTime\"\n                        render={({ field }) => (\n                          <FormItem>\n                            <FormLabel>Fecha y Hora de Salida</FormLabel>\n                            <FormControl>\n                              <Input \n                                type=\"datetime-local\" \n                                {...field} \n                              />\n                            </FormControl>\n                            <FormMessage />\n                          </FormItem>\n                        )}\n                      />\n\n                    </div>\n\n                    <FormField\n                      control={form.control}\n                      name=\"deliveryNotes\"\n                      render={({ field }) => (\n                        <FormItem>\n                          <FormLabel>Notas de Entrega</FormLabel>\n                          <FormControl>\n                            <Textarea \n                              rows={3}\n                              placeholder=\"Detalles adicionales sobre la entrega...\" \n                              {...field} \n                            />\n                          </FormControl>\n                          <FormMessage />\n                        </FormItem>\n                      )}\n                    />\n\n                    <div className=\"flex justify-end space-x-4\">\n                      <Button \n                        type=\"button\" \n                        variant=\"outline\"\n                        onClick={() => setLocation(`/event2/${processId}`)}\n                      >\n                        <ArrowLeft className=\"h-4 w-4 mr-2\" />\n                        Anterior\n                      </Button>\n                      <Button \n                        type=\"submit\" \n                        className=\"btn-logistics-secondary\"\n                        disabled={updateProcessMutation.isPending}\n                      >\n                        <Check className=\"h-4 w-4 mr-2\" />\n                        {updateProcessMutation.isPending ? \"Procesando...\" : \"Marcar como Entregado\"}\n                      </Button>\n                    </div>\n                  </form>\n                </Form>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n    </div>\n  );\n}\n","size_bytes":10945},"client/src/pages/event4.tsx":{"content":"import { useMutation, useQuery } from \"@tanstack/react-query\";\nimport { useLocation, useParams } from \"wouter\";\nimport { FileText, Download, Check, Truck, Receipt } from \"lucide-react\";\nimport { ProcessHeader } from \"@/components/process-header\";\nimport { ProgressBar } from \"@/components/progress-bar\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport type { ProcessWithDetails } from \"@shared/schema\";\n\nexport default function Event4() {\n  const [, setLocation] = useLocation();\n  const { processId } = useParams<{ processId: string }>();\n  const { toast } = useToast();\n\n  const { data: process, isLoading } = useQuery<ProcessWithDetails>({\n    queryKey: [\"/api/processes\", processId],\n  });\n\n  const completeProcessMutation = useMutation({\n    mutationFn: () => apiRequest(\"POST\", `/api/processes/${processId}/complete`),\n    onSuccess: () => {\n      toast({\n        title: \"Proceso completado\",\n        description: \"El proceso ha sido completado exitosamente.\",\n      });\n      setLocation(\"/\");\n    },\n    onError: () => {\n      toast({\n        title: \"Error\",\n        description: \"No se pudo completar el proceso. Intenta nuevamente.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const generateReportMutation = useMutation({\n    mutationFn: async (reportType: string) => {\n      const response = await fetch(`/api/processes/${processId}/reports/${reportType}`);\n      if (!response.ok) throw new Error('Failed to generate report');\n      return response.json();\n    },\n    onSuccess: async (reportData, reportType) => {\n      // Dynamically import jsPDF to avoid SSR issues\n      const { jsPDF } = await import('jspdf');\n      \n      // Create new PDF document\n      const doc = new jsPDF();\n      \n      // Convertir logo a base64 para incluirlo en el PDF\n      let logoDataUrl = '';\n      try {\n        const logoResponse = await fetch('/assets/logo.png');\n        if (logoResponse.ok) {\n          const logoBlob = await logoResponse.blob();\n          logoDataUrl = await new Promise<string>((resolve) => {\n            const reader = new FileReader();\n            reader.onload = () => resolve(reader.result as string);\n            reader.readAsDataURL(logoBlob);\n          });\n        }\n      } catch (error) {\n        console.log('No se pudo cargar el logo:', error);\n      }\n      \n      // Add logo if available\n      if (logoDataUrl) {\n        try {\n          doc.addImage(logoDataUrl, 'PNG', 15, 15, 30, 15);\n        } catch (error) {\n          console.log('Error adding logo to PDF:', error);\n        }\n      }\n      \n      // Add header\n      doc.setFontSize(18);\n      doc.setFont(\"helvetica\", \"bold\");\n      doc.text(reportData.title, logoDataUrl ? 55 : 20, 25);\n      \n      // Add basic info\n      doc.setFontSize(12);\n      doc.setFont(\"helvetica\", \"normal\");\n      doc.text(`Proceso #${reportData.processId}`, 20, 45);\n      doc.text(`Tipo: ${reportData.processType}`, 20, 55);\n      doc.text(`Fecha: ${reportData.date}`, 20, 65);\n      \n      let yPos = 85;\n      \n      // Add product information\n      doc.setFont(\"helvetica\", \"bold\");\n      doc.text(\"PRODUCTO:\", 20, yPos);\n      yPos += 10;\n      doc.setFont(\"helvetica\", \"normal\");\n      doc.text(`Nombre: ${reportData.product.name || 'N/A'}`, 25, yPos);\n      yPos += 8;\n      doc.text(`Peso: ${reportData.product.weight || 'N/A'}`, 25, yPos);\n      yPos += 8;\n      doc.text(`Dimensiones: ${reportData.product.dimensions || 'N/A'}`, 25, yPos);\n      yPos += 8;\n      \n      // Add special regulations\n      if (reportData.product.regulations && reportData.product.regulations.length > 0) {\n        doc.text(`Regulaciones especiales: ${reportData.product.regulations.join(', ')}`, 25, yPos);\n        yPos += 8;\n      }\n      yPos += 7;\n      \n      // Add transport info \n      doc.setFont(\"helvetica\", \"bold\");\n      doc.text(\"TRANSPORTE:\", 20, yPos);\n      yPos += 10;\n      doc.setFont(\"helvetica\", \"normal\");\n      if (reportData.transport && !reportData.transport.error) {\n        doc.text(`Conductor: ${reportData.transport.driver || 'N/A'}`, 25, yPos);\n        yPos += 8;\n        doc.text(`Licencia: ${reportData.transport.license || 'N/A'}`, 25, yPos);\n        yPos += 8;\n        doc.text(`Vehículo: ${reportData.transport.vehicle || 'N/A'}`, 25, yPos);\n        yPos += 8;\n        if (reportData.transport.notes) {\n          doc.text(`Notas: ${reportData.transport.notes}`, 25, yPos);\n          yPos += 8;\n        }\n      } else {\n        doc.text('Información de transporte no disponible', 25, yPos);\n        yPos += 8;\n      }\n      yPos += 7;\n      \n      // Add delivery info \n      doc.setFont(\"helvetica\", \"bold\");\n      doc.text(\"ENTREGA:\", 20, yPos);\n      yPos += 10;\n      doc.setFont(\"helvetica\", \"normal\");\n      if (reportData.delivery && !reportData.delivery.error) {\n        doc.text(`Origen: ${reportData.delivery.origin || 'N/A'}`, 25, yPos);\n        yPos += 8;\n        doc.text(`Destino: ${reportData.delivery.destination || 'N/A'}`, 25, yPos);\n        yPos += 8;\n        doc.text(`Salida: ${reportData.delivery.departureTime || 'N/A'}`, 25, yPos);\n        yPos += 8;\n        if (reportData.delivery.notes) {\n          doc.text(`Notas: ${reportData.delivery.notes}`, 25, yPos);\n          yPos += 8;\n        }\n      } else {\n        doc.text('Información de entrega no disponible', 25, yPos);\n        yPos += 8;\n      }\n      yPos += 7;\n      \n      // Add invoice details if it's an invoice report\n      if (reportData.services) {\n        doc.setFont(\"helvetica\", \"bold\");\n        doc.text(\"SERVICIOS:\", 20, yPos);\n        yPos += 10;\n        doc.setFont(\"helvetica\", \"normal\");\n        \n        reportData.services.forEach((service: any) => {\n          doc.text(`${service.description}: $${service.total.toLocaleString()}`, 25, yPos);\n          yPos += 8;\n        });\n        \n        yPos += 10;\n        doc.setFont(\"helvetica\", \"bold\");\n        doc.text(`SUBTOTAL: $${reportData.totals.subtotal.toLocaleString()}`, 25, yPos);\n        yPos += 8;\n        doc.text(`IVA (19%): $${reportData.totals.iva.toLocaleString()}`, 25, yPos);\n        yPos += 8;\n        doc.text(`TOTAL: $${reportData.totals.total.toLocaleString()}`, 25, yPos);\n      }\n      \n      // Add footer\n      doc.setFontSize(10);\n      doc.setFont(\"helvetica\", \"italic\");\n      doc.text(`Generado el ${new Date().toLocaleString(\"es-ES\")}`, 20, 280);\n      \n      // Save the PDF\n      doc.save(`${reportType}-proceso-${processId}.pdf`);\n      \n      // Save PDF to history\n      try {\n        await apiRequest(\"POST\", \"/api/pdfs\", {\n          processId: parseInt(processId!),\n          pdfType: reportType === 'warehouse' ? 'salida_producto' : 'factura',\n          fileName: `${reportType}-proceso-${processId}.pdf`\n        });\n      } catch (error) {\n        console.log('Error saving PDF to history:', error);\n      }\n      \n      toast({\n        title: \"Reporte descargado\",\n        description: `El reporte de ${reportType} se ha descargado exitosamente.`,\n      });\n    },\n    onError: () => {\n      toast({\n        title: \"Error\",\n        description: \"No se pudo generar el reporte. Intenta nuevamente.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const handleCompleteProcess = () => {\n    completeProcessMutation.mutate();\n  };\n\n  const handleGenerateReport = (reportType: string) => {\n    generateReportMutation.mutate(reportType);\n  };\n\n  const formatDate = (date: string | Date) => {\n    return new Date(date).toLocaleDateString(\"es-ES\", {\n      day: \"2-digit\",\n      month: \"2-digit\", \n      year: \"numeric\",\n      hour: \"2-digit\",\n      minute: \"2-digit\"\n    });\n  };\n\n  if (isLoading) {\n    return (\n      <div className=\"min-h-screen bg-gray-50 flex items-center justify-center\">\n        <div className=\"text-center\">\n          <div className=\"text-lg font-medium\">Cargando proceso...</div>\n        </div>\n      </div>\n    );\n  }\n\n  if (!process) {\n    return (\n      <div className=\"min-h-screen bg-gray-50 flex items-center justify-center\">\n        <div className=\"text-center\">\n          <div className=\"text-lg font-medium text-red-600\">Proceso no encontrado</div>\n          <Button className=\"mt-4\" onClick={() => setLocation(\"/\")}>\n            Volver al Dashboard\n          </Button>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"min-h-screen bg-gray-50 p-4\">\n      <div className=\"max-w-7xl mx-auto space-y-8\">\n        <ProcessHeader \n          title=\"Evento 4: Reportes y Cierre\"\n          onClose={() => setLocation(\"/\")}\n        />\n\n        <Card className=\"card-shadow\">\n          <CardContent className=\"p-6\">\n            <ProgressBar \n              currentStep={4} \n              totalSteps={4} \n              flowType={process.processType}\n            />\n          </CardContent>\n        </Card>\n\n        {/* Process Summary */}\n        <Card className=\"card-shadow\">\n          <CardHeader>\n            <div className=\"flex items-center justify-between\">\n              <CardTitle>Resumen del Proceso</CardTitle>\n              <div className=\"flex items-center space-x-2\">\n                <div className=\"w-3 h-3 bg-[--logistics-secondary] rounded-full\"></div>\n                <Badge className=\"bg-[--logistics-secondary-light] text-[--logistics-secondary]\">\n                  Proceso Completado\n                </Badge>\n              </div>\n            </div>\n          </CardHeader>\n          <CardContent className=\"p-8\">\n            <div className=\"grid grid-cols-1 md:grid-cols-3 gap-8 mb-8\">\n              <div>\n                <h4 className=\"font-medium text-gray-900 mb-4\">Producto</h4>\n                <div className=\"space-y-2 text-sm\">\n                  <div><span className=\"text-gray-500\">Nombre:</span> <span>{process.product.name}</span></div>\n                  <div><span className=\"text-gray-500\">Peso:</span> <span>{process.product.weight / 1000} kg</span></div>\n                  <div>\n                    <span className=\"text-gray-500\">Dimensiones:</span> \n                    <span> {process.product.dimensions.length}x{process.product.dimensions.width}x{process.product.dimensions.height} cm</span>\n                  </div>\n                  <div>\n                    <span className=\"text-gray-500\">Tipo:</span> \n                    <span> {process.processType === \"entrada\" ? \"Entrada de Bodega\" : \"Salida de Bodega\"}</span>\n                  </div>\n                </div>\n              </div>\n              <div>\n                <h4 className=\"font-medium text-gray-900 mb-4\">Transporte</h4>\n                <div className=\"space-y-2 text-sm\">\n                  <div><span className=\"text-gray-500\">Conductor:</span> <span>{process.transport?.driverName || \"N/A\"}</span></div>\n                  <div>\n                    <span className=\"text-gray-500\">Vehículo:</span> \n                    <span> {process.transport?.vehicleType || \"N/A\"} - {process.transport?.vehiclePlate || \"N/A\"}</span>\n                  </div>\n                  <div><span className=\"text-gray-500\">Licencia:</span> <span>{process.transport?.licenseNumber || \"N/A\"}</span></div>\n                </div>\n              </div>\n              <div>\n                <h4 className=\"font-medium text-gray-900 mb-4\">Entrega</h4>\n                <div className=\"space-y-2 text-sm\">\n                  <div><span className=\"text-gray-500\">Origen:</span> <span>{process.delivery?.originPlace || \"N/A\"}</span></div>\n                  <div><span className=\"text-gray-500\">Destino:</span> <span>{process.delivery?.destinationPlace || \"N/A\"}</span></div>\n                  <div><span className=\"text-gray-500\">Salida:</span> <span>{process.delivery?.departureTime ? formatDate(process.delivery.departureTime) : \"N/A\"}</span></div>\n                  <div><span className=\"text-gray-500\">Completado:</span> <span>{formatDate(new Date())}</span></div>\n                </div>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n\n        {/* Report Generation */}\n        <Card className=\"card-shadow\">\n          <CardHeader>\n            <CardTitle>Generar Reportes</CardTitle>\n          </CardHeader>\n          <CardContent className=\"p-8\">\n            <div className=\"grid grid-cols-1 md:grid-cols-3 gap-6 mb-8\">\n              <div className=\"border border-gray-200 rounded-lg p-6 text-center hover:bg-gray-50 transition-all\">\n                <div className=\"w-16 h-16 bg-[--logistics-primary-light] rounded-lg flex items-center justify-center mx-auto mb-4\">\n                  <FileText className=\"h-8 w-8 text-[--logistics-primary]\" />\n                </div>\n                <h4 className=\"font-medium text-gray-900 mb-2\">Reporte de Bodega</h4>\n                <p className=\"text-sm text-gray-500 mb-4\">Documento de entrada/salida de productos</p>\n                <Button \n                  className=\"btn-logistics-outline w-full\"\n                  onClick={() => handleGenerateReport(\"warehouse\")}\n                  disabled={generateReportMutation.isPending}\n                >\n                  <Download className=\"h-4 w-4 mr-2\" />\n                  Descargar PDF\n                </Button>\n              </div>\n              \n              <div className=\"border border-gray-200 rounded-lg p-6 text-center hover:bg-gray-50 transition-all\">\n                <div className=\"w-16 h-16 bg-[--logistics-warning-light] rounded-lg flex items-center justify-center mx-auto mb-4\">\n                  <Truck className=\"h-8 w-8 text-[--logistics-warning]\" />\n                </div>\n                <h4 className=\"font-medium text-gray-900 mb-2\">Reporte de Transporte</h4>\n                <p className=\"text-sm text-gray-500 mb-4\">Información detallada del envío</p>\n                <Button \n                  className=\"btn-logistics-outline w-full\"\n                  onClick={() => handleGenerateReport(\"transport\")}\n                  disabled={generateReportMutation.isPending}\n                >\n                  <Download className=\"h-4 w-4 mr-2\" />\n                  Descargar PDF\n                </Button>\n              </div>\n              \n              <div className=\"border border-gray-200 rounded-lg p-6 text-center hover:bg-gray-50 transition-all\">\n                <div className=\"w-16 h-16 bg-[--logistics-secondary-light] rounded-lg flex items-center justify-center mx-auto mb-4\">\n                  <Receipt className=\"h-8 w-8 text-[--logistics-secondary]\" />\n                </div>\n                <h4 className=\"font-medium text-gray-900 mb-2\">Factura</h4>\n                <p className=\"text-sm text-gray-500 mb-4\">Documento para el cliente receptor</p>\n                <Button \n                  className=\"btn-logistics-outline w-full\"\n                  onClick={() => handleGenerateReport(\"invoice\")}\n                  disabled={generateReportMutation.isPending}\n                >\n                  <Download className=\"h-4 w-4 mr-2\" />\n                  Descargar PDF\n                </Button>\n              </div>\n            </div>\n\n            {/* Process Actions */}\n            <div className=\"flex justify-end space-x-4 pt-6 border-t border-gray-200\">\n              <Button variant=\"outline\">\n                Guardar en Registros\n              </Button>\n              <Button \n                className=\"btn-logistics-primary\"\n                onClick={handleCompleteProcess}\n                disabled={completeProcessMutation.isPending}\n              >\n                {completeProcessMutation.isPending ? \"Finalizando...\" : \"Finalizar Proceso\"}\n                <Check className=\"h-4 w-4 ml-2\" />\n              </Button>\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n    </div>\n  );\n}\n","size_bytes":15830},"client/src/pages/history.tsx":{"content":"import { useQuery } from \"@tanstack/react-query\";\nimport { Link } from \"wouter\";\nimport { ArrowLeft, FileText, Download, Calendar, Package } from \"lucide-react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport type { ProcessWithDetails } from \"@shared/schema\";\n\nexport default function History() {\n  const { data: processHistory, isLoading } = useQuery<ProcessWithDetails[]>({\n    queryKey: [\"/api/pdfs/history\"],\n  });\n\n  const formatDate = (date: string | Date) => {\n    return new Date(date).toLocaleDateString(\"es-ES\", {\n      day: \"2-digit\",\n      month: \"2-digit\", \n      year: \"numeric\",\n      hour: \"2-digit\",\n      minute: \"2-digit\"\n    });\n  };\n\n  const getStatusBadge = (status: string) => {\n    const statusConfig = {\n      completed: { label: \"Completado\", variant: \"default\" as const, className: \"bg-green-100 text-green-800\" },\n      in_progress: { label: \"En Progreso\", variant: \"secondary\" as const, className: \"bg-blue-100 text-blue-800\" },\n      paused: { label: \"Pausado\", variant: \"outline\" as const, className: \"bg-yellow-100 text-yellow-800\" },\n      complaint: { label: \"Queja\", variant: \"destructive\" as const, className: \"bg-red-100 text-red-800\" },\n      draft: { label: \"Borrador\", variant: \"secondary\" as const, className: \"bg-gray-100 text-gray-800\" }\n    };\n    \n    const config = statusConfig[status as keyof typeof statusConfig] || statusConfig.draft;\n    return (\n      <Badge variant={config.variant} className={config.className}>\n        {config.label}\n      </Badge>\n    );\n  };\n\n  const regeneratePdf = async (processId: number, pdfType: string) => {\n    const reportType = pdfType === 'salida_producto' ? 'warehouse' : \n                      pdfType === 'factura' ? 'invoice' : 'transport';\n    \n    try {\n      const response = await fetch(`/api/processes/${processId}/reports/${reportType}`);\n      if (!response.ok) throw new Error('Failed to generate report');\n      const reportData = await response.json();\n      \n      // Dynamically import jsPDF\n      const { jsPDF } = await import('jspdf');\n      const doc = new jsPDF();\n      \n      // Add logo\n      let logoDataUrl = '';\n      try {\n        const logoResponse = await fetch('/assets/logo.png');\n        if (logoResponse.ok) {\n          const logoBlob = await logoResponse.blob();\n          logoDataUrl = await new Promise<string>((resolve) => {\n            const reader = new FileReader();\n            reader.onload = () => resolve(reader.result as string);\n            reader.readAsDataURL(logoBlob);\n          });\n        }\n      } catch (error) {\n        console.log('No se pudo cargar el logo:', error);\n      }\n      \n      if (logoDataUrl) {\n        try {\n          doc.addImage(logoDataUrl, 'PNG', 15, 15, 30, 15);\n        } catch (error) {\n          console.log('Error adding logo to PDF:', error);\n        }\n      }\n      \n      // Add header\n      doc.setFontSize(18);\n      doc.setFont(\"helvetica\", \"bold\");\n      doc.text(reportData.title, logoDataUrl ? 55 : 20, 25);\n      \n      // Add basic info\n      doc.setFontSize(12);\n      doc.setFont(\"helvetica\", \"normal\");\n      doc.text(`Proceso #${reportData.processId}`, 20, 45);\n      doc.text(`Tipo: ${reportData.processType}`, 20, 55);\n      doc.text(`Fecha: ${reportData.date}`, 20, 65);\n      \n      let yPos = 85;\n      \n      // Add product information\n      doc.setFont(\"helvetica\", \"bold\");\n      doc.text(\"PRODUCTO:\", 20, yPos);\n      yPos += 10;\n      doc.setFont(\"helvetica\", \"normal\");\n      doc.text(`Nombre: ${reportData.product.name || 'N/A'}`, 25, yPos);\n      yPos += 8;\n      doc.text(`Peso: ${reportData.product.weight || 'N/A'}`, 25, yPos);\n      yPos += 8;\n      doc.text(`Dimensiones: ${reportData.product.dimensions || 'N/A'}`, 25, yPos);\n      yPos += 8;\n      \n      // Add special regulations\n      if (reportData.product.regulations && reportData.product.regulations.length > 0) {\n        doc.text(`Regulaciones especiales: ${reportData.product.regulations.join(', ')}`, 25, yPos);\n        yPos += 8;\n      }\n      yPos += 7;\n      \n      // Add transport info\n      doc.setFont(\"helvetica\", \"bold\");\n      doc.text(\"TRANSPORTE:\", 20, yPos);\n      yPos += 10;\n      doc.setFont(\"helvetica\", \"normal\");\n      if (reportData.transport && !reportData.transport.error) {\n        doc.text(`Conductor: ${reportData.transport.driver || 'N/A'}`, 25, yPos);\n        yPos += 8;\n        doc.text(`Licencia: ${reportData.transport.license || 'N/A'}`, 25, yPos);\n        yPos += 8;\n        doc.text(`Vehículo: ${reportData.transport.vehicle || 'N/A'}`, 25, yPos);\n        yPos += 8;\n        if (reportData.transport.notes) {\n          doc.text(`Notas: ${reportData.transport.notes}`, 25, yPos);\n          yPos += 8;\n        }\n      } else {\n        doc.text('Información de transporte no disponible', 25, yPos);\n        yPos += 8;\n      }\n      yPos += 7;\n      \n      // Add delivery info\n      doc.setFont(\"helvetica\", \"bold\");\n      doc.text(\"ENTREGA:\", 20, yPos);\n      yPos += 10;\n      doc.setFont(\"helvetica\", \"normal\");\n      if (reportData.delivery && !reportData.delivery.error) {\n        doc.text(`Origen: ${reportData.delivery.origin || 'N/A'}`, 25, yPos);\n        yPos += 8;\n        doc.text(`Destino: ${reportData.delivery.destination || 'N/A'}`, 25, yPos);\n        yPos += 8;\n        doc.text(`Salida: ${reportData.delivery.departureTime || 'N/A'}`, 25, yPos);\n        yPos += 8;\n        if (reportData.delivery.notes) {\n          doc.text(`Notas: ${reportData.delivery.notes}`, 25, yPos);\n          yPos += 8;\n        }\n      } else {\n        doc.text('Información de entrega no disponible', 25, yPos);\n        yPos += 8;\n      }\n      yPos += 7;\n      \n      // Add invoice details if it's an invoice report\n      if (reportData.services) {\n        doc.setFont(\"helvetica\", \"bold\");\n        doc.text(\"SERVICIOS:\", 20, yPos);\n        yPos += 10;\n        doc.setFont(\"helvetica\", \"normal\");\n        \n        reportData.services.forEach((service: any) => {\n          doc.text(`${service.description}: $${service.total.toLocaleString()}`, 25, yPos);\n          yPos += 8;\n        });\n        \n        yPos += 10;\n        doc.setFont(\"helvetica\", \"bold\");\n        doc.text(`SUBTOTAL: $${reportData.totals.subtotal.toLocaleString()}`, 25, yPos);\n        yPos += 8;\n        doc.text(`IVA (19%): $${reportData.totals.iva.toLocaleString()}`, 25, yPos);\n        yPos += 8;\n        doc.text(`TOTAL: $${reportData.totals.total.toLocaleString()}`, 25, yPos);\n      }\n      \n      // Add footer\n      doc.setFontSize(10);\n      doc.setFont(\"helvetica\", \"italic\");\n      doc.text(`Generado el ${new Date().toLocaleString(\"es-ES\")}`, 20, 280);\n      \n      // Save the PDF\n      const fileName = pdfType === 'salida_producto' ? 'warehouse' : \n                      pdfType === 'factura' ? 'invoice' : 'transport';\n      doc.save(`${fileName}-proceso-${processId}.pdf`);\n      \n    } catch (error) {\n      console.error('Error regenerating PDF:', error);\n    }\n  };\n\n  if (isLoading) {\n    return (\n      <div className=\"min-h-screen bg-gray-50 flex items-center justify-center\">\n        <div className=\"text-center\">\n          <div className=\"text-lg font-medium\">Cargando historial...</div>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"min-h-screen bg-gray-50\">\n      <header className=\"bg-white shadow-sm border-b\">\n        <div className=\"max-w-6xl mx-auto px-4 py-4\">\n          <div className=\"flex items-center justify-between\">\n            <div className=\"flex items-center gap-4\">\n              <Link href=\"/\">\n                <Button variant=\"ghost\" size=\"sm\" data-testid=\"button-back\">\n                  <ArrowLeft className=\"w-4 h-4 mr-2\" />\n                  Volver al Dashboard\n                </Button>\n              </Link>\n              <div>\n                <h1 className=\"text-2xl font-bold text-gray-900\">Historial de Procesos</h1>\n                <p className=\"text-sm text-gray-600\">Procesos completados con PDFs generados</p>\n              </div>\n            </div>\n          </div>\n        </div>\n      </header>\n\n      <main className=\"max-w-6xl mx-auto px-4 py-8\">\n        {!processHistory || processHistory.length === 0 ? (\n          <Card>\n            <CardContent className=\"text-center py-12\">\n              <FileText className=\"w-12 h-12 text-gray-400 mx-auto mb-4\" />\n              <h3 className=\"text-lg font-medium text-gray-900 mb-2\">No hay procesos en el historial</h3>\n              <p className=\"text-gray-600 mb-4\">\n                Los procesos con PDFs generados aparecerán aquí una vez completados.\n              </p>\n              <Link href=\"/\">\n                <Button data-testid=\"button-create-process\">\n                  Crear Primer Proceso\n                </Button>\n              </Link>\n            </CardContent>\n          </Card>\n        ) : (\n          <div className=\"space-y-6\">\n            <div className=\"text-sm text-gray-600\">\n              {processHistory.length} proceso{processHistory.length !== 1 ? 's' : ''} en el historial\n            </div>\n            \n            {processHistory.map((process) => (\n              <Card key={process.id} className=\"overflow-hidden\">\n                <CardHeader className=\"bg-gray-50\">\n                  <div className=\"flex items-start justify-between\">\n                    <div className=\"space-y-1\">\n                      <CardTitle className=\"flex items-center gap-2\">\n                        <Package className=\"w-5 h-5 text-blue-600\" />\n                        Proceso #{process.id} - {process.product.name}\n                      </CardTitle>\n                      <div className=\"flex items-center gap-4 text-sm text-gray-600\">\n                        <span className=\"flex items-center gap-1\">\n                          <Calendar className=\"w-4 h-4\" />\n                          {formatDate(process.createdAt)}\n                        </span>\n                        <span className=\"uppercase font-medium text-blue-600\">\n                          {process.processType}\n                        </span>\n                        {getStatusBadge(process.status)}\n                      </div>\n                    </div>\n                  </div>\n                </CardHeader>\n                \n                <CardContent className=\"p-6\">\n                  <div className=\"grid md:grid-cols-2 gap-6\">\n                    {/* Process Details */}\n                    <div className=\"space-y-4\">\n                      <div>\n                        <h4 className=\"font-medium text-gray-900 mb-2\">Información del Producto</h4>\n                        <div className=\"text-sm text-gray-600 space-y-1\">\n                          <div>Peso: {process.product.weight / 1000} kg</div>\n                          <div>\n                            Dimensiones: {process.product.dimensions.length}×{process.product.dimensions.width}×{process.product.dimensions.height} cm\n                          </div>\n                          {Object.entries(process.product.regulations).some(([_, value]) => value) && (\n                            <div>\n                              Regulaciones: {Object.entries(process.product.regulations)\n                                .filter(([_, value]) => value)\n                                .map(([key]) => {\n                                  const labels = {\n                                    fragile: \"Frágil\",\n                                    lithium: \"Batería Litio\",\n                                    hazardous: \"Peligroso\",\n                                    refrigerated: \"Refrigerado\",\n                                    valuable: \"Valioso\",\n                                    oversized: \"Sobre-dimensionado\"\n                                  };\n                                  return labels[key as keyof typeof labels];\n                                }).join(', ')}\n                            </div>\n                          )}\n                        </div>\n                      </div>\n                      \n                      {process.transport && (\n                        <div>\n                          <h4 className=\"font-medium text-gray-900 mb-2\">Transporte</h4>\n                          <div className=\"text-sm text-gray-600 space-y-1\">\n                            <div>Conductor: {process.transport.driverName}</div>\n                            <div>Vehículo: {process.transport.vehicleType} - {process.transport.vehiclePlate}</div>\n                          </div>\n                        </div>\n                      )}\n                      \n                      {process.delivery && (\n                        <div>\n                          <h4 className=\"font-medium text-gray-900 mb-2\">Entrega</h4>\n                          <div className=\"text-sm text-gray-600 space-y-1\">\n                            <div>Origen: {process.delivery.originPlace}</div>\n                            <div>Destino: {process.delivery.destinationPlace}</div>\n                            <div>Fecha: {formatDate(process.delivery.departureTime)}</div>\n                          </div>\n                        </div>\n                      )}\n                    </div>\n                    \n                    {/* PDFs Generated */}\n                    <div>\n                      <h4 className=\"font-medium text-gray-900 mb-3\">PDFs Generados</h4>\n                      {process.pdfs && process.pdfs.length > 0 ? (\n                        <div className=\"space-y-2\">\n                          {process.pdfs.map((pdf) => (\n                            <div key={pdf.id} className=\"flex items-center justify-between p-3 bg-gray-50 rounded-lg\">\n                              <div className=\"flex items-center gap-3\">\n                                <FileText className=\"w-5 h-5 text-red-500\" />\n                                <div>\n                                  <div className=\"font-medium text-sm\">{pdf.fileName}</div>\n                                  <div className=\"text-xs text-gray-500\">\n                                    {formatDate(pdf.generatedAt)}\n                                  </div>\n                                </div>\n                              </div>\n                              <Button\n                                size=\"sm\"\n                                variant=\"outline\"\n                                onClick={() => regeneratePdf(process.id, pdf.pdfType)}\n                                data-testid={`button-download-${pdf.id}`}\n                              >\n                                <Download className=\"w-4 h-4 mr-1\" />\n                                Descargar\n                              </Button>\n                            </div>\n                          ))}\n                        </div>\n                      ) : (\n                        <div className=\"text-sm text-gray-500 italic\">\n                          No hay PDFs generados para este proceso\n                        </div>\n                      )}\n                    </div>\n                  </div>\n                </CardContent>\n              </Card>\n            ))}\n          </div>\n        )}\n      </main>\n    </div>\n  );\n}","size_bytes":15244},"client/src/pages/not-found.tsx":{"content":"import { Card, CardContent } from \"@/components/ui/card\";\nimport { AlertCircle } from \"lucide-react\";\n\nexport default function NotFound() {\n  return (\n    <div className=\"min-h-screen w-full flex items-center justify-center bg-gray-50\">\n      <Card className=\"w-full max-w-md mx-4\">\n        <CardContent className=\"pt-6\">\n          <div className=\"flex mb-4 gap-2\">\n            <AlertCircle className=\"h-8 w-8 text-red-500\" />\n            <h1 className=\"text-2xl font-bold text-gray-900\">404 Page Not Found</h1>\n          </div>\n\n          <p className=\"mt-4 text-sm text-gray-600\">\n            Did you forget to add the page to the router?\n          </p>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":711},"client/src/components/ui/accordion.tsx":{"content":"import * as React from \"react\"\nimport * as AccordionPrimitive from \"@radix-ui/react-accordion\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Accordion = AccordionPrimitive.Root\n\nconst AccordionItem = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <AccordionPrimitive.Item\n    ref={ref}\n    className={cn(\"border-b\", className)}\n    {...props}\n  />\n))\nAccordionItem.displayName = \"AccordionItem\"\n\nconst AccordionTrigger = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Header className=\"flex\">\n    <AccordionPrimitive.Trigger\n      ref={ref}\n      className={cn(\n        \"flex flex-1 items-center justify-between py-4 font-medium transition-all hover:underline [&[data-state=open]>svg]:rotate-180\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <ChevronDown className=\"h-4 w-4 shrink-0 transition-transform duration-200\" />\n    </AccordionPrimitive.Trigger>\n  </AccordionPrimitive.Header>\n))\nAccordionTrigger.displayName = AccordionPrimitive.Trigger.displayName\n\nconst AccordionContent = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Content\n    ref={ref}\n    className=\"overflow-hidden text-sm transition-all data-[state=closed]:animate-accordion-up data-[state=open]:animate-accordion-down\"\n    {...props}\n  >\n    <div className={cn(\"pb-4 pt-0\", className)}>{children}</div>\n  </AccordionPrimitive.Content>\n))\n\nAccordionContent.displayName = AccordionPrimitive.Content.displayName\n\nexport { Accordion, AccordionItem, AccordionTrigger, AccordionContent }\n","size_bytes":1977},"client/src/components/ui/alert-dialog.tsx":{"content":"import * as React from \"react\"\nimport * as AlertDialogPrimitive from \"@radix-ui/react-alert-dialog\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nconst AlertDialog = AlertDialogPrimitive.Root\n\nconst AlertDialogTrigger = AlertDialogPrimitive.Trigger\n\nconst AlertDialogPortal = AlertDialogPrimitive.Portal\n\nconst AlertDialogOverlay = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nAlertDialogOverlay.displayName = AlertDialogPrimitive.Overlay.displayName\n\nconst AlertDialogContent = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPortal>\n    <AlertDialogOverlay />\n    <AlertDialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    />\n  </AlertDialogPortal>\n))\nAlertDialogContent.displayName = AlertDialogPrimitive.Content.displayName\n\nconst AlertDialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogHeader.displayName = \"AlertDialogHeader\"\n\nconst AlertDialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogFooter.displayName = \"AlertDialogFooter\"\n\nconst AlertDialogTitle = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold\", className)}\n    {...props}\n  />\n))\nAlertDialogTitle.displayName = AlertDialogPrimitive.Title.displayName\n\nconst AlertDialogDescription = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nAlertDialogDescription.displayName =\n  AlertDialogPrimitive.Description.displayName\n\nconst AlertDialogAction = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Action>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Action>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Action\n    ref={ref}\n    className={cn(buttonVariants(), className)}\n    {...props}\n  />\n))\nAlertDialogAction.displayName = AlertDialogPrimitive.Action.displayName\n\nconst AlertDialogCancel = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Cancel>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Cancel>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Cancel\n    ref={ref}\n    className={cn(\n      buttonVariants({ variant: \"outline\" }),\n      \"mt-2 sm:mt-0\",\n      className\n    )}\n    {...props}\n  />\n))\nAlertDialogCancel.displayName = AlertDialogPrimitive.Cancel.displayName\n\nexport {\n  AlertDialog,\n  AlertDialogPortal,\n  AlertDialogOverlay,\n  AlertDialogTrigger,\n  AlertDialogContent,\n  AlertDialogHeader,\n  AlertDialogFooter,\n  AlertDialogTitle,\n  AlertDialogDescription,\n  AlertDialogAction,\n  AlertDialogCancel,\n}\n","size_bytes":4420},"client/src/components/ui/alert.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst alertVariants = cva(\n  \"relative w-full rounded-lg border p-4 [&>svg~*]:pl-7 [&>svg+div]:translate-y-[-3px] [&>svg]:absolute [&>svg]:left-4 [&>svg]:top-4 [&>svg]:text-foreground\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-background text-foreground\",\n        destructive:\n          \"border-destructive/50 text-destructive dark:border-destructive [&>svg]:text-destructive\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Alert = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & VariantProps<typeof alertVariants>\n>(({ className, variant, ...props }, ref) => (\n  <div\n    ref={ref}\n    role=\"alert\"\n    className={cn(alertVariants({ variant }), className)}\n    {...props}\n  />\n))\nAlert.displayName = \"Alert\"\n\nconst AlertTitle = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLHeadingElement>\n>(({ className, ...props }, ref) => (\n  <h5\n    ref={ref}\n    className={cn(\"mb-1 font-medium leading-none tracking-tight\", className)}\n    {...props}\n  />\n))\nAlertTitle.displayName = \"AlertTitle\"\n\nconst AlertDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm [&_p]:leading-relaxed\", className)}\n    {...props}\n  />\n))\nAlertDescription.displayName = \"AlertDescription\"\n\nexport { Alert, AlertTitle, AlertDescription }\n","size_bytes":1584},"client/src/components/ui/aspect-ratio.tsx":{"content":"import * as AspectRatioPrimitive from \"@radix-ui/react-aspect-ratio\"\n\nconst AspectRatio = AspectRatioPrimitive.Root\n\nexport { AspectRatio }\n","size_bytes":140},"client/src/components/ui/avatar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as AvatarPrimitive from \"@radix-ui/react-avatar\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Avatar = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex h-10 w-10 shrink-0 overflow-hidden rounded-full\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatar.displayName = AvatarPrimitive.Root.displayName\n\nconst AvatarImage = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Image>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Image>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Image\n    ref={ref}\n    className={cn(\"aspect-square h-full w-full\", className)}\n    {...props}\n  />\n))\nAvatarImage.displayName = AvatarPrimitive.Image.displayName\n\nconst AvatarFallback = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Fallback>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Fallback>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Fallback\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full items-center justify-center rounded-full bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatarFallback.displayName = AvatarPrimitive.Fallback.displayName\n\nexport { Avatar, AvatarImage, AvatarFallback }\n","size_bytes":1419},"client/src/components/ui/badge.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst badgeVariants = cva(\n  \"inline-flex items-center rounded-full border px-2.5 py-0.5 text-xs font-semibold transition-colors focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2\",\n  {\n    variants: {\n      variant: {\n        default:\n          \"border-transparent bg-primary text-primary-foreground hover:bg-primary/80\",\n        secondary:\n          \"border-transparent bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        destructive:\n          \"border-transparent bg-destructive text-destructive-foreground hover:bg-destructive/80\",\n        outline: \"text-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nexport interface BadgeProps\n  extends React.HTMLAttributes<HTMLDivElement>,\n    VariantProps<typeof badgeVariants> {}\n\nfunction Badge({ className, variant, ...props }: BadgeProps) {\n  return (\n    <div className={cn(badgeVariants({ variant }), className)} {...props} />\n  )\n}\n\nexport { Badge, badgeVariants }\n","size_bytes":1128},"client/src/components/ui/breadcrumb.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Breadcrumb = React.forwardRef<\n  HTMLElement,\n  React.ComponentPropsWithoutRef<\"nav\"> & {\n    separator?: React.ReactNode\n  }\n>(({ ...props }, ref) => <nav ref={ref} aria-label=\"breadcrumb\" {...props} />)\nBreadcrumb.displayName = \"Breadcrumb\"\n\nconst BreadcrumbList = React.forwardRef<\n  HTMLOListElement,\n  React.ComponentPropsWithoutRef<\"ol\">\n>(({ className, ...props }, ref) => (\n  <ol\n    ref={ref}\n    className={cn(\n      \"flex flex-wrap items-center gap-1.5 break-words text-sm text-muted-foreground sm:gap-2.5\",\n      className\n    )}\n    {...props}\n  />\n))\nBreadcrumbList.displayName = \"BreadcrumbList\"\n\nconst BreadcrumbItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentPropsWithoutRef<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    className={cn(\"inline-flex items-center gap-1.5\", className)}\n    {...props}\n  />\n))\nBreadcrumbItem.displayName = \"BreadcrumbItem\"\n\nconst BreadcrumbLink = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentPropsWithoutRef<\"a\"> & {\n    asChild?: boolean\n  }\n>(({ asChild, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      className={cn(\"transition-colors hover:text-foreground\", className)}\n      {...props}\n    />\n  )\n})\nBreadcrumbLink.displayName = \"BreadcrumbLink\"\n\nconst BreadcrumbPage = React.forwardRef<\n  HTMLSpanElement,\n  React.ComponentPropsWithoutRef<\"span\">\n>(({ className, ...props }, ref) => (\n  <span\n    ref={ref}\n    role=\"link\"\n    aria-disabled=\"true\"\n    aria-current=\"page\"\n    className={cn(\"font-normal text-foreground\", className)}\n    {...props}\n  />\n))\nBreadcrumbPage.displayName = \"BreadcrumbPage\"\n\nconst BreadcrumbSeparator = ({\n  children,\n  className,\n  ...props\n}: React.ComponentProps<\"li\">) => (\n  <li\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"[&>svg]:w-3.5 [&>svg]:h-3.5\", className)}\n    {...props}\n  >\n    {children ?? <ChevronRight />}\n  </li>\n)\nBreadcrumbSeparator.displayName = \"BreadcrumbSeparator\"\n\nconst BreadcrumbEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More</span>\n  </span>\n)\nBreadcrumbEllipsis.displayName = \"BreadcrumbElipssis\"\n\nexport {\n  Breadcrumb,\n  BreadcrumbList,\n  BreadcrumbItem,\n  BreadcrumbLink,\n  BreadcrumbPage,\n  BreadcrumbSeparator,\n  BreadcrumbEllipsis,\n}\n","size_bytes":2712},"client/src/components/ui/button.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst buttonVariants = cva(\n  \"inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-primary text-primary-foreground hover:bg-primary/90\",\n        destructive:\n          \"bg-destructive text-destructive-foreground hover:bg-destructive/90\",\n        outline:\n          \"border border-input bg-background hover:bg-accent hover:text-accent-foreground\",\n        secondary:\n          \"bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        ghost: \"hover:bg-accent hover:text-accent-foreground\",\n        link: \"text-primary underline-offset-4 hover:underline\",\n      },\n      size: {\n        default: \"h-10 px-4 py-2\",\n        sm: \"h-9 rounded-md px-3\",\n        lg: \"h-11 rounded-md px-8\",\n        icon: \"h-10 w-10\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nexport interface ButtonProps\n  extends React.ButtonHTMLAttributes<HTMLButtonElement>,\n    VariantProps<typeof buttonVariants> {\n  asChild?: boolean\n}\n\nconst Button = React.forwardRef<HTMLButtonElement, ButtonProps>(\n  ({ className, variant, size, asChild = false, ...props }, ref) => {\n    const Comp = asChild ? Slot : \"button\"\n    return (\n      <Comp\n        className={cn(buttonVariants({ variant, size, className }))}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nButton.displayName = \"Button\"\n\nexport { Button, buttonVariants }\n","size_bytes":1901},"client/src/components/ui/calendar.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight } from \"lucide-react\"\nimport { DayPicker } from \"react-day-picker\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nexport type CalendarProps = React.ComponentProps<typeof DayPicker>\n\nfunction Calendar({\n  className,\n  classNames,\n  showOutsideDays = true,\n  ...props\n}: CalendarProps) {\n  return (\n    <DayPicker\n      showOutsideDays={showOutsideDays}\n      className={cn(\"p-3\", className)}\n      classNames={{\n        months: \"flex flex-col sm:flex-row space-y-4 sm:space-x-4 sm:space-y-0\",\n        month: \"space-y-4\",\n        caption: \"flex justify-center pt-1 relative items-center\",\n        caption_label: \"text-sm font-medium\",\n        nav: \"space-x-1 flex items-center\",\n        nav_button: cn(\n          buttonVariants({ variant: \"outline\" }),\n          \"h-7 w-7 bg-transparent p-0 opacity-50 hover:opacity-100\"\n        ),\n        nav_button_previous: \"absolute left-1\",\n        nav_button_next: \"absolute right-1\",\n        table: \"w-full border-collapse space-y-1\",\n        head_row: \"flex\",\n        head_cell:\n          \"text-muted-foreground rounded-md w-9 font-normal text-[0.8rem]\",\n        row: \"flex w-full mt-2\",\n        cell: \"h-9 w-9 text-center text-sm p-0 relative [&:has([aria-selected].day-range-end)]:rounded-r-md [&:has([aria-selected].day-outside)]:bg-accent/50 [&:has([aria-selected])]:bg-accent first:[&:has([aria-selected])]:rounded-l-md last:[&:has([aria-selected])]:rounded-r-md focus-within:relative focus-within:z-20\",\n        day: cn(\n          buttonVariants({ variant: \"ghost\" }),\n          \"h-9 w-9 p-0 font-normal aria-selected:opacity-100\"\n        ),\n        day_range_end: \"day-range-end\",\n        day_selected:\n          \"bg-primary text-primary-foreground hover:bg-primary hover:text-primary-foreground focus:bg-primary focus:text-primary-foreground\",\n        day_today: \"bg-accent text-accent-foreground\",\n        day_outside:\n          \"day-outside text-muted-foreground aria-selected:bg-accent/50 aria-selected:text-muted-foreground\",\n        day_disabled: \"text-muted-foreground opacity-50\",\n        day_range_middle:\n          \"aria-selected:bg-accent aria-selected:text-accent-foreground\",\n        day_hidden: \"invisible\",\n        ...classNames,\n      }}\n      components={{\n        IconLeft: ({ className, ...props }) => (\n          <ChevronLeft className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n        IconRight: ({ className, ...props }) => (\n          <ChevronRight className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n      }}\n      {...props}\n    />\n  )\n}\nCalendar.displayName = \"Calendar\"\n\nexport { Calendar }\n","size_bytes":2695},"client/src/components/ui/card.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Card = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"rounded-lg border bg-card text-card-foreground shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nCard.displayName = \"Card\"\n\nconst CardHeader = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex flex-col space-y-1.5 p-6\", className)}\n    {...props}\n  />\n))\nCardHeader.displayName = \"CardHeader\"\n\nconst CardTitle = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"text-2xl font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nCardTitle.displayName = \"CardTitle\"\n\nconst CardDescription = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nCardDescription.displayName = \"CardDescription\"\n\nconst CardContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"p-6 pt-0\", className)} {...props} />\n))\nCardContent.displayName = \"CardContent\"\n\nconst CardFooter = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex items-center p-6 pt-0\", className)}\n    {...props}\n  />\n))\nCardFooter.displayName = \"CardFooter\"\n\nexport { Card, CardHeader, CardFooter, CardTitle, CardDescription, CardContent }\n","size_bytes":1858},"client/src/components/ui/carousel.tsx":{"content":"import * as React from \"react\"\nimport useEmblaCarousel, {\n  type UseEmblaCarouselType,\n} from \"embla-carousel-react\"\nimport { ArrowLeft, ArrowRight } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\n\ntype CarouselApi = UseEmblaCarouselType[1]\ntype UseCarouselParameters = Parameters<typeof useEmblaCarousel>\ntype CarouselOptions = UseCarouselParameters[0]\ntype CarouselPlugin = UseCarouselParameters[1]\n\ntype CarouselProps = {\n  opts?: CarouselOptions\n  plugins?: CarouselPlugin\n  orientation?: \"horizontal\" | \"vertical\"\n  setApi?: (api: CarouselApi) => void\n}\n\ntype CarouselContextProps = {\n  carouselRef: ReturnType<typeof useEmblaCarousel>[0]\n  api: ReturnType<typeof useEmblaCarousel>[1]\n  scrollPrev: () => void\n  scrollNext: () => void\n  canScrollPrev: boolean\n  canScrollNext: boolean\n} & CarouselProps\n\nconst CarouselContext = React.createContext<CarouselContextProps | null>(null)\n\nfunction useCarousel() {\n  const context = React.useContext(CarouselContext)\n\n  if (!context) {\n    throw new Error(\"useCarousel must be used within a <Carousel />\")\n  }\n\n  return context\n}\n\nconst Carousel = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & CarouselProps\n>(\n  (\n    {\n      orientation = \"horizontal\",\n      opts,\n      setApi,\n      plugins,\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const [carouselRef, api] = useEmblaCarousel(\n      {\n        ...opts,\n        axis: orientation === \"horizontal\" ? \"x\" : \"y\",\n      },\n      plugins\n    )\n    const [canScrollPrev, setCanScrollPrev] = React.useState(false)\n    const [canScrollNext, setCanScrollNext] = React.useState(false)\n\n    const onSelect = React.useCallback((api: CarouselApi) => {\n      if (!api) {\n        return\n      }\n\n      setCanScrollPrev(api.canScrollPrev())\n      setCanScrollNext(api.canScrollNext())\n    }, [])\n\n    const scrollPrev = React.useCallback(() => {\n      api?.scrollPrev()\n    }, [api])\n\n    const scrollNext = React.useCallback(() => {\n      api?.scrollNext()\n    }, [api])\n\n    const handleKeyDown = React.useCallback(\n      (event: React.KeyboardEvent<HTMLDivElement>) => {\n        if (event.key === \"ArrowLeft\") {\n          event.preventDefault()\n          scrollPrev()\n        } else if (event.key === \"ArrowRight\") {\n          event.preventDefault()\n          scrollNext()\n        }\n      },\n      [scrollPrev, scrollNext]\n    )\n\n    React.useEffect(() => {\n      if (!api || !setApi) {\n        return\n      }\n\n      setApi(api)\n    }, [api, setApi])\n\n    React.useEffect(() => {\n      if (!api) {\n        return\n      }\n\n      onSelect(api)\n      api.on(\"reInit\", onSelect)\n      api.on(\"select\", onSelect)\n\n      return () => {\n        api?.off(\"select\", onSelect)\n      }\n    }, [api, onSelect])\n\n    return (\n      <CarouselContext.Provider\n        value={{\n          carouselRef,\n          api: api,\n          opts,\n          orientation:\n            orientation || (opts?.axis === \"y\" ? \"vertical\" : \"horizontal\"),\n          scrollPrev,\n          scrollNext,\n          canScrollPrev,\n          canScrollNext,\n        }}\n      >\n        <div\n          ref={ref}\n          onKeyDownCapture={handleKeyDown}\n          className={cn(\"relative\", className)}\n          role=\"region\"\n          aria-roledescription=\"carousel\"\n          {...props}\n        >\n          {children}\n        </div>\n      </CarouselContext.Provider>\n    )\n  }\n)\nCarousel.displayName = \"Carousel\"\n\nconst CarouselContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { carouselRef, orientation } = useCarousel()\n\n  return (\n    <div ref={carouselRef} className=\"overflow-hidden\">\n      <div\n        ref={ref}\n        className={cn(\n          \"flex\",\n          orientation === \"horizontal\" ? \"-ml-4\" : \"-mt-4 flex-col\",\n          className\n        )}\n        {...props}\n      />\n    </div>\n  )\n})\nCarouselContent.displayName = \"CarouselContent\"\n\nconst CarouselItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { orientation } = useCarousel()\n\n  return (\n    <div\n      ref={ref}\n      role=\"group\"\n      aria-roledescription=\"slide\"\n      className={cn(\n        \"min-w-0 shrink-0 grow-0 basis-full\",\n        orientation === \"horizontal\" ? \"pl-4\" : \"pt-4\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nCarouselItem.displayName = \"CarouselItem\"\n\nconst CarouselPrevious = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollPrev, canScrollPrev } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute  h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-left-12 top-1/2 -translate-y-1/2\"\n          : \"-top-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollPrev}\n      onClick={scrollPrev}\n      {...props}\n    >\n      <ArrowLeft className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Previous slide</span>\n    </Button>\n  )\n})\nCarouselPrevious.displayName = \"CarouselPrevious\"\n\nconst CarouselNext = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollNext, canScrollNext } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-right-12 top-1/2 -translate-y-1/2\"\n          : \"-bottom-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollNext}\n      onClick={scrollNext}\n      {...props}\n    >\n      <ArrowRight className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Next slide</span>\n    </Button>\n  )\n})\nCarouselNext.displayName = \"CarouselNext\"\n\nexport {\n  type CarouselApi,\n  Carousel,\n  CarouselContent,\n  CarouselItem,\n  CarouselPrevious,\n  CarouselNext,\n}\n","size_bytes":6210},"client/src/components/ui/chart.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as RechartsPrimitive from \"recharts\"\n\nimport { cn } from \"@/lib/utils\"\n\n// Format: { THEME_NAME: CSS_SELECTOR }\nconst THEMES = { light: \"\", dark: \".dark\" } as const\n\nexport type ChartConfig = {\n  [k in string]: {\n    label?: React.ReactNode\n    icon?: React.ComponentType\n  } & (\n    | { color?: string; theme?: never }\n    | { color?: never; theme: Record<keyof typeof THEMES, string> }\n  )\n}\n\ntype ChartContextProps = {\n  config: ChartConfig\n}\n\nconst ChartContext = React.createContext<ChartContextProps | null>(null)\n\nfunction useChart() {\n  const context = React.useContext(ChartContext)\n\n  if (!context) {\n    throw new Error(\"useChart must be used within a <ChartContainer />\")\n  }\n\n  return context\n}\n\nconst ChartContainer = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    config: ChartConfig\n    children: React.ComponentProps<\n      typeof RechartsPrimitive.ResponsiveContainer\n    >[\"children\"]\n  }\n>(({ id, className, children, config, ...props }, ref) => {\n  const uniqueId = React.useId()\n  const chartId = `chart-${id || uniqueId.replace(/:/g, \"\")}`\n\n  return (\n    <ChartContext.Provider value={{ config }}>\n      <div\n        data-chart={chartId}\n        ref={ref}\n        className={cn(\n          \"flex aspect-video justify-center text-xs [&_.recharts-cartesian-axis-tick_text]:fill-muted-foreground [&_.recharts-cartesian-grid_line[stroke='#ccc']]:stroke-border/50 [&_.recharts-curve.recharts-tooltip-cursor]:stroke-border [&_.recharts-dot[stroke='#fff']]:stroke-transparent [&_.recharts-layer]:outline-none [&_.recharts-polar-grid_[stroke='#ccc']]:stroke-border [&_.recharts-radial-bar-background-sector]:fill-muted [&_.recharts-rectangle.recharts-tooltip-cursor]:fill-muted [&_.recharts-reference-line_[stroke='#ccc']]:stroke-border [&_.recharts-sector[stroke='#fff']]:stroke-transparent [&_.recharts-sector]:outline-none [&_.recharts-surface]:outline-none\",\n          className\n        )}\n        {...props}\n      >\n        <ChartStyle id={chartId} config={config} />\n        <RechartsPrimitive.ResponsiveContainer>\n          {children}\n        </RechartsPrimitive.ResponsiveContainer>\n      </div>\n    </ChartContext.Provider>\n  )\n})\nChartContainer.displayName = \"Chart\"\n\nconst ChartStyle = ({ id, config }: { id: string; config: ChartConfig }) => {\n  const colorConfig = Object.entries(config).filter(\n    ([, config]) => config.theme || config.color\n  )\n\n  if (!colorConfig.length) {\n    return null\n  }\n\n  return (\n    <style\n      dangerouslySetInnerHTML={{\n        __html: Object.entries(THEMES)\n          .map(\n            ([theme, prefix]) => `\n${prefix} [data-chart=${id}] {\n${colorConfig\n  .map(([key, itemConfig]) => {\n    const color =\n      itemConfig.theme?.[theme as keyof typeof itemConfig.theme] ||\n      itemConfig.color\n    return color ? `  --color-${key}: ${color};` : null\n  })\n  .join(\"\\n\")}\n}\n`\n          )\n          .join(\"\\n\"),\n      }}\n    />\n  )\n}\n\nconst ChartTooltip = RechartsPrimitive.Tooltip\n\nconst ChartTooltipContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<typeof RechartsPrimitive.Tooltip> &\n    React.ComponentProps<\"div\"> & {\n      hideLabel?: boolean\n      hideIndicator?: boolean\n      indicator?: \"line\" | \"dot\" | \"dashed\"\n      nameKey?: string\n      labelKey?: string\n    }\n>(\n  (\n    {\n      active,\n      payload,\n      className,\n      indicator = \"dot\",\n      hideLabel = false,\n      hideIndicator = false,\n      label,\n      labelFormatter,\n      labelClassName,\n      formatter,\n      color,\n      nameKey,\n      labelKey,\n    },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    const tooltipLabel = React.useMemo(() => {\n      if (hideLabel || !payload?.length) {\n        return null\n      }\n\n      const [item] = payload\n      const key = `${labelKey || item?.dataKey || item?.name || \"value\"}`\n      const itemConfig = getPayloadConfigFromPayload(config, item, key)\n      const value =\n        !labelKey && typeof label === \"string\"\n          ? config[label as keyof typeof config]?.label || label\n          : itemConfig?.label\n\n      if (labelFormatter) {\n        return (\n          <div className={cn(\"font-medium\", labelClassName)}>\n            {labelFormatter(value, payload)}\n          </div>\n        )\n      }\n\n      if (!value) {\n        return null\n      }\n\n      return <div className={cn(\"font-medium\", labelClassName)}>{value}</div>\n    }, [\n      label,\n      labelFormatter,\n      payload,\n      hideLabel,\n      labelClassName,\n      config,\n      labelKey,\n    ])\n\n    if (!active || !payload?.length) {\n      return null\n    }\n\n    const nestLabel = payload.length === 1 && indicator !== \"dot\"\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"grid min-w-[8rem] items-start gap-1.5 rounded-lg border border-border/50 bg-background px-2.5 py-1.5 text-xs shadow-xl\",\n          className\n        )}\n      >\n        {!nestLabel ? tooltipLabel : null}\n        <div className=\"grid gap-1.5\">\n          {payload.map((item, index) => {\n            const key = `${nameKey || item.name || item.dataKey || \"value\"}`\n            const itemConfig = getPayloadConfigFromPayload(config, item, key)\n            const indicatorColor = color || item.payload.fill || item.color\n\n            return (\n              <div\n                key={item.dataKey}\n                className={cn(\n                  \"flex w-full flex-wrap items-stretch gap-2 [&>svg]:h-2.5 [&>svg]:w-2.5 [&>svg]:text-muted-foreground\",\n                  indicator === \"dot\" && \"items-center\"\n                )}\n              >\n                {formatter && item?.value !== undefined && item.name ? (\n                  formatter(item.value, item.name, item, index, item.payload)\n                ) : (\n                  <>\n                    {itemConfig?.icon ? (\n                      <itemConfig.icon />\n                    ) : (\n                      !hideIndicator && (\n                        <div\n                          className={cn(\n                            \"shrink-0 rounded-[2px] border-[--color-border] bg-[--color-bg]\",\n                            {\n                              \"h-2.5 w-2.5\": indicator === \"dot\",\n                              \"w-1\": indicator === \"line\",\n                              \"w-0 border-[1.5px] border-dashed bg-transparent\":\n                                indicator === \"dashed\",\n                              \"my-0.5\": nestLabel && indicator === \"dashed\",\n                            }\n                          )}\n                          style={\n                            {\n                              \"--color-bg\": indicatorColor,\n                              \"--color-border\": indicatorColor,\n                            } as React.CSSProperties\n                          }\n                        />\n                      )\n                    )}\n                    <div\n                      className={cn(\n                        \"flex flex-1 justify-between leading-none\",\n                        nestLabel ? \"items-end\" : \"items-center\"\n                      )}\n                    >\n                      <div className=\"grid gap-1.5\">\n                        {nestLabel ? tooltipLabel : null}\n                        <span className=\"text-muted-foreground\">\n                          {itemConfig?.label || item.name}\n                        </span>\n                      </div>\n                      {item.value && (\n                        <span className=\"font-mono font-medium tabular-nums text-foreground\">\n                          {item.value.toLocaleString()}\n                        </span>\n                      )}\n                    </div>\n                  </>\n                )}\n              </div>\n            )\n          })}\n        </div>\n      </div>\n    )\n  }\n)\nChartTooltipContent.displayName = \"ChartTooltip\"\n\nconst ChartLegend = RechartsPrimitive.Legend\n\nconst ChartLegendContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> &\n    Pick<RechartsPrimitive.LegendProps, \"payload\" | \"verticalAlign\"> & {\n      hideIcon?: boolean\n      nameKey?: string\n    }\n>(\n  (\n    { className, hideIcon = false, payload, verticalAlign = \"bottom\", nameKey },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    if (!payload?.length) {\n      return null\n    }\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"flex items-center justify-center gap-4\",\n          verticalAlign === \"top\" ? \"pb-3\" : \"pt-3\",\n          className\n        )}\n      >\n        {payload.map((item) => {\n          const key = `${nameKey || item.dataKey || \"value\"}`\n          const itemConfig = getPayloadConfigFromPayload(config, item, key)\n\n          return (\n            <div\n              key={item.value}\n              className={cn(\n                \"flex items-center gap-1.5 [&>svg]:h-3 [&>svg]:w-3 [&>svg]:text-muted-foreground\"\n              )}\n            >\n              {itemConfig?.icon && !hideIcon ? (\n                <itemConfig.icon />\n              ) : (\n                <div\n                  className=\"h-2 w-2 shrink-0 rounded-[2px]\"\n                  style={{\n                    backgroundColor: item.color,\n                  }}\n                />\n              )}\n              {itemConfig?.label}\n            </div>\n          )\n        })}\n      </div>\n    )\n  }\n)\nChartLegendContent.displayName = \"ChartLegend\"\n\n// Helper to extract item config from a payload.\nfunction getPayloadConfigFromPayload(\n  config: ChartConfig,\n  payload: unknown,\n  key: string\n) {\n  if (typeof payload !== \"object\" || payload === null) {\n    return undefined\n  }\n\n  const payloadPayload =\n    \"payload\" in payload &&\n    typeof payload.payload === \"object\" &&\n    payload.payload !== null\n      ? payload.payload\n      : undefined\n\n  let configLabelKey: string = key\n\n  if (\n    key in payload &&\n    typeof payload[key as keyof typeof payload] === \"string\"\n  ) {\n    configLabelKey = payload[key as keyof typeof payload] as string\n  } else if (\n    payloadPayload &&\n    key in payloadPayload &&\n    typeof payloadPayload[key as keyof typeof payloadPayload] === \"string\"\n  ) {\n    configLabelKey = payloadPayload[\n      key as keyof typeof payloadPayload\n    ] as string\n  }\n\n  return configLabelKey in config\n    ? config[configLabelKey]\n    : config[key as keyof typeof config]\n}\n\nexport {\n  ChartContainer,\n  ChartTooltip,\n  ChartTooltipContent,\n  ChartLegend,\n  ChartLegendContent,\n  ChartStyle,\n}\n","size_bytes":10481},"client/src/components/ui/checkbox.tsx":{"content":"import * as React from \"react\"\nimport * as CheckboxPrimitive from \"@radix-ui/react-checkbox\"\nimport { Check } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Checkbox = React.forwardRef<\n  React.ElementRef<typeof CheckboxPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof CheckboxPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <CheckboxPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"peer h-4 w-4 shrink-0 rounded-sm border border-primary ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=checked]:text-primary-foreground\",\n      className\n    )}\n    {...props}\n  >\n    <CheckboxPrimitive.Indicator\n      className={cn(\"flex items-center justify-center text-current\")}\n    >\n      <Check className=\"h-4 w-4\" />\n    </CheckboxPrimitive.Indicator>\n  </CheckboxPrimitive.Root>\n))\nCheckbox.displayName = CheckboxPrimitive.Root.displayName\n\nexport { Checkbox }\n","size_bytes":1056},"client/src/components/ui/collapsible.tsx":{"content":"\"use client\"\n\nimport * as CollapsiblePrimitive from \"@radix-ui/react-collapsible\"\n\nconst Collapsible = CollapsiblePrimitive.Root\n\nconst CollapsibleTrigger = CollapsiblePrimitive.CollapsibleTrigger\n\nconst CollapsibleContent = CollapsiblePrimitive.CollapsibleContent\n\nexport { Collapsible, CollapsibleTrigger, CollapsibleContent }\n","size_bytes":329},"client/src/components/ui/command.tsx":{"content":"import * as React from \"react\"\nimport { type DialogProps } from \"@radix-ui/react-dialog\"\nimport { Command as CommandPrimitive } from \"cmdk\"\nimport { Search } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Dialog, DialogContent } from \"@/components/ui/dialog\"\n\nconst Command = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full flex-col overflow-hidden rounded-md bg-popover text-popover-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nCommand.displayName = CommandPrimitive.displayName\n\nconst CommandDialog = ({ children, ...props }: DialogProps) => {\n  return (\n    <Dialog {...props}>\n      <DialogContent className=\"overflow-hidden p-0 shadow-lg\">\n        <Command className=\"[&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground [&_[cmdk-group]:not([hidden])_~[cmdk-group]]:pt-0 [&_[cmdk-group]]:px-2 [&_[cmdk-input-wrapper]_svg]:h-5 [&_[cmdk-input-wrapper]_svg]:w-5 [&_[cmdk-input]]:h-12 [&_[cmdk-item]]:px-2 [&_[cmdk-item]]:py-3 [&_[cmdk-item]_svg]:h-5 [&_[cmdk-item]_svg]:w-5\">\n          {children}\n        </Command>\n      </DialogContent>\n    </Dialog>\n  )\n}\n\nconst CommandInput = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Input>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Input>\n>(({ className, ...props }, ref) => (\n  <div className=\"flex items-center border-b px-3\" cmdk-input-wrapper=\"\">\n    <Search className=\"mr-2 h-4 w-4 shrink-0 opacity-50\" />\n    <CommandPrimitive.Input\n      ref={ref}\n      className={cn(\n        \"flex h-11 w-full rounded-md bg-transparent py-3 text-sm outline-none placeholder:text-muted-foreground disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    />\n  </div>\n))\n\nCommandInput.displayName = CommandPrimitive.Input.displayName\n\nconst CommandList = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.List\n    ref={ref}\n    className={cn(\"max-h-[300px] overflow-y-auto overflow-x-hidden\", className)}\n    {...props}\n  />\n))\n\nCommandList.displayName = CommandPrimitive.List.displayName\n\nconst CommandEmpty = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Empty>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Empty>\n>((props, ref) => (\n  <CommandPrimitive.Empty\n    ref={ref}\n    className=\"py-6 text-center text-sm\"\n    {...props}\n  />\n))\n\nCommandEmpty.displayName = CommandPrimitive.Empty.displayName\n\nconst CommandGroup = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Group>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Group>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Group\n    ref={ref}\n    className={cn(\n      \"overflow-hidden p-1 text-foreground [&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:py-1.5 [&_[cmdk-group-heading]]:text-xs [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandGroup.displayName = CommandPrimitive.Group.displayName\n\nconst CommandSeparator = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nCommandSeparator.displayName = CommandPrimitive.Separator.displayName\n\nconst CommandItem = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default gap-2 select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none data-[disabled=true]:pointer-events-none data-[selected='true']:bg-accent data-[selected=true]:text-accent-foreground data-[disabled=true]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandItem.displayName = CommandPrimitive.Item.displayName\n\nconst CommandShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nCommandShortcut.displayName = \"CommandShortcut\"\n\nexport {\n  Command,\n  CommandDialog,\n  CommandInput,\n  CommandList,\n  CommandEmpty,\n  CommandGroup,\n  CommandItem,\n  CommandShortcut,\n  CommandSeparator,\n}\n","size_bytes":4885},"client/src/components/ui/context-menu.tsx":{"content":"import * as React from \"react\"\nimport * as ContextMenuPrimitive from \"@radix-ui/react-context-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ContextMenu = ContextMenuPrimitive.Root\n\nconst ContextMenuTrigger = ContextMenuPrimitive.Trigger\n\nconst ContextMenuGroup = ContextMenuPrimitive.Group\n\nconst ContextMenuPortal = ContextMenuPrimitive.Portal\n\nconst ContextMenuSub = ContextMenuPrimitive.Sub\n\nconst ContextMenuRadioGroup = ContextMenuPrimitive.RadioGroup\n\nconst ContextMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <ContextMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </ContextMenuPrimitive.SubTrigger>\n))\nContextMenuSubTrigger.displayName = ContextMenuPrimitive.SubTrigger.displayName\n\nconst ContextMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuSubContent.displayName = ContextMenuPrimitive.SubContent.displayName\n\nconst ContextMenuContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Portal>\n    <ContextMenuPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"z-50 max-h-[--radix-context-menu-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md animate-in fade-in-80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </ContextMenuPrimitive.Portal>\n))\nContextMenuContent.displayName = ContextMenuPrimitive.Content.displayName\n\nconst ContextMenuItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuItem.displayName = ContextMenuPrimitive.Item.displayName\n\nconst ContextMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <ContextMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.CheckboxItem>\n))\nContextMenuCheckboxItem.displayName =\n  ContextMenuPrimitive.CheckboxItem.displayName\n\nconst ContextMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <ContextMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.RadioItem>\n))\nContextMenuRadioItem.displayName = ContextMenuPrimitive.RadioItem.displayName\n\nconst ContextMenuLabel = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold text-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuLabel.displayName = ContextMenuPrimitive.Label.displayName\n\nconst ContextMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nContextMenuSeparator.displayName = ContextMenuPrimitive.Separator.displayName\n\nconst ContextMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nContextMenuShortcut.displayName = \"ContextMenuShortcut\"\n\nexport {\n  ContextMenu,\n  ContextMenuTrigger,\n  ContextMenuContent,\n  ContextMenuItem,\n  ContextMenuCheckboxItem,\n  ContextMenuRadioItem,\n  ContextMenuLabel,\n  ContextMenuSeparator,\n  ContextMenuShortcut,\n  ContextMenuGroup,\n  ContextMenuPortal,\n  ContextMenuSub,\n  ContextMenuSubContent,\n  ContextMenuSubTrigger,\n  ContextMenuRadioGroup,\n}\n","size_bytes":7428},"client/src/components/ui/dialog.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as DialogPrimitive from \"@radix-ui/react-dialog\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Dialog = DialogPrimitive.Root\n\nconst DialogTrigger = DialogPrimitive.Trigger\n\nconst DialogPortal = DialogPrimitive.Portal\n\nconst DialogClose = DialogPrimitive.Close\n\nconst DialogOverlay = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Overlay\n    ref={ref}\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogOverlay.displayName = DialogPrimitive.Overlay.displayName\n\nconst DialogContent = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DialogPortal>\n    <DialogOverlay />\n    <DialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <DialogPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-accent data-[state=open]:text-muted-foreground\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </DialogPrimitive.Close>\n    </DialogPrimitive.Content>\n  </DialogPortal>\n))\nDialogContent.displayName = DialogPrimitive.Content.displayName\n\nconst DialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-1.5 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogHeader.displayName = \"DialogHeader\"\n\nconst DialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogFooter.displayName = \"DialogFooter\"\n\nconst DialogTitle = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogTitle.displayName = DialogPrimitive.Title.displayName\n\nconst DialogDescription = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDialogDescription.displayName = DialogPrimitive.Description.displayName\n\nexport {\n  Dialog,\n  DialogPortal,\n  DialogOverlay,\n  DialogClose,\n  DialogTrigger,\n  DialogContent,\n  DialogHeader,\n  DialogFooter,\n  DialogTitle,\n  DialogDescription,\n}\n","size_bytes":3848},"client/src/components/ui/drawer.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport { Drawer as DrawerPrimitive } from \"vaul\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Drawer = ({\n  shouldScaleBackground = true,\n  ...props\n}: React.ComponentProps<typeof DrawerPrimitive.Root>) => (\n  <DrawerPrimitive.Root\n    shouldScaleBackground={shouldScaleBackground}\n    {...props}\n  />\n)\nDrawer.displayName = \"Drawer\"\n\nconst DrawerTrigger = DrawerPrimitive.Trigger\n\nconst DrawerPortal = DrawerPrimitive.Portal\n\nconst DrawerClose = DrawerPrimitive.Close\n\nconst DrawerOverlay = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Overlay\n    ref={ref}\n    className={cn(\"fixed inset-0 z-50 bg-black/80\", className)}\n    {...props}\n  />\n))\nDrawerOverlay.displayName = DrawerPrimitive.Overlay.displayName\n\nconst DrawerContent = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DrawerPortal>\n    <DrawerOverlay />\n    <DrawerPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed inset-x-0 bottom-0 z-50 mt-24 flex h-auto flex-col rounded-t-[10px] border bg-background\",\n        className\n      )}\n      {...props}\n    >\n      <div className=\"mx-auto mt-4 h-2 w-[100px] rounded-full bg-muted\" />\n      {children}\n    </DrawerPrimitive.Content>\n  </DrawerPortal>\n))\nDrawerContent.displayName = \"DrawerContent\"\n\nconst DrawerHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"grid gap-1.5 p-4 text-center sm:text-left\", className)}\n    {...props}\n  />\n)\nDrawerHeader.displayName = \"DrawerHeader\"\n\nconst DrawerFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"mt-auto flex flex-col gap-2 p-4\", className)}\n    {...props}\n  />\n)\nDrawerFooter.displayName = \"DrawerFooter\"\n\nconst DrawerTitle = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDrawerTitle.displayName = DrawerPrimitive.Title.displayName\n\nconst DrawerDescription = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDrawerDescription.displayName = DrawerPrimitive.Description.displayName\n\nexport {\n  Drawer,\n  DrawerPortal,\n  DrawerOverlay,\n  DrawerTrigger,\n  DrawerClose,\n  DrawerContent,\n  DrawerHeader,\n  DrawerFooter,\n  DrawerTitle,\n  DrawerDescription,\n}\n","size_bytes":3021},"client/src/components/ui/dropdown-menu.tsx":{"content":"import * as React from \"react\"\nimport * as DropdownMenuPrimitive from \"@radix-ui/react-dropdown-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst DropdownMenu = DropdownMenuPrimitive.Root\n\nconst DropdownMenuTrigger = DropdownMenuPrimitive.Trigger\n\nconst DropdownMenuGroup = DropdownMenuPrimitive.Group\n\nconst DropdownMenuPortal = DropdownMenuPrimitive.Portal\n\nconst DropdownMenuSub = DropdownMenuPrimitive.Sub\n\nconst DropdownMenuRadioGroup = DropdownMenuPrimitive.RadioGroup\n\nconst DropdownMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent data-[state=open]:bg-accent [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto\" />\n  </DropdownMenuPrimitive.SubTrigger>\n))\nDropdownMenuSubTrigger.displayName =\n  DropdownMenuPrimitive.SubTrigger.displayName\n\nconst DropdownMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuSubContent.displayName =\n  DropdownMenuPrimitive.SubContent.displayName\n\nconst DropdownMenuContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <DropdownMenuPrimitive.Portal>\n    <DropdownMenuPrimitive.Content\n      ref={ref}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 max-h-[var(--radix-dropdown-menu-content-available-height)] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </DropdownMenuPrimitive.Portal>\n))\nDropdownMenuContent.displayName = DropdownMenuPrimitive.Content.displayName\n\nconst DropdownMenuItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuItem.displayName = DropdownMenuPrimitive.Item.displayName\n\nconst DropdownMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <DropdownMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.CheckboxItem>\n))\nDropdownMenuCheckboxItem.displayName =\n  DropdownMenuPrimitive.CheckboxItem.displayName\n\nconst DropdownMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.RadioItem>\n))\nDropdownMenuRadioItem.displayName = DropdownMenuPrimitive.RadioItem.displayName\n\nconst DropdownMenuLabel = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuLabel.displayName = DropdownMenuPrimitive.Label.displayName\n\nconst DropdownMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nDropdownMenuSeparator.displayName = DropdownMenuPrimitive.Separator.displayName\n\nconst DropdownMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\"ml-auto text-xs tracking-widest opacity-60\", className)}\n      {...props}\n    />\n  )\n}\nDropdownMenuShortcut.displayName = \"DropdownMenuShortcut\"\n\nexport {\n  DropdownMenu,\n  DropdownMenuTrigger,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuCheckboxItem,\n  DropdownMenuRadioItem,\n  DropdownMenuLabel,\n  DropdownMenuSeparator,\n  DropdownMenuShortcut,\n  DropdownMenuGroup,\n  DropdownMenuPortal,\n  DropdownMenuSub,\n  DropdownMenuSubContent,\n  DropdownMenuSubTrigger,\n  DropdownMenuRadioGroup,\n}\n","size_bytes":7609},"client/src/components/ui/form.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport {\n  Controller,\n  ControllerProps,\n  FieldPath,\n  FieldValues,\n  FormProvider,\n  useFormContext,\n} from \"react-hook-form\"\nimport { cn } from \"@/lib/utils\"\nimport { Label } from \"@/components/ui/label\"\n\nconst Form = FormProvider\n\ntype FormFieldContextValue<\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n> = {\n  name: TName\n}\n\nconst FormFieldContext = React.createContext<FormFieldContextValue>(\n  {} as FormFieldContextValue\n)\n\nconst FormField = <\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n>({\n  ...props\n}: ControllerProps<TFieldValues, TName>) => {\n  return (\n    <FormFieldContext.Provider value={{ name: props.name }}>\n      <Controller {...props} />\n    </FormFieldContext.Provider>\n  )\n}\n\nconst useFormField = () => {\n  const fieldContext = React.useContext(FormFieldContext)\n  const itemContext = React.useContext(FormItemContext)\n  const { getFieldState, formState } = useFormContext()\n\n  const fieldState = getFieldState(fieldContext.name, formState)\n\n  if (!fieldContext) {\n    throw new Error(\"useFormField should be used within <FormField>\")\n  }\n\n  const { id } = itemContext\n\n  return {\n    id,\n    name: fieldContext.name,\n    formItemId: `${id}-form-item`,\n    formDescriptionId: `${id}-form-item-description`,\n    formMessageId: `${id}-form-item-message`,\n    ...fieldState,\n  }\n}\n\ntype FormItemContextValue = {\n  id: string\n}\n\nconst FormItemContext = React.createContext<FormItemContextValue>(\n  {} as FormItemContextValue\n)\n\nconst FormItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const id = React.useId()\n\n  return (\n    <FormItemContext.Provider value={{ id }}>\n      <div ref={ref} className={cn(\"space-y-2\", className)} {...props} />\n    </FormItemContext.Provider>\n  )\n})\nFormItem.displayName = \"FormItem\"\n\nconst FormLabel = React.forwardRef<\n  React.ElementRef<typeof Label>,\n  React.ComponentPropsWithoutRef<typeof Label>\n>(({ className, ...props }, ref) => {\n  const { error, formItemId } = useFormField()\n\n  return (\n    <Label\n      ref={ref}\n      className={cn(error && \"text-destructive\", className)}\n      htmlFor={formItemId}\n      {...props}\n    />\n  )\n})\nFormLabel.displayName = \"FormLabel\"\n\nconst FormControl = React.forwardRef<\n  React.ElementRef<typeof Slot>,\n  React.ComponentPropsWithoutRef<typeof Slot>\n>(({ ...props }, ref) => {\n  const { error, formItemId, formDescriptionId, formMessageId } = useFormField()\n\n  return (\n    <Slot\n      ref={ref}\n      id={formItemId}\n      aria-describedby={\n        !error\n          ? `${formDescriptionId}`\n          : `${formDescriptionId} ${formMessageId}`\n      }\n      aria-invalid={!!error}\n      {...props}\n    />\n  )\n})\nFormControl.displayName = \"FormControl\"\n\nconst FormDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => {\n  const { formDescriptionId } = useFormField()\n\n  return (\n    <p\n      ref={ref}\n      id={formDescriptionId}\n      className={cn(\"text-sm text-muted-foreground\", className)}\n      {...props}\n    />\n  )\n})\nFormDescription.displayName = \"FormDescription\"\n\nconst FormMessage = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, children, ...props }, ref) => {\n  const { error, formMessageId } = useFormField()\n  const body = error ? String(error?.message) : children\n\n  if (!body) {\n    return null\n  }\n\n  return (\n    <p\n      ref={ref}\n      id={formMessageId}\n      className={cn(\"text-sm font-medium text-destructive\", className)}\n      {...props}\n    >\n      {body}\n    </p>\n  )\n})\nFormMessage.displayName = \"FormMessage\"\n\nexport {\n  useFormField,\n  Form,\n  FormItem,\n  FormLabel,\n  FormControl,\n  FormDescription,\n  FormMessage,\n  FormField,\n}\n","size_bytes":4000},"client/src/components/ui/hover-card.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as HoverCardPrimitive from \"@radix-ui/react-hover-card\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst HoverCard = HoverCardPrimitive.Root\n\nconst HoverCardTrigger = HoverCardPrimitive.Trigger\n\nconst HoverCardContent = React.forwardRef<\n  React.ElementRef<typeof HoverCardPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof HoverCardPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <HoverCardPrimitive.Content\n    ref={ref}\n    align={align}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 w-64 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-hover-card-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nHoverCardContent.displayName = HoverCardPrimitive.Content.displayName\n\nexport { HoverCard, HoverCardTrigger, HoverCardContent }\n","size_bytes":1251},"client/src/components/ui/input-otp.tsx":{"content":"import * as React from \"react\"\nimport { OTPInput, OTPInputContext } from \"input-otp\"\nimport { Dot } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst InputOTP = React.forwardRef<\n  React.ElementRef<typeof OTPInput>,\n  React.ComponentPropsWithoutRef<typeof OTPInput>\n>(({ className, containerClassName, ...props }, ref) => (\n  <OTPInput\n    ref={ref}\n    containerClassName={cn(\n      \"flex items-center gap-2 has-[:disabled]:opacity-50\",\n      containerClassName\n    )}\n    className={cn(\"disabled:cursor-not-allowed\", className)}\n    {...props}\n  />\n))\nInputOTP.displayName = \"InputOTP\"\n\nconst InputOTPGroup = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"flex items-center\", className)} {...props} />\n))\nInputOTPGroup.displayName = \"InputOTPGroup\"\n\nconst InputOTPSlot = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\"> & { index: number }\n>(({ index, className, ...props }, ref) => {\n  const inputOTPContext = React.useContext(OTPInputContext)\n  const { char, hasFakeCaret, isActive } = inputOTPContext.slots[index]\n\n  return (\n    <div\n      ref={ref}\n      className={cn(\n        \"relative flex h-10 w-10 items-center justify-center border-y border-r border-input text-sm transition-all first:rounded-l-md first:border-l last:rounded-r-md\",\n        isActive && \"z-10 ring-2 ring-ring ring-offset-background\",\n        className\n      )}\n      {...props}\n    >\n      {char}\n      {hasFakeCaret && (\n        <div className=\"pointer-events-none absolute inset-0 flex items-center justify-center\">\n          <div className=\"h-4 w-px animate-caret-blink bg-foreground duration-1000\" />\n        </div>\n      )}\n    </div>\n  )\n})\nInputOTPSlot.displayName = \"InputOTPSlot\"\n\nconst InputOTPSeparator = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ ...props }, ref) => (\n  <div ref={ref} role=\"separator\" {...props}>\n    <Dot />\n  </div>\n))\nInputOTPSeparator.displayName = \"InputOTPSeparator\"\n\nexport { InputOTP, InputOTPGroup, InputOTPSlot, InputOTPSeparator }\n","size_bytes":2154},"client/src/components/ui/input.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Input = React.forwardRef<HTMLInputElement, React.ComponentProps<\"input\">>(\n  ({ className, type, ...props }, ref) => {\n    return (\n      <input\n        type={type}\n        className={cn(\n          \"flex h-10 w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background file:border-0 file:bg-transparent file:text-sm file:font-medium file:text-foreground placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n          className\n        )}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nInput.displayName = \"Input\"\n\nexport { Input }\n","size_bytes":791},"client/src/components/ui/label.tsx":{"content":"import * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst labelVariants = cva(\n  \"text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70\"\n)\n\nconst Label = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root> &\n    VariantProps<typeof labelVariants>\n>(({ className, ...props }, ref) => (\n  <LabelPrimitive.Root\n    ref={ref}\n    className={cn(labelVariants(), className)}\n    {...props}\n  />\n))\nLabel.displayName = LabelPrimitive.Root.displayName\n\nexport { Label }\n","size_bytes":710},"client/src/components/ui/menubar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as MenubarPrimitive from \"@radix-ui/react-menubar\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nfunction MenubarMenu({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Menu>) {\n  return <MenubarPrimitive.Menu {...props} />\n}\n\nfunction MenubarGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Group>) {\n  return <MenubarPrimitive.Group {...props} />\n}\n\nfunction MenubarPortal({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Portal>) {\n  return <MenubarPrimitive.Portal {...props} />\n}\n\nfunction MenubarRadioGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.RadioGroup>) {\n  return <MenubarPrimitive.RadioGroup {...props} />\n}\n\nfunction MenubarSub({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Sub>) {\n  return <MenubarPrimitive.Sub data-slot=\"menubar-sub\" {...props} />\n}\n\nconst Menubar = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"flex h-10 items-center space-x-1 rounded-md border bg-background p-1\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubar.displayName = MenubarPrimitive.Root.displayName\n\nconst MenubarTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-3 py-1.5 text-sm font-medium outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarTrigger.displayName = MenubarPrimitive.Trigger.displayName\n\nconst MenubarSubTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <MenubarPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </MenubarPrimitive.SubTrigger>\n))\nMenubarSubTrigger.displayName = MenubarPrimitive.SubTrigger.displayName\n\nconst MenubarSubContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarSubContent.displayName = MenubarPrimitive.SubContent.displayName\n\nconst MenubarContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Content>\n>(\n  (\n    { className, align = \"start\", alignOffset = -4, sideOffset = 8, ...props },\n    ref\n  ) => (\n    <MenubarPrimitive.Portal>\n      <MenubarPrimitive.Content\n        ref={ref}\n        align={align}\n        alignOffset={alignOffset}\n        sideOffset={sideOffset}\n        className={cn(\n          \"z-50 min-w-[12rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n          className\n        )}\n        {...props}\n      />\n    </MenubarPrimitive.Portal>\n  )\n)\nMenubarContent.displayName = MenubarPrimitive.Content.displayName\n\nconst MenubarItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarItem.displayName = MenubarPrimitive.Item.displayName\n\nconst MenubarCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <MenubarPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.CheckboxItem>\n))\nMenubarCheckboxItem.displayName = MenubarPrimitive.CheckboxItem.displayName\n\nconst MenubarRadioItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <MenubarPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.RadioItem>\n))\nMenubarRadioItem.displayName = MenubarPrimitive.RadioItem.displayName\n\nconst MenubarLabel = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarLabel.displayName = MenubarPrimitive.Label.displayName\n\nconst MenubarSeparator = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nMenubarSeparator.displayName = MenubarPrimitive.Separator.displayName\n\nconst MenubarShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nMenubarShortcut.displayname = \"MenubarShortcut\"\n\nexport {\n  Menubar,\n  MenubarMenu,\n  MenubarTrigger,\n  MenubarContent,\n  MenubarItem,\n  MenubarSeparator,\n  MenubarLabel,\n  MenubarCheckboxItem,\n  MenubarRadioGroup,\n  MenubarRadioItem,\n  MenubarPortal,\n  MenubarSubContent,\n  MenubarSubTrigger,\n  MenubarGroup,\n  MenubarSub,\n  MenubarShortcut,\n}\n","size_bytes":8605},"client/src/components/ui/navigation-menu.tsx":{"content":"import * as React from \"react\"\nimport * as NavigationMenuPrimitive from \"@radix-ui/react-navigation-menu\"\nimport { cva } from \"class-variance-authority\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst NavigationMenu = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative z-10 flex max-w-max flex-1 items-center justify-center\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <NavigationMenuViewport />\n  </NavigationMenuPrimitive.Root>\n))\nNavigationMenu.displayName = NavigationMenuPrimitive.Root.displayName\n\nconst NavigationMenuList = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.List\n    ref={ref}\n    className={cn(\n      \"group flex flex-1 list-none items-center justify-center space-x-1\",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuList.displayName = NavigationMenuPrimitive.List.displayName\n\nconst NavigationMenuItem = NavigationMenuPrimitive.Item\n\nconst navigationMenuTriggerStyle = cva(\n  \"group inline-flex h-10 w-max items-center justify-center rounded-md bg-background px-4 py-2 text-sm font-medium transition-colors hover:bg-accent hover:text-accent-foreground focus:bg-accent focus:text-accent-foreground focus:outline-none disabled:pointer-events-none disabled:opacity-50 data-[state=open]:text-accent-foreground data-[state=open]:bg-accent/50 data-[state=open]:hover:bg-accent data-[state=open]:focus:bg-accent\"\n)\n\nconst NavigationMenuTrigger = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Trigger\n    ref={ref}\n    className={cn(navigationMenuTriggerStyle(), \"group\", className)}\n    {...props}\n  >\n    {children}{\" \"}\n    <ChevronDown\n      className=\"relative top-[1px] ml-1 h-3 w-3 transition duration-200 group-data-[state=open]:rotate-180\"\n      aria-hidden=\"true\"\n    />\n  </NavigationMenuPrimitive.Trigger>\n))\nNavigationMenuTrigger.displayName = NavigationMenuPrimitive.Trigger.displayName\n\nconst NavigationMenuContent = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"left-0 top-0 w-full data-[motion^=from-]:animate-in data-[motion^=to-]:animate-out data-[motion^=from-]:fade-in data-[motion^=to-]:fade-out data-[motion=from-end]:slide-in-from-right-52 data-[motion=from-start]:slide-in-from-left-52 data-[motion=to-end]:slide-out-to-right-52 data-[motion=to-start]:slide-out-to-left-52 md:absolute md:w-auto \",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuContent.displayName = NavigationMenuPrimitive.Content.displayName\n\nconst NavigationMenuLink = NavigationMenuPrimitive.Link\n\nconst NavigationMenuViewport = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Viewport>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Viewport>\n>(({ className, ...props }, ref) => (\n  <div className={cn(\"absolute left-0 top-full flex justify-center\")}>\n    <NavigationMenuPrimitive.Viewport\n      className={cn(\n        \"origin-top-center relative mt-1.5 h-[var(--radix-navigation-menu-viewport-height)] w-full overflow-hidden rounded-md border bg-popover text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-90 md:w-[var(--radix-navigation-menu-viewport-width)]\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  </div>\n))\nNavigationMenuViewport.displayName =\n  NavigationMenuPrimitive.Viewport.displayName\n\nconst NavigationMenuIndicator = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Indicator>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Indicator>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Indicator\n    ref={ref}\n    className={cn(\n      \"top-full z-[1] flex h-1.5 items-end justify-center overflow-hidden data-[state=visible]:animate-in data-[state=hidden]:animate-out data-[state=hidden]:fade-out data-[state=visible]:fade-in\",\n      className\n    )}\n    {...props}\n  >\n    <div className=\"relative top-[60%] h-2 w-2 rotate-45 rounded-tl-sm bg-border shadow-md\" />\n  </NavigationMenuPrimitive.Indicator>\n))\nNavigationMenuIndicator.displayName =\n  NavigationMenuPrimitive.Indicator.displayName\n\nexport {\n  navigationMenuTriggerStyle,\n  NavigationMenu,\n  NavigationMenuList,\n  NavigationMenuItem,\n  NavigationMenuContent,\n  NavigationMenuTrigger,\n  NavigationMenuLink,\n  NavigationMenuIndicator,\n  NavigationMenuViewport,\n}\n","size_bytes":5128},"client/src/components/ui/pagination.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { ButtonProps, buttonVariants } from \"@/components/ui/button\"\n\nconst Pagination = ({ className, ...props }: React.ComponentProps<\"nav\">) => (\n  <nav\n    role=\"navigation\"\n    aria-label=\"pagination\"\n    className={cn(\"mx-auto flex w-full justify-center\", className)}\n    {...props}\n  />\n)\nPagination.displayName = \"Pagination\"\n\nconst PaginationContent = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    className={cn(\"flex flex-row items-center gap-1\", className)}\n    {...props}\n  />\n))\nPaginationContent.displayName = \"PaginationContent\"\n\nconst PaginationItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li ref={ref} className={cn(\"\", className)} {...props} />\n))\nPaginationItem.displayName = \"PaginationItem\"\n\ntype PaginationLinkProps = {\n  isActive?: boolean\n} & Pick<ButtonProps, \"size\"> &\n  React.ComponentProps<\"a\">\n\nconst PaginationLink = ({\n  className,\n  isActive,\n  size = \"icon\",\n  ...props\n}: PaginationLinkProps) => (\n  <a\n    aria-current={isActive ? \"page\" : undefined}\n    className={cn(\n      buttonVariants({\n        variant: isActive ? \"outline\" : \"ghost\",\n        size,\n      }),\n      className\n    )}\n    {...props}\n  />\n)\nPaginationLink.displayName = \"PaginationLink\"\n\nconst PaginationPrevious = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to previous page\"\n    size=\"default\"\n    className={cn(\"gap-1 pl-2.5\", className)}\n    {...props}\n  >\n    <ChevronLeft className=\"h-4 w-4\" />\n    <span>Previous</span>\n  </PaginationLink>\n)\nPaginationPrevious.displayName = \"PaginationPrevious\"\n\nconst PaginationNext = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to next page\"\n    size=\"default\"\n    className={cn(\"gap-1 pr-2.5\", className)}\n    {...props}\n  >\n    <span>Next</span>\n    <ChevronRight className=\"h-4 w-4\" />\n  </PaginationLink>\n)\nPaginationNext.displayName = \"PaginationNext\"\n\nconst PaginationEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    aria-hidden\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More pages</span>\n  </span>\n)\nPaginationEllipsis.displayName = \"PaginationEllipsis\"\n\nexport {\n  Pagination,\n  PaginationContent,\n  PaginationEllipsis,\n  PaginationItem,\n  PaginationLink,\n  PaginationNext,\n  PaginationPrevious,\n}\n","size_bytes":2751},"client/src/components/ui/popover.tsx":{"content":"import * as React from \"react\"\nimport * as PopoverPrimitive from \"@radix-ui/react-popover\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Popover = PopoverPrimitive.Root\n\nconst PopoverTrigger = PopoverPrimitive.Trigger\n\nconst PopoverContent = React.forwardRef<\n  React.ElementRef<typeof PopoverPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof PopoverPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <PopoverPrimitive.Portal>\n    <PopoverPrimitive.Content\n      ref={ref}\n      align={align}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 w-72 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-popover-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </PopoverPrimitive.Portal>\n))\nPopoverContent.displayName = PopoverPrimitive.Content.displayName\n\nexport { Popover, PopoverTrigger, PopoverContent }\n","size_bytes":1280},"client/src/components/ui/progress.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ProgressPrimitive from \"@radix-ui/react-progress\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Progress = React.forwardRef<\n  React.ElementRef<typeof ProgressPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ProgressPrimitive.Root>\n>(({ className, value, ...props }, ref) => (\n  <ProgressPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative h-4 w-full overflow-hidden rounded-full bg-secondary\",\n      className\n    )}\n    {...props}\n  >\n    <ProgressPrimitive.Indicator\n      className=\"h-full w-full flex-1 bg-primary transition-all\"\n      style={{ transform: `translateX(-${100 - (value || 0)}%)` }}\n    />\n  </ProgressPrimitive.Root>\n))\nProgress.displayName = ProgressPrimitive.Root.displayName\n\nexport { Progress }\n","size_bytes":791},"client/src/components/ui/radio-group.tsx":{"content":"import * as React from \"react\"\nimport * as RadioGroupPrimitive from \"@radix-ui/react-radio-group\"\nimport { Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst RadioGroup = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Root\n      className={cn(\"grid gap-2\", className)}\n      {...props}\n      ref={ref}\n    />\n  )\n})\nRadioGroup.displayName = RadioGroupPrimitive.Root.displayName\n\nconst RadioGroupItem = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Item>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        \"aspect-square h-4 w-4 rounded-full border border-primary text-primary ring-offset-background focus:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    >\n      <RadioGroupPrimitive.Indicator className=\"flex items-center justify-center\">\n        <Circle className=\"h-2.5 w-2.5 fill-current text-current\" />\n      </RadioGroupPrimitive.Indicator>\n    </RadioGroupPrimitive.Item>\n  )\n})\nRadioGroupItem.displayName = RadioGroupPrimitive.Item.displayName\n\nexport { RadioGroup, RadioGroupItem }\n","size_bytes":1467},"client/src/components/ui/resizable.tsx":{"content":"\"use client\"\n\nimport { GripVertical } from \"lucide-react\"\nimport * as ResizablePrimitive from \"react-resizable-panels\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ResizablePanelGroup = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelGroup>) => (\n  <ResizablePrimitive.PanelGroup\n    className={cn(\n      \"flex h-full w-full data-[panel-group-direction=vertical]:flex-col\",\n      className\n    )}\n    {...props}\n  />\n)\n\nconst ResizablePanel = ResizablePrimitive.Panel\n\nconst ResizableHandle = ({\n  withHandle,\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelResizeHandle> & {\n  withHandle?: boolean\n}) => (\n  <ResizablePrimitive.PanelResizeHandle\n    className={cn(\n      \"relative flex w-px items-center justify-center bg-border after:absolute after:inset-y-0 after:left-1/2 after:w-1 after:-translate-x-1/2 focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring focus-visible:ring-offset-1 data-[panel-group-direction=vertical]:h-px data-[panel-group-direction=vertical]:w-full data-[panel-group-direction=vertical]:after:left-0 data-[panel-group-direction=vertical]:after:h-1 data-[panel-group-direction=vertical]:after:w-full data-[panel-group-direction=vertical]:after:-translate-y-1/2 data-[panel-group-direction=vertical]:after:translate-x-0 [&[data-panel-group-direction=vertical]>div]:rotate-90\",\n      className\n    )}\n    {...props}\n  >\n    {withHandle && (\n      <div className=\"z-10 flex h-4 w-3 items-center justify-center rounded-sm border bg-border\">\n        <GripVertical className=\"h-2.5 w-2.5\" />\n      </div>\n    )}\n  </ResizablePrimitive.PanelResizeHandle>\n)\n\nexport { ResizablePanelGroup, ResizablePanel, ResizableHandle }\n","size_bytes":1723},"client/src/components/ui/scroll-area.tsx":{"content":"import * as React from \"react\"\nimport * as ScrollAreaPrimitive from \"@radix-ui/react-scroll-area\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ScrollArea = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <ScrollAreaPrimitive.Root\n    ref={ref}\n    className={cn(\"relative overflow-hidden\", className)}\n    {...props}\n  >\n    <ScrollAreaPrimitive.Viewport className=\"h-full w-full rounded-[inherit]\">\n      {children}\n    </ScrollAreaPrimitive.Viewport>\n    <ScrollBar />\n    <ScrollAreaPrimitive.Corner />\n  </ScrollAreaPrimitive.Root>\n))\nScrollArea.displayName = ScrollAreaPrimitive.Root.displayName\n\nconst ScrollBar = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>\n>(({ className, orientation = \"vertical\", ...props }, ref) => (\n  <ScrollAreaPrimitive.ScrollAreaScrollbar\n    ref={ref}\n    orientation={orientation}\n    className={cn(\n      \"flex touch-none select-none transition-colors\",\n      orientation === \"vertical\" &&\n        \"h-full w-2.5 border-l border-l-transparent p-[1px]\",\n      orientation === \"horizontal\" &&\n        \"h-2.5 flex-col border-t border-t-transparent p-[1px]\",\n      className\n    )}\n    {...props}\n  >\n    <ScrollAreaPrimitive.ScrollAreaThumb className=\"relative flex-1 rounded-full bg-border\" />\n  </ScrollAreaPrimitive.ScrollAreaScrollbar>\n))\nScrollBar.displayName = ScrollAreaPrimitive.ScrollAreaScrollbar.displayName\n\nexport { ScrollArea, ScrollBar }\n","size_bytes":1642},"client/src/components/ui/select.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SelectPrimitive from \"@radix-ui/react-select\"\nimport { Check, ChevronDown, ChevronUp } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Select = SelectPrimitive.Root\n\nconst SelectGroup = SelectPrimitive.Group\n\nconst SelectValue = SelectPrimitive.Value\n\nconst SelectTrigger = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex h-10 w-full items-center justify-between rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background data-[placeholder]:text-muted-foreground focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 [&>span]:line-clamp-1\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <SelectPrimitive.Icon asChild>\n      <ChevronDown className=\"h-4 w-4 opacity-50\" />\n    </SelectPrimitive.Icon>\n  </SelectPrimitive.Trigger>\n))\nSelectTrigger.displayName = SelectPrimitive.Trigger.displayName\n\nconst SelectScrollUpButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollUpButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollUpButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollUpButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronUp className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollUpButton>\n))\nSelectScrollUpButton.displayName = SelectPrimitive.ScrollUpButton.displayName\n\nconst SelectScrollDownButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollDownButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollDownButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollDownButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronDown className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollDownButton>\n))\nSelectScrollDownButton.displayName =\n  SelectPrimitive.ScrollDownButton.displayName\n\nconst SelectContent = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Content>\n>(({ className, children, position = \"popper\", ...props }, ref) => (\n  <SelectPrimitive.Portal>\n    <SelectPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"relative z-50 max-h-[--radix-select-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-select-content-transform-origin]\",\n        position === \"popper\" &&\n          \"data-[side=bottom]:translate-y-1 data-[side=left]:-translate-x-1 data-[side=right]:translate-x-1 data-[side=top]:-translate-y-1\",\n        className\n      )}\n      position={position}\n      {...props}\n    >\n      <SelectScrollUpButton />\n      <SelectPrimitive.Viewport\n        className={cn(\n          \"p-1\",\n          position === \"popper\" &&\n            \"h-[var(--radix-select-trigger-height)] w-full min-w-[var(--radix-select-trigger-width)]\"\n        )}\n      >\n        {children}\n      </SelectPrimitive.Viewport>\n      <SelectScrollDownButton />\n    </SelectPrimitive.Content>\n  </SelectPrimitive.Portal>\n))\nSelectContent.displayName = SelectPrimitive.Content.displayName\n\nconst SelectLabel = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Label>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Label\n    ref={ref}\n    className={cn(\"py-1.5 pl-8 pr-2 text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nSelectLabel.displayName = SelectPrimitive.Label.displayName\n\nconst SelectItem = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Item>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex w-full cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <SelectPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </SelectPrimitive.ItemIndicator>\n    </span>\n\n    <SelectPrimitive.ItemText>{children}</SelectPrimitive.ItemText>\n  </SelectPrimitive.Item>\n))\nSelectItem.displayName = SelectPrimitive.Item.displayName\n\nconst SelectSeparator = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nSelectSeparator.displayName = SelectPrimitive.Separator.displayName\n\nexport {\n  Select,\n  SelectGroup,\n  SelectValue,\n  SelectTrigger,\n  SelectContent,\n  SelectLabel,\n  SelectItem,\n  SelectSeparator,\n  SelectScrollUpButton,\n  SelectScrollDownButton,\n}\n","size_bytes":5742},"client/src/components/ui/separator.tsx":{"content":"import * as React from \"react\"\nimport * as SeparatorPrimitive from \"@radix-ui/react-separator\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Separator = React.forwardRef<\n  React.ElementRef<typeof SeparatorPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SeparatorPrimitive.Root>\n>(\n  (\n    { className, orientation = \"horizontal\", decorative = true, ...props },\n    ref\n  ) => (\n    <SeparatorPrimitive.Root\n      ref={ref}\n      decorative={decorative}\n      orientation={orientation}\n      className={cn(\n        \"shrink-0 bg-border\",\n        orientation === \"horizontal\" ? \"h-[1px] w-full\" : \"h-full w-[1px]\",\n        className\n      )}\n      {...props}\n    />\n  )\n)\nSeparator.displayName = SeparatorPrimitive.Root.displayName\n\nexport { Separator }\n","size_bytes":756},"client/src/components/ui/sheet.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SheetPrimitive from \"@radix-ui/react-dialog\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Sheet = SheetPrimitive.Root\n\nconst SheetTrigger = SheetPrimitive.Trigger\n\nconst SheetClose = SheetPrimitive.Close\n\nconst SheetPortal = SheetPrimitive.Portal\n\nconst SheetOverlay = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nSheetOverlay.displayName = SheetPrimitive.Overlay.displayName\n\nconst sheetVariants = cva(\n  \"fixed z-50 gap-4 bg-background p-6 shadow-lg transition ease-in-out data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:duration-300 data-[state=open]:duration-500\",\n  {\n    variants: {\n      side: {\n        top: \"inset-x-0 top-0 border-b data-[state=closed]:slide-out-to-top data-[state=open]:slide-in-from-top\",\n        bottom:\n          \"inset-x-0 bottom-0 border-t data-[state=closed]:slide-out-to-bottom data-[state=open]:slide-in-from-bottom\",\n        left: \"inset-y-0 left-0 h-full w-3/4 border-r data-[state=closed]:slide-out-to-left data-[state=open]:slide-in-from-left sm:max-w-sm\",\n        right:\n          \"inset-y-0 right-0 h-full w-3/4  border-l data-[state=closed]:slide-out-to-right data-[state=open]:slide-in-from-right sm:max-w-sm\",\n      },\n    },\n    defaultVariants: {\n      side: \"right\",\n    },\n  }\n)\n\ninterface SheetContentProps\n  extends React.ComponentPropsWithoutRef<typeof SheetPrimitive.Content>,\n    VariantProps<typeof sheetVariants> {}\n\nconst SheetContent = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Content>,\n  SheetContentProps\n>(({ side = \"right\", className, children, ...props }, ref) => (\n  <SheetPortal>\n    <SheetOverlay />\n    <SheetPrimitive.Content\n      ref={ref}\n      className={cn(sheetVariants({ side }), className)}\n      {...props}\n    >\n      {children}\n      <SheetPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-secondary\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </SheetPrimitive.Close>\n    </SheetPrimitive.Content>\n  </SheetPortal>\n))\nSheetContent.displayName = SheetPrimitive.Content.displayName\n\nconst SheetHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetHeader.displayName = \"SheetHeader\"\n\nconst SheetFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetFooter.displayName = \"SheetFooter\"\n\nconst SheetTitle = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold text-foreground\", className)}\n    {...props}\n  />\n))\nSheetTitle.displayName = SheetPrimitive.Title.displayName\n\nconst SheetDescription = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nSheetDescription.displayName = SheetPrimitive.Description.displayName\n\nexport {\n  Sheet,\n  SheetPortal,\n  SheetOverlay,\n  SheetTrigger,\n  SheetClose,\n  SheetContent,\n  SheetHeader,\n  SheetFooter,\n  SheetTitle,\n  SheetDescription,\n}\n","size_bytes":4281},"client/src/components/ui/sidebar.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { VariantProps, cva } from \"class-variance-authority\"\nimport { PanelLeft } from \"lucide-react\"\n\nimport { useIsMobile } from \"@/hooks/use-mobile\"\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\nimport { Input } from \"@/components/ui/input\"\nimport { Separator } from \"@/components/ui/separator\"\nimport {\n  Sheet,\n  SheetContent,\n  SheetDescription,\n  SheetHeader,\n  SheetTitle,\n} from \"@/components/ui/sheet\"\nimport { Skeleton } from \"@/components/ui/skeleton\"\nimport {\n  Tooltip,\n  TooltipContent,\n  TooltipProvider,\n  TooltipTrigger,\n} from \"@/components/ui/tooltip\"\n\nconst SIDEBAR_COOKIE_NAME = \"sidebar_state\"\nconst SIDEBAR_COOKIE_MAX_AGE = 60 * 60 * 24 * 7\nconst SIDEBAR_WIDTH = \"16rem\"\nconst SIDEBAR_WIDTH_MOBILE = \"18rem\"\nconst SIDEBAR_WIDTH_ICON = \"3rem\"\nconst SIDEBAR_KEYBOARD_SHORTCUT = \"b\"\n\ntype SidebarContextProps = {\n  state: \"expanded\" | \"collapsed\"\n  open: boolean\n  setOpen: (open: boolean) => void\n  openMobile: boolean\n  setOpenMobile: (open: boolean) => void\n  isMobile: boolean\n  toggleSidebar: () => void\n}\n\nconst SidebarContext = React.createContext<SidebarContextProps | null>(null)\n\nfunction useSidebar() {\n  const context = React.useContext(SidebarContext)\n  if (!context) {\n    throw new Error(\"useSidebar must be used within a SidebarProvider.\")\n  }\n\n  return context\n}\n\nconst SidebarProvider = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    defaultOpen?: boolean\n    open?: boolean\n    onOpenChange?: (open: boolean) => void\n  }\n>(\n  (\n    {\n      defaultOpen = true,\n      open: openProp,\n      onOpenChange: setOpenProp,\n      className,\n      style,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const isMobile = useIsMobile()\n    const [openMobile, setOpenMobile] = React.useState(false)\n\n    // This is the internal state of the sidebar.\n    // We use openProp and setOpenProp for control from outside the component.\n    const [_open, _setOpen] = React.useState(defaultOpen)\n    const open = openProp ?? _open\n    const setOpen = React.useCallback(\n      (value: boolean | ((value: boolean) => boolean)) => {\n        const openState = typeof value === \"function\" ? value(open) : value\n        if (setOpenProp) {\n          setOpenProp(openState)\n        } else {\n          _setOpen(openState)\n        }\n\n        // This sets the cookie to keep the sidebar state.\n        document.cookie = `${SIDEBAR_COOKIE_NAME}=${openState}; path=/; max-age=${SIDEBAR_COOKIE_MAX_AGE}`\n      },\n      [setOpenProp, open]\n    )\n\n    // Helper to toggle the sidebar.\n    const toggleSidebar = React.useCallback(() => {\n      return isMobile\n        ? setOpenMobile((open) => !open)\n        : setOpen((open) => !open)\n    }, [isMobile, setOpen, setOpenMobile])\n\n    // Adds a keyboard shortcut to toggle the sidebar.\n    React.useEffect(() => {\n      const handleKeyDown = (event: KeyboardEvent) => {\n        if (\n          event.key === SIDEBAR_KEYBOARD_SHORTCUT &&\n          (event.metaKey || event.ctrlKey)\n        ) {\n          event.preventDefault()\n          toggleSidebar()\n        }\n      }\n\n      window.addEventListener(\"keydown\", handleKeyDown)\n      return () => window.removeEventListener(\"keydown\", handleKeyDown)\n    }, [toggleSidebar])\n\n    // We add a state so that we can do data-state=\"expanded\" or \"collapsed\".\n    // This makes it easier to style the sidebar with Tailwind classes.\n    const state = open ? \"expanded\" : \"collapsed\"\n\n    const contextValue = React.useMemo<SidebarContextProps>(\n      () => ({\n        state,\n        open,\n        setOpen,\n        isMobile,\n        openMobile,\n        setOpenMobile,\n        toggleSidebar,\n      }),\n      [state, open, setOpen, isMobile, openMobile, setOpenMobile, toggleSidebar]\n    )\n\n    return (\n      <SidebarContext.Provider value={contextValue}>\n        <TooltipProvider delayDuration={0}>\n          <div\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH,\n                \"--sidebar-width-icon\": SIDEBAR_WIDTH_ICON,\n                ...style,\n              } as React.CSSProperties\n            }\n            className={cn(\n              \"group/sidebar-wrapper flex min-h-svh w-full has-[[data-variant=inset]]:bg-sidebar\",\n              className\n            )}\n            ref={ref}\n            {...props}\n          >\n            {children}\n          </div>\n        </TooltipProvider>\n      </SidebarContext.Provider>\n    )\n  }\n)\nSidebarProvider.displayName = \"SidebarProvider\"\n\nconst Sidebar = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    side?: \"left\" | \"right\"\n    variant?: \"sidebar\" | \"floating\" | \"inset\"\n    collapsible?: \"offcanvas\" | \"icon\" | \"none\"\n  }\n>(\n  (\n    {\n      side = \"left\",\n      variant = \"sidebar\",\n      collapsible = \"offcanvas\",\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const { isMobile, state, openMobile, setOpenMobile } = useSidebar()\n\n    if (collapsible === \"none\") {\n      return (\n        <div\n          className={cn(\n            \"flex h-full w-[--sidebar-width] flex-col bg-sidebar text-sidebar-foreground\",\n            className\n          )}\n          ref={ref}\n          {...props}\n        >\n          {children}\n        </div>\n      )\n    }\n\n    if (isMobile) {\n      return (\n        <Sheet open={openMobile} onOpenChange={setOpenMobile} {...props}>\n          <SheetContent\n            data-sidebar=\"sidebar\"\n            data-mobile=\"true\"\n            className=\"w-[--sidebar-width] bg-sidebar p-0 text-sidebar-foreground [&>button]:hidden\"\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH_MOBILE,\n              } as React.CSSProperties\n            }\n            side={side}\n          >\n            <SheetHeader className=\"sr-only\">\n              <SheetTitle>Sidebar</SheetTitle>\n              <SheetDescription>Displays the mobile sidebar.</SheetDescription>\n            </SheetHeader>\n            <div className=\"flex h-full w-full flex-col\">{children}</div>\n          </SheetContent>\n        </Sheet>\n      )\n    }\n\n    return (\n      <div\n        ref={ref}\n        className=\"group peer hidden text-sidebar-foreground md:block\"\n        data-state={state}\n        data-collapsible={state === \"collapsed\" ? collapsible : \"\"}\n        data-variant={variant}\n        data-side={side}\n      >\n        {/* This is what handles the sidebar gap on desktop */}\n        <div\n          className={cn(\n            \"relative w-[--sidebar-width] bg-transparent transition-[width] duration-200 ease-linear\",\n            \"group-data-[collapsible=offcanvas]:w-0\",\n            \"group-data-[side=right]:rotate-180\",\n            variant === \"floating\" || variant === \"inset\"\n              ? \"group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4))]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon]\"\n          )}\n        />\n        <div\n          className={cn(\n            \"fixed inset-y-0 z-10 hidden h-svh w-[--sidebar-width] transition-[left,right,width] duration-200 ease-linear md:flex\",\n            side === \"left\"\n              ? \"left-0 group-data-[collapsible=offcanvas]:left-[calc(var(--sidebar-width)*-1)]\"\n              : \"right-0 group-data-[collapsible=offcanvas]:right-[calc(var(--sidebar-width)*-1)]\",\n            // Adjust the padding for floating and inset variants.\n            variant === \"floating\" || variant === \"inset\"\n              ? \"p-2 group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4)_+2px)]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon] group-data-[side=left]:border-r group-data-[side=right]:border-l\",\n            className\n          )}\n          {...props}\n        >\n          <div\n            data-sidebar=\"sidebar\"\n            className=\"flex h-full w-full flex-col bg-sidebar group-data-[variant=floating]:rounded-lg group-data-[variant=floating]:border group-data-[variant=floating]:border-sidebar-border group-data-[variant=floating]:shadow\"\n          >\n            {children}\n          </div>\n        </div>\n      </div>\n    )\n  }\n)\nSidebar.displayName = \"Sidebar\"\n\nconst SidebarTrigger = React.forwardRef<\n  React.ElementRef<typeof Button>,\n  React.ComponentProps<typeof Button>\n>(({ className, onClick, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <Button\n      ref={ref}\n      data-sidebar=\"trigger\"\n      variant=\"ghost\"\n      size=\"icon\"\n      className={cn(\"h-7 w-7\", className)}\n      onClick={(event) => {\n        onClick?.(event)\n        toggleSidebar()\n      }}\n      {...props}\n    >\n      <PanelLeft />\n      <span className=\"sr-only\">Toggle Sidebar</span>\n    </Button>\n  )\n})\nSidebarTrigger.displayName = \"SidebarTrigger\"\n\nconst SidebarRail = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\">\n>(({ className, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <button\n      ref={ref}\n      data-sidebar=\"rail\"\n      aria-label=\"Toggle Sidebar\"\n      tabIndex={-1}\n      onClick={toggleSidebar}\n      title=\"Toggle Sidebar\"\n      className={cn(\n        \"absolute inset-y-0 z-20 hidden w-4 -translate-x-1/2 transition-all ease-linear after:absolute after:inset-y-0 after:left-1/2 after:w-[2px] hover:after:bg-sidebar-border group-data-[side=left]:-right-4 group-data-[side=right]:left-0 sm:flex\",\n        \"[[data-side=left]_&]:cursor-w-resize [[data-side=right]_&]:cursor-e-resize\",\n        \"[[data-side=left][data-state=collapsed]_&]:cursor-e-resize [[data-side=right][data-state=collapsed]_&]:cursor-w-resize\",\n        \"group-data-[collapsible=offcanvas]:translate-x-0 group-data-[collapsible=offcanvas]:after:left-full group-data-[collapsible=offcanvas]:hover:bg-sidebar\",\n        \"[[data-side=left][data-collapsible=offcanvas]_&]:-right-2\",\n        \"[[data-side=right][data-collapsible=offcanvas]_&]:-left-2\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarRail.displayName = \"SidebarRail\"\n\nconst SidebarInset = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"main\">\n>(({ className, ...props }, ref) => {\n  return (\n    <main\n      ref={ref}\n      className={cn(\n        \"relative flex w-full flex-1 flex-col bg-background\",\n        \"md:peer-data-[variant=inset]:m-2 md:peer-data-[state=collapsed]:peer-data-[variant=inset]:ml-2 md:peer-data-[variant=inset]:ml-0 md:peer-data-[variant=inset]:rounded-xl md:peer-data-[variant=inset]:shadow\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInset.displayName = \"SidebarInset\"\n\nconst SidebarInput = React.forwardRef<\n  React.ElementRef<typeof Input>,\n  React.ComponentProps<typeof Input>\n>(({ className, ...props }, ref) => {\n  return (\n    <Input\n      ref={ref}\n      data-sidebar=\"input\"\n      className={cn(\n        \"h-8 w-full bg-background shadow-none focus-visible:ring-2 focus-visible:ring-sidebar-ring\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInput.displayName = \"SidebarInput\"\n\nconst SidebarHeader = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"header\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarHeader.displayName = \"SidebarHeader\"\n\nconst SidebarFooter = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"footer\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarFooter.displayName = \"SidebarFooter\"\n\nconst SidebarSeparator = React.forwardRef<\n  React.ElementRef<typeof Separator>,\n  React.ComponentProps<typeof Separator>\n>(({ className, ...props }, ref) => {\n  return (\n    <Separator\n      ref={ref}\n      data-sidebar=\"separator\"\n      className={cn(\"mx-2 w-auto bg-sidebar-border\", className)}\n      {...props}\n    />\n  )\n})\nSidebarSeparator.displayName = \"SidebarSeparator\"\n\nconst SidebarContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"content\"\n      className={cn(\n        \"flex min-h-0 flex-1 flex-col gap-2 overflow-auto group-data-[collapsible=icon]:overflow-hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarContent.displayName = \"SidebarContent\"\n\nconst SidebarGroup = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"group\"\n      className={cn(\"relative flex w-full min-w-0 flex-col p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarGroup.displayName = \"SidebarGroup\"\n\nconst SidebarGroupLabel = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"div\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-label\"\n      className={cn(\n        \"flex h-8 shrink-0 items-center rounded-md px-2 text-xs font-medium text-sidebar-foreground/70 outline-none ring-sidebar-ring transition-[margin,opacity] duration-200 ease-linear focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        \"group-data-[collapsible=icon]:-mt-8 group-data-[collapsible=icon]:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupLabel.displayName = \"SidebarGroupLabel\"\n\nconst SidebarGroupAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-action\"\n      className={cn(\n        \"absolute right-3 top-3.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupAction.displayName = \"SidebarGroupAction\"\n\nconst SidebarGroupContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"group-content\"\n    className={cn(\"w-full text-sm\", className)}\n    {...props}\n  />\n))\nSidebarGroupContent.displayName = \"SidebarGroupContent\"\n\nconst SidebarMenu = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu\"\n    className={cn(\"flex w-full min-w-0 flex-col gap-1\", className)}\n    {...props}\n  />\n))\nSidebarMenu.displayName = \"SidebarMenu\"\n\nconst SidebarMenuItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    data-sidebar=\"menu-item\"\n    className={cn(\"group/menu-item relative\", className)}\n    {...props}\n  />\n))\nSidebarMenuItem.displayName = \"SidebarMenuItem\"\n\nconst sidebarMenuButtonVariants = cva(\n  \"peer/menu-button flex w-full items-center gap-2 overflow-hidden rounded-md p-2 text-left text-sm outline-none ring-sidebar-ring transition-[width,height,padding] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 group-has-[[data-sidebar=menu-action]]/menu-item:pr-8 aria-disabled:pointer-events-none aria-disabled:opacity-50 data-[active=true]:bg-sidebar-accent data-[active=true]:font-medium data-[active=true]:text-sidebar-accent-foreground data-[state=open]:hover:bg-sidebar-accent data-[state=open]:hover:text-sidebar-accent-foreground group-data-[collapsible=icon]:!size-8 group-data-[collapsible=icon]:!p-2 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"hover:bg-sidebar-accent hover:text-sidebar-accent-foreground\",\n        outline:\n          \"bg-background shadow-[0_0_0_1px_hsl(var(--sidebar-border))] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground hover:shadow-[0_0_0_1px_hsl(var(--sidebar-accent))]\",\n      },\n      size: {\n        default: \"h-8 text-sm\",\n        sm: \"h-7 text-xs\",\n        lg: \"h-12 text-sm group-data-[collapsible=icon]:!p-0\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst SidebarMenuButton = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    isActive?: boolean\n    tooltip?: string | React.ComponentProps<typeof TooltipContent>\n  } & VariantProps<typeof sidebarMenuButtonVariants>\n>(\n  (\n    {\n      asChild = false,\n      isActive = false,\n      variant = \"default\",\n      size = \"default\",\n      tooltip,\n      className,\n      ...props\n    },\n    ref\n  ) => {\n    const Comp = asChild ? Slot : \"button\"\n    const { isMobile, state } = useSidebar()\n\n    const button = (\n      <Comp\n        ref={ref}\n        data-sidebar=\"menu-button\"\n        data-size={size}\n        data-active={isActive}\n        className={cn(sidebarMenuButtonVariants({ variant, size }), className)}\n        {...props}\n      />\n    )\n\n    if (!tooltip) {\n      return button\n    }\n\n    if (typeof tooltip === \"string\") {\n      tooltip = {\n        children: tooltip,\n      }\n    }\n\n    return (\n      <Tooltip>\n        <TooltipTrigger asChild>{button}</TooltipTrigger>\n        <TooltipContent\n          side=\"right\"\n          align=\"center\"\n          hidden={state !== \"collapsed\" || isMobile}\n          {...tooltip}\n        />\n      </Tooltip>\n    )\n  }\n)\nSidebarMenuButton.displayName = \"SidebarMenuButton\"\n\nconst SidebarMenuAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    showOnHover?: boolean\n  }\n>(({ className, asChild = false, showOnHover = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-action\"\n      className={cn(\n        \"absolute right-1 top-1.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 peer-hover/menu-button:text-sidebar-accent-foreground [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"peer-data-[size=sm]/menu-button:top-1\",\n        \"peer-data-[size=default]/menu-button:top-1.5\",\n        \"peer-data-[size=lg]/menu-button:top-2.5\",\n        \"group-data-[collapsible=icon]:hidden\",\n        showOnHover &&\n          \"group-focus-within/menu-item:opacity-100 group-hover/menu-item:opacity-100 data-[state=open]:opacity-100 peer-data-[active=true]/menu-button:text-sidebar-accent-foreground md:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuAction.displayName = \"SidebarMenuAction\"\n\nconst SidebarMenuBadge = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"menu-badge\"\n    className={cn(\n      \"pointer-events-none absolute right-1 flex h-5 min-w-5 select-none items-center justify-center rounded-md px-1 text-xs font-medium tabular-nums text-sidebar-foreground\",\n      \"peer-hover/menu-button:text-sidebar-accent-foreground peer-data-[active=true]/menu-button:text-sidebar-accent-foreground\",\n      \"peer-data-[size=sm]/menu-button:top-1\",\n      \"peer-data-[size=default]/menu-button:top-1.5\",\n      \"peer-data-[size=lg]/menu-button:top-2.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuBadge.displayName = \"SidebarMenuBadge\"\n\nconst SidebarMenuSkeleton = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    showIcon?: boolean\n  }\n>(({ className, showIcon = false, ...props }, ref) => {\n  // Random width between 50 to 90%.\n  const width = React.useMemo(() => {\n    return `${Math.floor(Math.random() * 40) + 50}%`\n  }, [])\n\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"menu-skeleton\"\n      className={cn(\"flex h-8 items-center gap-2 rounded-md px-2\", className)}\n      {...props}\n    >\n      {showIcon && (\n        <Skeleton\n          className=\"size-4 rounded-md\"\n          data-sidebar=\"menu-skeleton-icon\"\n        />\n      )}\n      <Skeleton\n        className=\"h-4 max-w-[--skeleton-width] flex-1\"\n        data-sidebar=\"menu-skeleton-text\"\n        style={\n          {\n            \"--skeleton-width\": width,\n          } as React.CSSProperties\n        }\n      />\n    </div>\n  )\n})\nSidebarMenuSkeleton.displayName = \"SidebarMenuSkeleton\"\n\nconst SidebarMenuSub = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu-sub\"\n    className={cn(\n      \"mx-3.5 flex min-w-0 translate-x-px flex-col gap-1 border-l border-sidebar-border px-2.5 py-0.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuSub.displayName = \"SidebarMenuSub\"\n\nconst SidebarMenuSubItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ ...props }, ref) => <li ref={ref} {...props} />)\nSidebarMenuSubItem.displayName = \"SidebarMenuSubItem\"\n\nconst SidebarMenuSubButton = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentProps<\"a\"> & {\n    asChild?: boolean\n    size?: \"sm\" | \"md\"\n    isActive?: boolean\n  }\n>(({ asChild = false, size = \"md\", isActive, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-sub-button\"\n      data-size={size}\n      data-active={isActive}\n      className={cn(\n        \"flex h-7 min-w-0 -translate-x-px items-center gap-2 overflow-hidden rounded-md px-2 text-sidebar-foreground outline-none ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 aria-disabled:pointer-events-none aria-disabled:opacity-50 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0 [&>svg]:text-sidebar-accent-foreground\",\n        \"data-[active=true]:bg-sidebar-accent data-[active=true]:text-sidebar-accent-foreground\",\n        size === \"sm\" && \"text-xs\",\n        size === \"md\" && \"text-sm\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuSubButton.displayName = \"SidebarMenuSubButton\"\n\nexport {\n  Sidebar,\n  SidebarContent,\n  SidebarFooter,\n  SidebarGroup,\n  SidebarGroupAction,\n  SidebarGroupContent,\n  SidebarGroupLabel,\n  SidebarHeader,\n  SidebarInput,\n  SidebarInset,\n  SidebarMenu,\n  SidebarMenuAction,\n  SidebarMenuBadge,\n  SidebarMenuButton,\n  SidebarMenuItem,\n  SidebarMenuSkeleton,\n  SidebarMenuSub,\n  SidebarMenuSubButton,\n  SidebarMenuSubItem,\n  SidebarProvider,\n  SidebarRail,\n  SidebarSeparator,\n  SidebarTrigger,\n  useSidebar,\n}\n","size_bytes":23567},"client/src/components/ui/skeleton.tsx":{"content":"import { cn } from \"@/lib/utils\"\n\nfunction Skeleton({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) {\n  return (\n    <div\n      className={cn(\"animate-pulse rounded-md bg-muted\", className)}\n      {...props}\n    />\n  )\n}\n\nexport { Skeleton }\n","size_bytes":261},"client/src/components/ui/slider.tsx":{"content":"import * as React from \"react\"\nimport * as SliderPrimitive from \"@radix-ui/react-slider\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Slider = React.forwardRef<\n  React.ElementRef<typeof SliderPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SliderPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <SliderPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex w-full touch-none select-none items-center\",\n      className\n    )}\n    {...props}\n  >\n    <SliderPrimitive.Track className=\"relative h-2 w-full grow overflow-hidden rounded-full bg-secondary\">\n      <SliderPrimitive.Range className=\"absolute h-full bg-primary\" />\n    </SliderPrimitive.Track>\n    <SliderPrimitive.Thumb className=\"block h-5 w-5 rounded-full border-2 border-primary bg-background ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50\" />\n  </SliderPrimitive.Root>\n))\nSlider.displayName = SliderPrimitive.Root.displayName\n\nexport { Slider }\n","size_bytes":1077},"client/src/components/ui/switch.tsx":{"content":"import * as React from \"react\"\nimport * as SwitchPrimitives from \"@radix-ui/react-switch\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Switch = React.forwardRef<\n  React.ElementRef<typeof SwitchPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof SwitchPrimitives.Root>\n>(({ className, ...props }, ref) => (\n  <SwitchPrimitives.Root\n    className={cn(\n      \"peer inline-flex h-6 w-11 shrink-0 cursor-pointer items-center rounded-full border-2 border-transparent transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 focus-visible:ring-offset-background disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=unchecked]:bg-input\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  >\n    <SwitchPrimitives.Thumb\n      className={cn(\n        \"pointer-events-none block h-5 w-5 rounded-full bg-background shadow-lg ring-0 transition-transform data-[state=checked]:translate-x-5 data-[state=unchecked]:translate-x-0\"\n      )}\n    />\n  </SwitchPrimitives.Root>\n))\nSwitch.displayName = SwitchPrimitives.Root.displayName\n\nexport { Switch }\n","size_bytes":1139},"client/src/components/ui/table.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Table = React.forwardRef<\n  HTMLTableElement,\n  React.HTMLAttributes<HTMLTableElement>\n>(({ className, ...props }, ref) => (\n  <div className=\"relative w-full overflow-auto\">\n    <table\n      ref={ref}\n      className={cn(\"w-full caption-bottom text-sm\", className)}\n      {...props}\n    />\n  </div>\n))\nTable.displayName = \"Table\"\n\nconst TableHeader = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <thead ref={ref} className={cn(\"[&_tr]:border-b\", className)} {...props} />\n))\nTableHeader.displayName = \"TableHeader\"\n\nconst TableBody = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tbody\n    ref={ref}\n    className={cn(\"[&_tr:last-child]:border-0\", className)}\n    {...props}\n  />\n))\nTableBody.displayName = \"TableBody\"\n\nconst TableFooter = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tfoot\n    ref={ref}\n    className={cn(\n      \"border-t bg-muted/50 font-medium [&>tr]:last:border-b-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableFooter.displayName = \"TableFooter\"\n\nconst TableRow = React.forwardRef<\n  HTMLTableRowElement,\n  React.HTMLAttributes<HTMLTableRowElement>\n>(({ className, ...props }, ref) => (\n  <tr\n    ref={ref}\n    className={cn(\n      \"border-b transition-colors hover:bg-muted/50 data-[state=selected]:bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nTableRow.displayName = \"TableRow\"\n\nconst TableHead = React.forwardRef<\n  HTMLTableCellElement,\n  React.ThHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <th\n    ref={ref}\n    className={cn(\n      \"h-12 px-4 text-left align-middle font-medium text-muted-foreground [&:has([role=checkbox])]:pr-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableHead.displayName = \"TableHead\"\n\nconst TableCell = React.forwardRef<\n  HTMLTableCellElement,\n  React.TdHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <td\n    ref={ref}\n    className={cn(\"p-4 align-middle [&:has([role=checkbox])]:pr-0\", className)}\n    {...props}\n  />\n))\nTableCell.displayName = \"TableCell\"\n\nconst TableCaption = React.forwardRef<\n  HTMLTableCaptionElement,\n  React.HTMLAttributes<HTMLTableCaptionElement>\n>(({ className, ...props }, ref) => (\n  <caption\n    ref={ref}\n    className={cn(\"mt-4 text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nTableCaption.displayName = \"TableCaption\"\n\nexport {\n  Table,\n  TableHeader,\n  TableBody,\n  TableFooter,\n  TableHead,\n  TableRow,\n  TableCell,\n  TableCaption,\n}\n","size_bytes":2765},"client/src/components/ui/tabs.tsx":{"content":"import * as React from \"react\"\nimport * as TabsPrimitive from \"@radix-ui/react-tabs\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Tabs = TabsPrimitive.Root\n\nconst TabsList = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.List\n    ref={ref}\n    className={cn(\n      \"inline-flex h-10 items-center justify-center rounded-md bg-muted p-1 text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsList.displayName = TabsPrimitive.List.displayName\n\nconst TabsTrigger = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"inline-flex items-center justify-center whitespace-nowrap rounded-sm px-3 py-1.5 text-sm font-medium ring-offset-background transition-all focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=active]:bg-background data-[state=active]:text-foreground data-[state=active]:shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsTrigger.displayName = TabsPrimitive.Trigger.displayName\n\nconst TabsContent = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"mt-2 ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsContent.displayName = TabsPrimitive.Content.displayName\n\nexport { Tabs, TabsList, TabsTrigger, TabsContent }\n","size_bytes":1883},"client/src/components/ui/textarea.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Textarea = React.forwardRef<\n  HTMLTextAreaElement,\n  React.ComponentProps<\"textarea\">\n>(({ className, ...props }, ref) => {\n  return (\n    <textarea\n      className={cn(\n        \"flex min-h-[80px] w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  )\n})\nTextarea.displayName = \"Textarea\"\n\nexport { Textarea }\n","size_bytes":689},"client/src/components/ui/toast.tsx":{"content":"import * as React from \"react\"\nimport * as ToastPrimitives from \"@radix-ui/react-toast\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ToastProvider = ToastPrimitives.Provider\n\nconst ToastViewport = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Viewport>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Viewport>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Viewport\n    ref={ref}\n    className={cn(\n      \"fixed top-0 z-[100] flex max-h-screen w-full flex-col-reverse p-4 sm:bottom-0 sm:right-0 sm:top-auto sm:flex-col md:max-w-[420px]\",\n      className\n    )}\n    {...props}\n  />\n))\nToastViewport.displayName = ToastPrimitives.Viewport.displayName\n\nconst toastVariants = cva(\n  \"group pointer-events-auto relative flex w-full items-center justify-between space-x-4 overflow-hidden rounded-md border p-6 pr-8 shadow-lg transition-all data-[swipe=cancel]:translate-x-0 data-[swipe=end]:translate-x-[var(--radix-toast-swipe-end-x)] data-[swipe=move]:translate-x-[var(--radix-toast-swipe-move-x)] data-[swipe=move]:transition-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[swipe=end]:animate-out data-[state=closed]:fade-out-80 data-[state=closed]:slide-out-to-right-full data-[state=open]:slide-in-from-top-full data-[state=open]:sm:slide-in-from-bottom-full\",\n  {\n    variants: {\n      variant: {\n        default: \"border bg-background text-foreground\",\n        destructive:\n          \"destructive group border-destructive bg-destructive text-destructive-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Toast = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Root> &\n    VariantProps<typeof toastVariants>\n>(({ className, variant, ...props }, ref) => {\n  return (\n    <ToastPrimitives.Root\n      ref={ref}\n      className={cn(toastVariants({ variant }), className)}\n      {...props}\n    />\n  )\n})\nToast.displayName = ToastPrimitives.Root.displayName\n\nconst ToastAction = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Action>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Action>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Action\n    ref={ref}\n    className={cn(\n      \"inline-flex h-8 shrink-0 items-center justify-center rounded-md border bg-transparent px-3 text-sm font-medium ring-offset-background transition-colors hover:bg-secondary focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 group-[.destructive]:border-muted/40 group-[.destructive]:hover:border-destructive/30 group-[.destructive]:hover:bg-destructive group-[.destructive]:hover:text-destructive-foreground group-[.destructive]:focus:ring-destructive\",\n      className\n    )}\n    {...props}\n  />\n))\nToastAction.displayName = ToastPrimitives.Action.displayName\n\nconst ToastClose = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Close>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Close>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Close\n    ref={ref}\n    className={cn(\n      \"absolute right-2 top-2 rounded-md p-1 text-foreground/50 opacity-0 transition-opacity hover:text-foreground focus:opacity-100 focus:outline-none focus:ring-2 group-hover:opacity-100 group-[.destructive]:text-red-300 group-[.destructive]:hover:text-red-50 group-[.destructive]:focus:ring-red-400 group-[.destructive]:focus:ring-offset-red-600\",\n      className\n    )}\n    toast-close=\"\"\n    {...props}\n  >\n    <X className=\"h-4 w-4\" />\n  </ToastPrimitives.Close>\n))\nToastClose.displayName = ToastPrimitives.Close.displayName\n\nconst ToastTitle = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Title>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Title>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Title\n    ref={ref}\n    className={cn(\"text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nToastTitle.displayName = ToastPrimitives.Title.displayName\n\nconst ToastDescription = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Description>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Description>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Description\n    ref={ref}\n    className={cn(\"text-sm opacity-90\", className)}\n    {...props}\n  />\n))\nToastDescription.displayName = ToastPrimitives.Description.displayName\n\ntype ToastProps = React.ComponentPropsWithoutRef<typeof Toast>\n\ntype ToastActionElement = React.ReactElement<typeof ToastAction>\n\nexport {\n  type ToastProps,\n  type ToastActionElement,\n  ToastProvider,\n  ToastViewport,\n  Toast,\n  ToastTitle,\n  ToastDescription,\n  ToastClose,\n  ToastAction,\n}\n","size_bytes":4845},"client/src/components/ui/toaster.tsx":{"content":"import { useToast } from \"@/hooks/use-toast\"\nimport {\n  Toast,\n  ToastClose,\n  ToastDescription,\n  ToastProvider,\n  ToastTitle,\n  ToastViewport,\n} from \"@/components/ui/toast\"\n\nexport function Toaster() {\n  const { toasts } = useToast()\n\n  return (\n    <ToastProvider>\n      {toasts.map(function ({ id, title, description, action, ...props }) {\n        return (\n          <Toast key={id} {...props}>\n            <div className=\"grid gap-1\">\n              {title && <ToastTitle>{title}</ToastTitle>}\n              {description && (\n                <ToastDescription>{description}</ToastDescription>\n              )}\n            </div>\n            {action}\n            <ToastClose />\n          </Toast>\n        )\n      })}\n      <ToastViewport />\n    </ToastProvider>\n  )\n}\n","size_bytes":772},"client/src/components/ui/toggle-group.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ToggleGroupPrimitive from \"@radix-ui/react-toggle-group\"\nimport { type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\nimport { toggleVariants } from \"@/components/ui/toggle\"\n\nconst ToggleGroupContext = React.createContext<\n  VariantProps<typeof toggleVariants>\n>({\n  size: \"default\",\n  variant: \"default\",\n})\n\nconst ToggleGroup = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, children, ...props }, ref) => (\n  <ToggleGroupPrimitive.Root\n    ref={ref}\n    className={cn(\"flex items-center justify-center gap-1\", className)}\n    {...props}\n  >\n    <ToggleGroupContext.Provider value={{ variant, size }}>\n      {children}\n    </ToggleGroupContext.Provider>\n  </ToggleGroupPrimitive.Root>\n))\n\nToggleGroup.displayName = ToggleGroupPrimitive.Root.displayName\n\nconst ToggleGroupItem = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Item> &\n    VariantProps<typeof toggleVariants>\n>(({ className, children, variant, size, ...props }, ref) => {\n  const context = React.useContext(ToggleGroupContext)\n\n  return (\n    <ToggleGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        toggleVariants({\n          variant: context.variant || variant,\n          size: context.size || size,\n        }),\n        className\n      )}\n      {...props}\n    >\n      {children}\n    </ToggleGroupPrimitive.Item>\n  )\n})\n\nToggleGroupItem.displayName = ToggleGroupPrimitive.Item.displayName\n\nexport { ToggleGroup, ToggleGroupItem }\n","size_bytes":1753},"client/src/components/ui/toggle.tsx":{"content":"import * as React from \"react\"\nimport * as TogglePrimitive from \"@radix-ui/react-toggle\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst toggleVariants = cva(\n  \"inline-flex items-center justify-center rounded-md text-sm font-medium ring-offset-background transition-colors hover:bg-muted hover:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=on]:bg-accent data-[state=on]:text-accent-foreground [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0 gap-2\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-transparent\",\n        outline:\n          \"border border-input bg-transparent hover:bg-accent hover:text-accent-foreground\",\n      },\n      size: {\n        default: \"h-10 px-3 min-w-10\",\n        sm: \"h-9 px-2.5 min-w-9\",\n        lg: \"h-11 px-5 min-w-11\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst Toggle = React.forwardRef<\n  React.ElementRef<typeof TogglePrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof TogglePrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, ...props }, ref) => (\n  <TogglePrimitive.Root\n    ref={ref}\n    className={cn(toggleVariants({ variant, size, className }))}\n    {...props}\n  />\n))\n\nToggle.displayName = TogglePrimitive.Root.displayName\n\nexport { Toggle, toggleVariants }\n","size_bytes":1527},"client/src/components/ui/tooltip.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as TooltipPrimitive from \"@radix-ui/react-tooltip\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst TooltipProvider = TooltipPrimitive.Provider\n\nconst Tooltip = TooltipPrimitive.Root\n\nconst TooltipTrigger = TooltipPrimitive.Trigger\n\nconst TooltipContent = React.forwardRef<\n  React.ElementRef<typeof TooltipPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TooltipPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <TooltipPrimitive.Content\n    ref={ref}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 overflow-hidden rounded-md border bg-popover px-3 py-1.5 text-sm text-popover-foreground shadow-md animate-in fade-in-0 zoom-in-95 data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=closed]:zoom-out-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-tooltip-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nTooltipContent.displayName = TooltipPrimitive.Content.displayName\n\nexport { Tooltip, TooltipTrigger, TooltipContent, TooltipProvider }\n","size_bytes":1209}}}